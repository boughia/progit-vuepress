(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{490:function(t,a,i){"use strict";i.r(a);var s=i(28),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"获取-git-仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#获取-git-仓库"}},[t._v("#")]),t._v(" 获取 Git 仓库")]),t._v(" "),i("p",[t._v("通常有两种获取 Git 项目仓库的方式：")]),t._v(" "),i("div",{staticClass:"ordered-list arabic"},[i("ol",{staticClass:"arabic"},[i("li",[i("span",{staticClass:"principal"},[t._v("将尚未进行版本控制的本地目录转换为 Git 仓库；")])]),t._v(" "),i("li",[i("span",{staticClass:"principal"},[t._v("从其它服务器 "),i("strong",[t._v("克隆")]),t._v(" 一个已存在的 Git 仓库。")])])])]),t._v(" "),i("p",[t._v("两种方式都会在你的本地机器上得到一个工作就绪的 Git 仓库。")]),t._v(" "),i("h2",{attrs:{id:"在已存在目录中初始化仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#在已存在目录中初始化仓库"}},[t._v("#")]),t._v(" 在已存在目录中初始化仓库")]),t._v(" "),i("p",[t._v("如果你有一个尚未进行版本控制的项目目录，想要用 Git 来控制它，那么首先需要进入该项目目录中。\n如果你还没这样做过，那么不同系统上的做法有些不同：")]),t._v(" "),i("p",[t._v("在 Linux 上：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /home/user/my_project")])]),t._v(" "),i("p",[t._v("在 macOS 上：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /Users/user/my_project")])]),t._v(" "),i("p",[t._v("在 Windows 上：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /c/user/my_project")])]),t._v(" "),i("p",[t._v("之后执行：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git init")])]),t._v(" "),i("p",[t._v("该命令将创建一个名为 "),i("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。\n但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。\n(参见 "),i("a",{staticClass:"xref",attrs:{id:"xref--ch10-git-internals",href:"/chapter-10/index.html"}},[t._v("Git 内部原理")]),t._v(" 来了解更多关于到底 "),i("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 文件夹中包含了哪些文件的信息。)")]),t._v(" "),i("p",[t._v("如果在一个已存在文件的文件夹（而非空文件夹）中进行版本控制，你应该开始追踪这些文件并进行初始提交。\n可以通过 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 命令来指定所需的文件来进行追踪，然后执行 "),i("code",{staticClass:"literal"},[t._v("git commit")]),t._v(" ：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add *.c\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add LICENSE\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -m "),i("span",{staticStyle:{"font-style":"italic"}},[t._v("'initial project version'")])])]),t._v(" "),i("p",[t._v("稍后我们再逐一解释这些指令的行为。\n现在，你已经得到了一个存在被追踪文件与初始提交的 Git 仓库。")]),t._v(" "),i("h2",{attrs:{id:"克隆现有的仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#克隆现有的仓库"}},[t._v("#")]),t._v(" 克隆现有的仓库")]),t._v(" "),i("p",[t._v("如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 "),i("code",{staticClass:"literal"},[t._v("git clone")]),t._v(' 命令。\n如果你对其它的 VCS 系统（比如说 Subversion）很熟悉，请留心一下你所使用的命令是"clone"而不是"checkout"。\n这是 Git 区别于其它版本控制系统的一个重要特性，Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。\n当你执行 '),i("code",{staticClass:"literal"},[t._v("git clone")]),t._v(" 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。\n事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库\n（虽然可能会丢失某些服务器端的钩子（hook）设置，但是所有版本的数据仍在，详见 "),i("a",{staticClass:"xref",attrs:{id:"xref--ch04-git-on-the-server--_getting_git_on_a_server",href:"/chapter-4/2.html#在服务器上搭建-git"}},[t._v("在服务器上搭建 Git")]),t._v(" ）。")]),t._v(" "),i("p",[t._v("克隆仓库的命令是 "),i("code",{staticClass:"literal"},[t._v("git clone <url>")]),t._v(" 。\n比如，要克隆 Git 的链接库 "),i("code",{staticClass:"literal"},[t._v("libgit2")]),t._v("，可以用下面的命令：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone https://github.com/libgit2/libgit2")])]),t._v(" "),i("p",[t._v("这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 "),i("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 文件夹，\n从远程仓库拉取下所有数据放入 "),i("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 文件夹，然后从中读取最新版本的文件的拷贝。\n如果你进入到这个新建的 "),i("code",{staticClass:"literal"},[t._v("libgit2")]),t._v(" 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。")]),t._v(" "),i("p",[t._v("如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以通过额外的参数指定新的目录名：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone https://github.com/libgit2/libgit2 mylibgit")])]),t._v(" "),i("p",[t._v("这会执行与上一条命令相同的操作，但目标目录名变为了 "),i("code",{staticClass:"literal"},[t._v("mylibgit")]),t._v("。")]),t._v(" "),i("p",[t._v("Git 支持多种数据传输协议。\n上面的例子使用的是 "),i("code",{staticClass:"literal"},[t._v("https://")]),t._v(" 协议，不过你也可以使用 "),i("code",{staticClass:"literal"},[t._v("git://")]),t._v(" 协议或者使用 SSH 传输协议，比如 "),i("code",{staticClass:"literal"},[t._v("user@server:path/to/repo.git")]),t._v(" 。\n"),i("a",{staticClass:"xref",attrs:{href:"/chapter-4/2.html#在服务器上搭建-git"}},[t._v("在服务器上搭建 Git")]),t._v(" 将会介绍所有这些协议在服务器端如何配置使用，以及各种方式之间的利弊。")])])}),[],!1,null,null,null);a.default=e.exports}}]);