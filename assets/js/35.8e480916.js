(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{270:function(t,a,e){t.exports=e.p+"assets/img/data-model-4.7292fa52.png"},482:function(t,a,e){"use strict";e.r(a);var s=e(28),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-引用"}},[t._v("#")]),t._v(" Git 引用")]),t._v(" "),s("p",[t._v("如果你对仓库中从一个提交（比如 "),s("code",{staticClass:"literal"},[t._v("1a410e")]),t._v("）开始往前的历史感兴趣，那么可以运行\n"),s("code",{staticClass:"literal"},[t._v("git log 1a410e")]),t._v(" 这样的命令来显示历史，不过你需要记得 "),s("code",{staticClass:"literal"},[t._v("1a410e")]),t._v(" 是你查看历史的起点提交。\n如果我们有一个文件来保存 SHA-1 值，而该文件有一个简单的名字，\n然后用这个名字指针来替代原始的 SHA-1 值的话会更加简单。")]),t._v(" "),s("p",[t._v("在 Git 中，这种简单的名字被称为“引用（references，或简写为 refs）”。\n你可以在 "),s("code",{staticClass:"literal"},[t._v(".git/refs")]),t._v(" 目录下找到这类含有 SHA-1 值的文件。\n在目前的项目中，这个目录没有包含任何文件，但它包含了一个简单的目录结构：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" find .git/refs\n.git/refs\n.git/refs/heads\n.git/refs/tags\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" find .git/refs -type f")])]),t._v(" "),s("p",[t._v("若要创建一个新引用来帮助记忆最新提交所在的位置，从技术上讲我们只需简单地做如下操作：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" echo 1a410efbd13591db07496601ebc7a059dd55cfe9 > .git/refs/heads/master")])]),t._v(" "),s("p",[t._v("现在，你就可以在 Git 命令中使用这个刚创建的新引用来代替 SHA-1 值了：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --pretty=oneline master\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit")])]),t._v(" "),s("p",[t._v("我们不提倡直接编辑引用文件。\n如果想更新某个引用，Git 提供了一个更加安全的命令 "),s("code",{staticClass:"literal"},[t._v("update-ref")]),t._v(" 来完成此事：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9")])]),t._v(" "),s("p",[t._v("这基本就是 Git 分支的本质：一个指向某一系列提交之首的指针或引用。\n若想在第二个提交上创建一个分支，可以这么做：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git update-ref refs/heads/test cac0ca")])]),t._v(" "),s("p",[t._v("这个分支将只包含从第二个提交开始往前追溯的记录：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --pretty=oneline test\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit")])]),t._v(" "),s("p",[t._v("至此，我们的 Git 数据库从概念上看起来像这样：")]),t._v(" "),s("figure",{staticClass:"image"},[s("div",{staticClass:"content"},[s("img",{attrs:{src:e(270),alt:"包含分支引用的 Git 目录对象。"}})]),t._v(" "),s("figcaption",[t._v("Figure 4. 包含分支引用的 Git 目录对象。")])]),t._v(" "),s("p",[t._v("当运行类似于 "),s("code",{staticClass:"literal"},[t._v("git branch <branch>")]),t._v(" 这样的命令时，Git 实际上会运行 "),s("code",{staticClass:"literal"},[t._v("update-ref")]),t._v(" 命令，\n取得当前所在分支最新提交对应的 SHA-1 值，并将其加入你想要创建的任何新引用中。")]),t._v(" "),s("h2",{attrs:{id:"head-引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#head-引用"}},[t._v("#")]),t._v(" HEAD 引用")]),t._v(" "),s("p",[t._v("现在的问题是，当你执行 "),s("code",{staticClass:"literal"},[t._v("git branch <branch>")]),t._v(" 时，Git 如何知道最新提交的 SHA-1 值呢？\n答案是 HEAD 文件。")]),t._v(" "),s("p",[t._v("HEAD 文件通常是一个符号引用（symbolic reference），指向目前所在的分支。\n所谓符号引用，表示它是一个指向其他引用的指针。")]),t._v(" "),s("p",[t._v("然而在某些罕见的情况下，HEAD 文件可能会包含一个 git 对象的 SHA-1 值。\n当你在检出一个标签、提交或远程分支，让你的仓库变成\n"),s("a",{staticClass:"link",attrs:{href:"https://git-scm.com/docs/git-checkout#_detached_head"}},[t._v("“分离 HEAD”")]),t._v("状态时，就会出现这种情况。")]),t._v(" "),s("p",[t._v("如果查看 HEAD 文件的内容，通常我们看到类似这样的内容：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat .git/HEAD\nref: refs/heads/master")])]),t._v(" "),s("p",[t._v("如果执行 "),s("code",{staticClass:"literal"},[t._v("git checkout test")]),t._v("，Git 会像这样更新 HEAD 文件：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat .git/HEAD\nref: refs/heads/test")])]),t._v(" "),s("p",[t._v("当我们执行 "),s("code",{staticClass:"literal"},[t._v("git commit")]),t._v(" 时，该命令会创建一个提交对象，并用 HEAD 文件中那个引用所指向的 SHA-1 值设置其父提交字段。")]),t._v(" "),s("p",[t._v("你也可以手动编辑该文件，然而同样存在一个更安全的命令来完成此事："),s("code",{staticClass:"literal"},[t._v("git symbolic-ref")]),t._v("。\n可以借助此命令来查看 HEAD 引用对应的值：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git symbolic-ref HEAD\nrefs/heads/master")])]),t._v(" "),s("p",[t._v("同样可以设置 HEAD 引用的值：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git symbolic-ref HEAD refs/heads/test\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat .git/HEAD\nref: refs/heads/test")])]),t._v(" "),s("p",[t._v("不能把符号引用设置为一个不符合引用规范的值：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git symbolic-ref HEAD test\nfatal: Refusing to point HEAD outside of refs/")])]),t._v(" "),s("h2",{attrs:{id:"标签引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签引用"}},[t._v("#")]),t._v(" 标签引用")]),t._v(" "),s("p",[t._v("前面我们刚讨论过 Git 的三种主要的对象类型（"),s("strong",[t._v("数据对象")]),t._v("、"),s("strong",[t._v("树对象")]),t._v(" 和 "),s("strong",[t._v("提交对象")]),t._v(" ），然而实际上还有第四种。\n"),s("strong",[t._v("标签对象（tag object）")]),t._v(" 非常类似于一个提交对象——它包含一个标签创建者信息、一个日期、一段注释信息，以及一个指针。\n主要的区别在于，标签对象通常指向一个提交对象，而不是一个树对象。\n它像是一个永不移动的分支引用——永远指向同一个提交对象，只不过给这个提交对象加上一个更友好的名字罢了。")]),t._v(" "),s("p",[t._v("正如 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch02-git-basics-chapter",href:"/chapter-2/index.html"}},[t._v("Git 基础")]),t._v(" 中所讨论的那样，存在两种类型的标签：附注标签和轻量标签。\n可以像这样创建一个轻量标签：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d")])]),t._v(" "),s("p",[t._v("这就是轻量标签的全部内容——一个固定的引用。\n然而，一个附注标签则更复杂一些。\n若要创建一个附注标签，Git 会创建一个标签对象，并记录一个引用来指向该标签对象，而不是直接指向提交对象。\n可以通过创建一个附注标签来验证这个过程（使用 "),s("code",{staticClass:"literal"},[t._v("-a")]),t._v(" 选项）：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'test tag'")])])]),t._v(" "),s("p",[t._v("下面是上述过程所建标签对象的 SHA-1 值：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat .git/refs/tags/v1.1\n9585191f37f7b0fb9444f35a9bf50de191beadc2")])]),t._v(" "),s("p",[t._v("现在对该 SHA-1 值运行 "),s("code",{staticClass:"literal"},[t._v("git cat-file -p")]),t._v(" 命令：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2\nobject 1a410efbd13591db07496601ebc7a059dd55cfe9\ntype commit\ntag v1.1\ntagger Scott Chacon <schacon@gmail.com> Sat May 23 16:48:58 2009 -0700\n\ntest tag")])]),t._v(" "),s("p",[t._v("我们注意到，object 条目指向我们打了标签的那个提交对象的 SHA-1 值。\n另外要注意的是，标签对象并非必须指向某个提交对象；你可以对任意类型的 Git 对象打标签。\n例如，在 Git 源码中，项目维护者将他们的 GPG 公钥添加为一个数据对象，然后对这个对象打了一个标签。\n可以克隆一个 Git 版本库，然后通过执行下面的命令来在这个版本库中查看上述公钥：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git cat-file blob junio-gpg-pub")])]),t._v(" "),s("p",[t._v("Linux 内核版本库同样有一个不指向提交对象的标签对象——首个被创建的标签对象所指向的是最初被引入版本库的那份内核源码所对应的树对象。")]),t._v(" "),s("h2",{attrs:{id:"远程引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程引用"}},[t._v("#")]),t._v(" 远程引用")]),t._v(" "),s("p",[t._v("我们将看到的第三种引用类型是远程引用（remote reference）。\n如果你添加了一个远程版本库并对其执行过推送操作，Git 会记录下最近一次推送操作时每一个分支所对应的值，并保存在 "),s("code",{staticClass:"literal"},[t._v("refs/remotes")]),t._v(" 目录下。\n例如，你可以添加一个叫做 "),s("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 的远程版本库，然后把 "),s("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支推送上去：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git remote add origin git@github.com:schacon/simplegit-progit.git\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master\nCounting objects: 11, done.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (7/7), 716 bytes, done.\nTotal 7 (delta 2), reused 4 (delta 1)\nTo git@github.com:schacon/simplegit-progit.git\n  a11bef0..ca82a6d  master -> master")])]),t._v(" "),s("p",[t._v("此时，如果查看 "),s("code",{staticClass:"literal"},[t._v("refs/remotes/origin/master")]),t._v(" 文件，可以发现 "),s("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 远程版本库的 "),s("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支所对应的 SHA-1 值，就是最近一次与服务器通信时本地 "),s("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支所对应的 SHA-1 值：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat .git/refs/remotes/origin/master\nca82a6dff817ec66f44342007202690a93763949")])]),t._v(" "),s("p",[t._v("远程引用和分支（位于 "),s("code",{staticClass:"literal"},[t._v("refs/heads")]),t._v(" 目录下的引用）之间最主要的区别在于，远程引用是只读的。\n虽然可以 "),s("code",{staticClass:"literal"},[t._v("git checkout")]),t._v(" 到某个远程引用，但是 Git 并不会将 HEAD 引用指向该远程引用。因此，你永远不能通过 "),s("code",{staticClass:"literal"},[t._v("commit")]),t._v(" 命令来更新远程引用。\nGit 将这些远程引用作为记录远程服务器上各分支最后已知位置状态的书签来管理。")])])}),[],!1,null,null,null);a.default=i.exports}}]);