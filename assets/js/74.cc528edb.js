(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{486:function(t,a,e){"use strict";e.r(a);var s=e(28),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"维护与数据恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护与数据恢复"}},[t._v("#")]),t._v(" 维护与数据恢复")]),t._v(" "),e("p",[t._v("有的时候，你需要对仓库进行清理——使它的结构变得更紧凑，或是对导入的仓库进行清理，或是恢复丢失的内容。\n这个小节将会介绍这些情况中的一部分。")]),t._v(" "),e("h2",{attrs:{id:"维护"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护"}},[t._v("#")]),t._v(" 维护")]),t._v(" "),e("p",[t._v("Git 会不定时地自动运行一个叫做 “auto gc” 的命令。\n大多数时候，这个命令并不会产生效果。\n然而，如果有太多松散对象（不在包文件中的对象）或者太多包文件，Git 会运行一个完整的 "),e("code",{staticClass:"literal"},[t._v("git gc")]),t._v(" 命令。\n“gc” 代表垃圾回收，这个命令会做以下事情：收集所有松散对象并将它们放置到包文件中，\n将多个包文件合并为一个大的包文件，移除与任何提交都不相关的陈旧对象。")]),t._v(" "),e("p",[t._v("可以像下面一样手动执行自动垃圾回收：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git gc --auto")])]),t._v(" "),e("p",[t._v("就像上面提到的，这个命令通常并不会产生效果。\n大约需要 7000 个以上的松散对象或超过 50 个的包文件才能让 Git 启动一次真正的 gc 命令。\n你可以通过修改 "),e("code",{staticClass:"literal"},[t._v("gc.auto")]),t._v(" 与 "),e("code",{staticClass:"literal"},[t._v("gc.autopacklimit")]),t._v(" 的设置来改动这些数值。")]),t._v(" "),e("p",[e("code",{staticClass:"literal"},[t._v("gc")]),t._v(" 将会做的另一件事是打包你的引用到一个单独的文件。\n假设你的仓库包含以下分支与标签：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" find .git/refs -type f\n.git/refs/heads/experiment\n.git/refs/heads/master\n.git/refs/tags/v1.0\n.git/refs/tags/v1.1")])]),t._v(" "),e("p",[t._v("如果你执行了 "),e("code",{staticClass:"literal"},[t._v("git gc")]),t._v(" 命令，"),e("code",{staticClass:"literal"},[t._v("refs")]),t._v(" 目录中将不会再有这些文件。\n为了保证效率 Git 会将它们移动到名为 "),e("code",{staticClass:"literal"},[t._v(".git/packed-refs")]),t._v(" 的文件中，就像这样：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat .git/packed-refs\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" pack-refs with: peeled fully-peeled\ncac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment\nab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master\ncac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0\n9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1\n^1a410efbd13591db07496601ebc7a059dd55cfe9")])]),t._v(" "),e("p",[t._v("如果你更新了引用，Git 并不会修改这个文件，而是向 "),e("code",{staticClass:"literal"},[t._v("refs/heads")]),t._v(" 创建一个新的文件。\n为了获得指定引用的正确 SHA-1 值，Git 会首先在 "),e("code",{staticClass:"literal"},[t._v("refs")]),t._v(" 目录中查找指定的引用，然后再到 "),e("code",{staticClass:"literal"},[t._v("packed-refs")]),t._v(" 文件中查找。\n所以，如果你在 "),e("code",{staticClass:"literal"},[t._v("refs")]),t._v(" 目录中找不到一个引用，那么它或许在 "),e("code",{staticClass:"literal"},[t._v("packed-refs")]),t._v(" 文件中。")]),t._v(" "),e("p",[t._v("注意这个文件的最后一行，它会以 "),e("code",{staticClass:"literal"},[t._v("^")]),t._v(" 开头。\n这个符号表示它上一行的标签是附注标签，"),e("code",{staticClass:"literal"},[t._v("^")]),t._v(" 所在的那一行是附注标签指向的那个提交。")]),t._v(" "),e("h2",{attrs:{id:"数据恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据恢复"}},[t._v("#")]),t._v(" 数据恢复")]),t._v(" "),e("p",[t._v("在你使用 Git 的时候，你可能会意外丢失一次提交。\n通常这是因为你强制删除了正在工作的分支，但是最后却发现你还需要这个分支，\n亦或者硬重置了一个分支，放弃了你想要的提交。\n如果这些事情已经发生，该如何找回你的提交呢？")]),t._v(" "),e("p",[t._v("下面的例子将硬重置你的测试仓库中的 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支到一个旧的提交，以此来恢复丢失的提交。\n首先，让我们看看你的仓库现在在什么地方：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --pretty=oneline\nab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit\n484a59275031909e19aadb7c92262719cfcdf19a added repo.rb\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit")])]),t._v(" "),e("p",[t._v("现在，我们将 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支硬重置到第三次提交：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9\nHEAD is now at 1a410ef third commit\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --pretty=oneline\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit")])]),t._v(" "),e("p",[t._v("现在顶部的两个提交已经丢失了——没有分支指向这些提交。\n你需要找出最后一次提交的 SHA-1 然后增加一个指向它的分支。\n窍门就是找到最后一次的提交的 SHA-1 ——但是估计你记不起来了，对吗？")]),t._v(" "),e("p",[t._v("最方便，也是最常用的方法，是使用一个名叫 "),e("code",{staticClass:"literal"},[t._v("git reflog")]),t._v(" 的工具。\n当你正在工作时，Git 会默默地记录每一次你改变 HEAD 时它的值。\n每一次你提交或改变分支，引用日志都会被更新。\n引用日志（reflog）也可以通过 "),e("code",{staticClass:"literal"},[t._v("git update-ref")]),t._v(" 命令更新，我们在\n"),e("a",{staticClass:"xref",attrs:{id:"xref-_git_refs",href:"#_git_refs"}},[t._v("Git 引用")]),t._v(" 有提到使用这个命令而不是是直接将 SHA-1 的值写入引用文件中的原因。\n你可以在任何时候通过执行 "),e("code",{staticClass:"literal"},[t._v("git reflog")]),t._v(" 命令来了解你曾经做过什么：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git reflog\n1a410ef HEAD@{0}: reset: moving to 1a410ef\nab1afef HEAD@{1}: commit: modified repo.rb a bit\n484a592 HEAD@{2}: commit: added repo.rb")])]),t._v(" "),e("p",[t._v("这里可以看到我们已经检出的两次提交，然而并没有足够多的信息。\n为了使显示的信息更加有用，我们可以执行 "),e("code",{staticClass:"literal"},[t._v("git log -g")]),t._v("，这个命令会以标准日志的格式输出引用日志。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log -g\ncommit 1a410efbd13591db07496601ebc7a059dd55cfe9\nReflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)\nReflog message: updating HEAD\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri May 22 18:22:37 2009 -0700\n\n\t\tthird commit\n\ncommit ab1afef80fac8e34258ff41fc1b867c702daa24b\nReflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>)\nReflog message: updating HEAD\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri May 22 18:15:24 2009 -0700\n\n       modified repo.rb a bit")])]),t._v(" "),e("p",[t._v("看起来下面的那个就是你丢失的提交，你可以通过创建一个新的分支指向这个提交来恢复它。\n例如，你可以创建一个名为 "),e("code",{staticClass:"literal"},[t._v("recover-branch")]),t._v(" 的分支指向这个提交（ab1afef）：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git branch recover-branch ab1afef\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --pretty=oneline recover-branch\nab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit\n484a59275031909e19aadb7c92262719cfcdf19a added repo.rb\n1a410efbd13591db07496601ebc7a059dd55cfe9 third commit\ncac0cab538b970a37ea1e769cbbde608743bc96d second commit\nfdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit")])]),t._v(" "),e("p",[t._v("不错，现在有一个名为 "),e("code",{staticClass:"literal"},[t._v("recover-branch")]),t._v(" 的分支是你的 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支曾经指向的地方，\n再一次使得前两次提交可到达了。接下来，假设你丢失的提交因为某些原因不在引用日志中，\n那么我们可以通过移除 "),e("code",{staticClass:"literal"},[t._v("recover-branch")]),t._v(" 分支并删除引用日志来模拟这种情况。\n现在前两次提交又不被任何分支指向了：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git branch -D recover-branch\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" rm -Rf .git/logs/")])]),t._v(" "),e("p",[t._v("由于引用日志数据存放在 "),e("code",{staticClass:"literal"},[t._v(".git/logs/")]),t._v(" 目录中，现在你已经没有引用日志了。\n这时该如何恢复那次提交？\n一种方式是使用 "),e("code",{staticClass:"literal"},[t._v("git fsck")]),t._v(" 实用工具，将会检查数据库的完整性。\n如果使用一个 "),e("code",{staticClass:"literal"},[t._v("--full")]),t._v(" 选项运行它，它会向你显示出所有没有被其他对象指向的对象：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fsck --full\nChecking object directories: 100% (256/256), done.\nChecking objects: 100% (18/18), done.\ndangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4\ndangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b\ndangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9\ndangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293")])]),t._v(" "),e("p",[t._v("在这个例子中，你可以在 “dangling commit” 后看到你丢失的提交。\n现在你可以用和之前相同的方法恢复这个提交，也就是添加一个指向这个提交的分支。")]),t._v(" "),e("h2",{attrs:{id:"移除对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移除对象"}},[t._v("#")]),t._v(" 移除对象")]),t._v(" "),e("p",[t._v("Git 有很多很棒的功能，但是其中一个特性会导致问题，"),e("code",{staticClass:"literal"},[t._v("git clone")]),t._v(" 会下载整个项目的历史，包括每一个文件的每一个版本。\n如果所有的东西都是源代码那么这很好，因为 Git 被高度优化来有效地存储这种数据。\n然而，如果某个人在之前向项目添加了一个大小特别大的文件，即使你将这个文件从项目中移除了，每次克隆还是都要强制的下载这个大文件。\n之所以会产生这个问题，是因为这个文件在历史中是存在的，它会永远在那里。")]),t._v(" "),e("p",[t._v("当你迁移 Subversion 或 Perforce 仓库到 Git 的时候，这会是一个严重的问题。\n因为这些版本控制系统并不下载所有的历史文件，所以这种文件所带来的问题比较少。\n如果你从其他的版本控制系统迁移到 Git 时发现仓库比预期的大得多，那么你就需要找到并移除这些大文件。")]),t._v(" "),e("p",[e("strong",[t._v("警告：这个操作对提交历史的修改是破坏性的。")]),t._v("\n它会从你必须修改或移除一个大文件引用最早的树对象开始重写每一次提交。\n如果你在导入仓库后，在任何人开始基于这些提交工作前执行这个操作，那么将不会有任何问题——否则，\n你必须通知所有的贡献者他们需要将他们的成果变基到你的新提交上。")]),t._v(" "),e("p",[t._v("为了演示，我们将添加一个大文件到测试仓库中，并在下一次提交中删除它，现在我们需要找到它，并将它从仓库中永久删除。\n首先，添加一个大文件到仓库中：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add git.tgz\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -m "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'add git tarball'")]),t._v("\n[master 7b30847] add git tarball\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 git.tgz")])]),t._v(" "),e("p",[t._v("哎呀——其实这个项目并不需要这个巨大的压缩文件。\n现在我们将它移除：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rm git.tgz\nrm 'git.tgz'\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -m "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'oops - removed large tarball'")]),t._v("\n[master dadf725] oops - removed large tarball\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 git.tgz")])]),t._v(" "),e("p",[t._v("现在，我们执行 "),e("code",{staticClass:"literal"},[t._v("gc")]),t._v(" 来查看数据库占用了多少空间：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git gc\nCounting objects: 17, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (13/13), done.\nWriting objects: 100% (17/17), done.\nTotal 17 (delta 1), reused 10 (delta 0)")])]),t._v(" "),e("p",[t._v("你也可以执行 "),e("code",{staticClass:"literal"},[t._v("count-objects")]),t._v(" 命令来快速的查看占用空间大小：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git count-objects -v\ncount: 7\nsize: 32\nin-pack: 17\npacks: 1\nsize-pack: 4868\nprune-packable: 0\ngarbage: 0\nsize-garbage: 0")])]),t._v(" "),e("p",[e("code",{staticClass:"literal"},[t._v("size-pack")]),t._v(" 的数值指的是你的包文件以 KB 为单位计算的大小，所以你大约占用了 5MB 的空间。\n在最后一次提交前，使用了不到 2KB ——显然，从之前的提交中移除文件并不能从历史中移除它。\n每一次有人克隆这个仓库时，他们将必须克隆所有的 5MB 来获得这个微型项目，只因为你意外地添加了一个大文件。\n现在来让我们彻底的移除这个文件。")]),t._v(" "),e("p",[t._v("首先你必须找到它。\n在本例中，你已经知道是哪个文件了。\n但是假设你不知道；该如何找出哪个文件或哪些文件占用了如此多的空间？\n如果你执行 "),e("code",{staticClass:"literal"},[t._v("git gc")]),t._v(" 命令，所有的对象将被放入一个包文件中，你可以通过运行 "),e("code",{staticClass:"literal"},[t._v("git verify-pack")]),t._v(" 命令，\n然后对输出内容的第三列（即文件大小）进行排序，从而找出这个大文件。\n你也可以将这个命令的执行结果通过管道传送给 "),e("code",{staticClass:"literal"},[t._v("tail")]),t._v(" 命令，因为你只需要找到列在最后的几个大对象。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git verify-pack -v .git/objects/pack/pack-29…69.idx "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n  | sort -k 3 -n "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n  | tail -3\ndadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12\n033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   22044 5792 4977696\n82c99a3e86bb1267b236a4b6eff7868d97489af1 blob   4975916 4976258 1438")])]),t._v(" "),e("p",[t._v("你可以看到这个大对象出现在返回结果的最底部：占用 5MB 空间。\n为了找出具体是哪个文件，可以使用 "),e("code",{staticClass:"literal"},[t._v("rev-list")]),t._v(" 命令，我们在 "),e("a",{staticClass:"xref",attrs:{id:"xref--ch08-customizing-git--_enforcing_commit_message_format",href:"/chapter-8/4.html#指定特殊的提交信息格式"}},[t._v("指定特殊的提交信息格式")]),t._v(" 中曾提到过。\n如果你传递 "),e("code",{staticClass:"literal"},[t._v("--objects")]),t._v(" 参数给 "),e("code",{staticClass:"literal"},[t._v("rev-list")]),t._v(" 命令，它就会列出所有提交的 SHA-1、数据对象的 SHA-1 和与它们相关联的文件路径。\n可以使用以下命令来找出你的数据对象的名字：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rev-list --objects --all | grep 82c99a3\n82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz")])]),t._v(" "),e("p",[t._v("现在，你只需要从过去所有的树中移除这个文件。\n使用以下命令可以轻松地查看哪些提交对这个文件产生改动：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --oneline --branches -- git.tgz\ndadf725 oops - removed large tarball\n7b30847 add git tarball")])]),t._v(" "),e("p",[t._v("现在，你必须重写 "),e("code",{staticClass:"literal"},[t._v("7b30847")]),t._v(" 提交之后的所有提交来从 Git 历史中完全移除这个文件。\n为了执行这个操作，我们要使用 "),e("code",{staticClass:"literal"},[t._v("filter-branch")]),t._v(" 命令，这个命令在 "),e("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_rewriting_history",href:"/chapter-7/6.html#重写历史"}},[t._v("重写历史")]),t._v(" 中也使用过：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git filter-branch --index-filter "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n  "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'git rm --ignore-unmatch --cached git.tgz'")]),t._v(" -- 7b30847^..\nRewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz'\nRewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2)\nRef 'refs/heads/master' was rewritten")])]),t._v(" "),e("p",[e("code",{staticClass:"literal"},[t._v("--index-filter")]),t._v(" 选项类似于在 "),e("a",{staticClass:"xref",attrs:{href:"/chapter-7/6.html#重写历史"}},[t._v("重写历史")]),t._v(" 中提到的的 "),e("code",{staticClass:"literal"},[t._v("--tree-filter")]),t._v(" 选项，\n不过这个选项并不会让命令将修改在硬盘上检出的文件，而只是修改在暂存区或索引中的文件。")]),t._v(" "),e("p",[t._v("你必须使用 "),e("code",{staticClass:"literal"},[t._v("git rm --cached")]),t._v(" 命令来移除文件，而不是通过类似 "),e("code",{staticClass:"literal"},[t._v("rm file")]),t._v(" 的命令——因为你需要从索引中移除它，而不是磁盘中。\n还有一个原因是速度—— Git 在运行过滤器时，并不会检出每个修订版本到磁盘中，所以这个过程会非常快。\n如果愿意的话，你也可以通过 "),e("code",{staticClass:"literal"},[t._v("--tree-filter")]),t._v(" 选项来完成同样的任务。\n"),e("code",{staticClass:"literal"},[t._v("git rm")]),t._v(" 命令的 "),e("code",{staticClass:"literal"},[t._v("--ignore-unmatch")]),t._v(" 选项告诉命令：如果尝试删除的模式不存在时，不提示错误。\n最后，使用 "),e("code",{staticClass:"literal"},[t._v("filter-branch")]),t._v(" 选项来重写自 "),e("code",{staticClass:"literal"},[t._v("7b30847")]),t._v(" 提交以来的历史，也就是这个问题产生的地方。\n否则，这个命令会从最旧的提交开始，这将会花费许多不必要的时间。")]),t._v(" "),e("p",[t._v("你的历史中将不再包含对那个文件的引用。\n不过，你的引用日志和你在 "),e("code",{staticClass:"literal"},[t._v(".git/refs/original")]),t._v(" 通过 "),e("code",{staticClass:"literal"},[t._v("filter-branch")]),t._v("\n选项添加的新引用中还存有对这个文件的引用，所以你必须移除它们然后重新打包数据库。\n在重新打包前需要移除任何包含指向那些旧提交的指针的文件：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" rm -Rf .git/refs/original\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" rm -Rf .git/logs/\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git gc\nCounting objects: 15, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (15/15), done.\nTotal 15 (delta 1), reused 12 (delta 0)")])]),t._v(" "),e("p",[t._v("让我们看看你省了多少空间。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git count-objects -v\ncount: 11\nsize: 4904\nin-pack: 15\npacks: 1\nsize-pack: 8\nprune-packable: 0\ngarbage: 0\nsize-garbage: 0")])]),t._v(" "),e("p",[t._v("打包的仓库大小下降到了 8K，比 5MB 好很多。\n可以从 size 的值看出，这个大文件还在你的松散对象中，并没有消失；但是它不会在推送或接下来的克隆中出现，这才是最重要的。\n如果真的想要删除它，可以通过有 "),e("code",{staticClass:"literal"},[t._v("--expire")]),t._v(" 选项的 "),e("code",{staticClass:"literal"},[t._v("git prune")]),t._v(" 命令来完全地移除那个对象：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git prune --expire now\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git count-objects -v\ncount: 0\nsize: 0\nin-pack: 15\npacks: 1\nsize-pack: 8\nprune-packable: 0\ngarbage: 0\nsize-garbage: 0")])])])}),[],!1,null,null,null);a.default=i.exports}}]);