(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{512:function(t,s,a){"use strict";a.r(s);var e=a(28),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-守护进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-守护进程"}},[t._v("#")]),t._v(" Git 守护进程")]),t._v(" "),a("p",[t._v("\n接下来我们将通过 “Git” 协议建立一个基于守护进程的仓库。\n对于快速且无需授权的 Git 数据访问，这是一个理想之选。\n请注意，因为其不包含授权服务，任何通过该协议管理的内容将在其网络上公开。")]),t._v(" "),a("p",[t._v("如果运行在防火墙之外的服务器上，它应该只对那些公开的只读项目服务。\n如果运行在防火墙之内的服务器上，它可用于支撑大量参与人员或自动系统\n（用于持续集成或编译的主机）只读访问的项目，这样可以省去逐一配置 SSH 公钥的麻烦。")]),t._v(" "),a("p",[t._v("无论何时，该 Git 协议都是相对容易设定的。\n通常，你只需要以守护进程的形式运行该命令：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git daemon --reuseaddr --base-path=/srv/git/ /srv/git/")])]),t._v(" "),a("p",[a("code",{staticClass:"literal"},[t._v("--reuseaddr")]),t._v(" 选项允许服务器在无需等待旧连接超时的情况下重启，而\n"),a("code",{staticClass:"literal"},[t._v("--base-path")]),t._v(" 选项允许用户在未完全指定路径的条件下克隆项目，\n结尾的路径将告诉 Git 守护进程从何处寻找仓库来导出。\n如果有防火墙正在运行，你需要开放端口 9418 的通信权限。")]),t._v(" "),a("p",[t._v("你可以通过许多方式将该进程以守护进程的方式运行，这主要取决于你所使用的操作系统。")]),t._v(" "),a("p",[t._v("由于在现代的 Linux 发行版中，"),a("code",{staticClass:"literal"},[t._v("systemd")]),t._v(" 是最常见的初始化系统，因此你可以用它来达到此目的。\n只要在 "),a("code",{staticClass:"literal"},[t._v("/etc/systemd/system/git-daemon.service")]),t._v(" 中放一个文件即可，其内容如下：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[t._v("[Unit]\nDescription=Start Git Daemon\n\n[Service]\nExecStart=/usr/bin/git daemon --reuseaddr --base-path=/srv/git/ /srv/git/\n\nRestart=always\nRestartSec=500ms\n\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=git-daemon\n\nUser=git\nGroup=git\n\n[Install]\nWantedBy=multi-user.target")])]),t._v(" "),a("p",[t._v("你可能会注意这里以 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 启动的 Git 驻留程序同时使用了 Group 和 User 权限。\n按需修改它并确保提供的用户在此系统上。此外，请确保 Git 二进制文件位于\n"),a("code",{staticClass:"literal"},[t._v("/usr/bin/git")]),t._v("，必要时可修改此路径。")]),t._v(" "),a("p",[t._v("最后，你需要运行 "),a("code",{staticClass:"literal"},[t._v("systemctl enable git-daemon")]),t._v(" 以让它在系统启动时自动运行，\n这样也能让它通过 "),a("code",{staticClass:"literal"},[t._v("systemctl start git-daemon")]),t._v(" 启动，通过 "),a("code",{staticClass:"literal"},[t._v("systemctl stop git-daemon")]),t._v(" 停止。")]),t._v(" "),a("p",[t._v("在其他系统中，你可以使用 "),a("code",{staticClass:"literal"},[t._v("sysvinit")]),t._v(" 系统中的 "),a("code",{staticClass:"literal"},[t._v("xinetd")]),t._v(" 脚本，或者另外的方式来实现——只要你能够将其命令守护进程化并实现监控。")]),t._v(" "),a("p",[t._v("接下来，你需要告诉 Git 哪些仓库允许基于服务器的无授权访问。\n你可以在每个仓库下创建一个名为 "),a("code",{staticClass:"literal"},[t._v("git-daemon-export-ok")]),t._v(" 的文件来实现。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /path/to/project.git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" touch git-daemon-export-ok")])]),t._v(" "),a("p",[t._v("该文件将允许 Git 提供无需授权的项目访问服务。")])])}),[],!1,null,null,null);s.default=i.exports}}]);