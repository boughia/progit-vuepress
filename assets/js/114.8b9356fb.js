(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{551:function(t,e,s){"use strict";s.r(e);var a=s(28),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"使用强制策略的一个例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用强制策略的一个例子"}},[t._v("#")]),t._v(" 使用强制策略的一个例子")]),t._v(" "),s("p",[t._v("\n在本节中，你将应用前面学到的知识建立这样一个 Git 工作流程：检查提交信息的格式，并且指定只能由特定用户修改项目中特定的子目录。\n你将编写一个客户端脚本来提示开发人员他们的推送是否会被拒绝，以及一个服务器端脚本来实际执行这些策略。")]),t._v(" "),s("p",[t._v("我们待会展示的脚本是用 Ruby 写的，部分是由于我习惯用它写脚本，另外也因为 Ruby 简单易懂，即便你没写过它也能看明白。\n不过任何其他语言也一样适用。所有 Git 自带的示例钩子脚本都是用 Perl 或 Bash 写的，所以你能从它们中找到相当多的这两种语言的钩子示例。")]),t._v(" "),s("h2",{attrs:{id:"服务器端钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器端钩子"}},[t._v("#")]),t._v(" 服务器端钩子")]),t._v(" "),s("p",[t._v("所有服务器端的工作都将在你的 "),s("code",{staticClass:"literal"},[t._v("hooks")]),t._v(" 目录下的 "),s("code",{staticClass:"literal"},[t._v("update")]),t._v(" 脚本中完成。\n"),s("code",{staticClass:"literal"},[t._v("update")]),t._v(" 脚本会为每一个提交的分支各运行一次，它接受三个参数：")]),t._v(" "),s("div",{staticClass:"itemized-list"},[s("ul",[s("li",[s("span",{staticClass:"principal"},[t._v("被推送的引用的名字")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("推送前分支的修订版本（revision）")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("用户准备推送的修订版本（revision）")])])])]),t._v(" "),s("p",[t._v("如果推送是通过 SSH 进行的，还可以获知进行此次推送的用户的信息。\n如果你允许所有操作都通过公匙授权的单一帐号（比如“git”）进行，就有必要通过一个 shell 包装脚本依据公匙来判断用户的身份，并且相应地设定环境变量来表示该用户的身份。\n下面就假设 "),s("code",{staticClass:"literal"},[t._v("$USER")]),t._v(" 环境变量里存储了当前连接的用户的身份，你的 update 脚本首先搜集一切需要的信息：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("#!/usr/bin/env ruby")]),t._v("\n\n$refname = ARGV[0]\n$oldrev  = ARGV[1]\n$newrev  = ARGV[2]\n$user    = ENV["),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'USER'")]),t._v("]\n\nputs "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"Enforcing Policies..."')]),t._v("\nputs "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"(')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$refname"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v(") (")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$oldrev[0,6]"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v(") (")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$newrev[0,6]"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v(')"')])])]),t._v(" "),s("p",[t._v("是的，我们这里用的都是全局变量。\n请勿在此吐槽——这样做只是为了方便展示而已。")]),t._v(" "),s("h3",{attrs:{id:"指定特殊的提交信息格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定特殊的提交信息格式"}},[t._v("#")]),t._v(" 指定特殊的提交信息格式")]),t._v(" "),s("p",[t._v("你的第一项任务是要求每一条提交信息都必须遵循某种特殊的格式。\n作为目标，假定每一条信息必须包含一条形似“ref: 1234”的字符串，因为你想把每一次提交对应到问题追踪系统（ticketing system）中的某个事项。\n你要逐一检查每一条推送上来的提交内容，看看提交信息是否包含这么一个字符串，然后，如果某个提交里不包含这个字符串，以非零返回值退出从而拒绝此次推送。")]),t._v(" "),s("p",[t._v("把 "),s("code",{staticClass:"literal"},[t._v("$newrev")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("$oldrev")]),t._v(" 变量的值传给一个叫做 "),s("code",{staticClass:"literal"},[t._v("git rev-list")]),t._v(" 的 Git 底层命令，\n你可以获取所有提交的 SHA-1 值列表。\n"),s("code",{staticClass:"literal"},[t._v("git rev-list")]),t._v(" 基本类似 "),s("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 命令，但它默认只输出 SHA-1 值而已，没有其他信息。\n所以要获取由一次提交到另一次提交之间的所有 SHA-1 值，可以像这样运行：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rev-list 538c33..d14fc7\nd14fc7c847ab946ec39590d87783c69b031bdfb7\n9f585da4401b0a3999e84113824d15245c13f0be\n234071a1be950e2a8d078e6141f5cd20c1e61ad3\ndfa04c9ef3d5197182f13fb5b9b1fb7717d2222a\n17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475")])]),t._v(" "),s("p",[t._v("你可以截取这些输出内容，循环遍历其中每一个 SHA-1 值，找出与之对应的提交信息，\n然后用正则表达式来测试该信息包含的内容。")]),t._v(" "),s("p",[t._v("下一步要实现从每个提交中提取出提交信息。\n使用另一个叫做 "),s("code",{staticClass:"literal"},[t._v("git cat-file")]),t._v(" 的底层命令来获得原始的提交数据。\n我们将在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch10-git-internals",href:"/chapter-10/index.html"}},[t._v("Git 内部原理")]),t._v(" 了解到这些底层命令的细节；\n现在暂时先看一下这条命令的输出：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git cat-file commit ca82a6\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nparent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nauthor Scott Chacon <schacon@gmail.com> 1205815931 -0700\ncommitter Scott Chacon <schacon@gmail.com> 1240030591 -0700\n\nchanged the version number")])]),t._v(" "),s("p",[t._v("通过 SHA-1 值获得提交中的提交信息的一个简单办法是找到提交的第一个空行，然后取从它往后的所有内容。\n可以使用 Unix 系统的 "),s("code",{staticClass:"literal"},[t._v("sed")]),t._v(" 命令来实现该效果：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git cat-file commit ca82a6 | sed "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'1,/^$/d'")]),t._v("\nchanged the version number")])]),t._v(" "),s("p",[t._v("你可以用这条咒语从每一个待推送的提交里提取提交信息，然后在提取的内容不符合要求时退出。\n为了退出脚本和拒绝此次推送，返回非零值。\n整个脚本大致如下：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[t._v("$regex = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("/\\[ref: (\\d+)\\]/")]),t._v("\n\n"),s("span",{staticStyle:{"font-style":"italic"}},[t._v("# 指定自定义的提交信息格式")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" check_message_format\n  missed_revs = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git rev-list ")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$oldrev"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("..")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$newrev"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`")]),t._v(".split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(")\n  missed_revs.each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |rev|\n    message = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git cat-file commit ")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("rev"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v(" | sed '1,/^$/d'`")]),t._v("\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !$regex.match(message)\n      puts "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"[POLICY] Your message is not formatted correctly"')]),t._v("\n      exit 1\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\ncheck_message_format")])]),t._v(" "),s("p",[t._v("把这一段放在 "),s("code",{staticClass:"literal"},[t._v("update")]),t._v(" 脚本里，所有包含不符合指定规则的提交都会遭到拒绝。")]),t._v(" "),s("h3",{attrs:{id:"指定基于用户的访问权限控制列表（acl）系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定基于用户的访问权限控制列表（acl）系统"}},[t._v("#")]),t._v(" 指定基于用户的访问权限控制列表（ACL）系统")]),t._v(" "),s("p",[t._v("假设你需要添加一个使用访问权限控制列表的机制，来指定哪些用户对项目的哪些部分有推送权限。\n某些用户具有全部的访问权，其他人只对某些子目录或者特定的文件具有推送权限。\n为了实现这一点，你要把相关的规则写入位于服务器原始 Git 仓库的 acl 文件中。\n你还需要让 "),s("code",{staticClass:"literal"},[t._v("update")]),t._v(" 钩子检阅这些规则，审视推送的提交内容中被修改的所有文件，然后决定执行推送的用户是否对所有这些文件都有权限。")]),t._v(" "),s("p",[t._v("先从写一个 ACL 文件开始吧。\n这里使用的格式和 CVS 的 ACL 机制十分类似：它由若干行构成，第一项内容是 "),s("code",{staticClass:"literal"},[t._v("avail")]),t._v(" 或者 "),s("code",{staticClass:"literal"},[t._v("unavail")]),t._v("，接着是逗号分隔的适用该规则的用户列表，最后一项是适用该规则的路径（该项空缺表示没有路径限制）。\n各项由管道符 "),s("code",{staticClass:"literal"},[t._v("|")]),t._v(" 隔开。")]),t._v(" "),s("p",[t._v("在本例中，你会有几个管理员，一些对 "),s("code",{staticClass:"literal"},[t._v("doc")]),t._v(" 目录具有权限的文档作者，以及一位仅对 "),s("code",{staticClass:"literal"},[t._v("lib")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("tests")]),t._v(" 目录具有权限的开发人员，相应的 ACL 文件如下：")]),t._v(" "),s("pre",{staticClass:"source language-"},[s("code",[t._v("avail|nickh,pjhyett,defunkt,tpw\navail|usinclair,cdickens,ebronte|doc\navail|schacon|lib\navail|schacon|tests")])]),t._v(" "),s("p",[t._v("首先把这些数据读入你要用到的数据结构里。\n在本例中，为保持简洁，我们暂时只实现 "),s("code",{staticClass:"literal"},[t._v("avail")]),t._v(" 的规则。\n下面这个方法生成一个关联数组，它的键是用户名，值是一个由该用户有写权限的所有目录组成的数组：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" get_acl_access_data(acl_file)\n  "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("# 读取 ACL 数据")]),t._v("\n  acl_file = File.read(acl_file).split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(").reject { |line| line == "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("''")]),t._v(" }\n  access = {}\n  acl_file.each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |line|\n    avail, users, path = line.split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'|'")]),t._v(")\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("next")]),t._v(" "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("unless")]),t._v(" avail == "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'avail'")]),t._v("\n    users.split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v("','")]),t._v(").each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |user|\n      access[user] ||= []\n      access[user] << path\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  access\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),s("p",[t._v("对于之前给出的 ACL 规则文件，这个 "),s("code",{staticClass:"literal"},[t._v("get_acl_access_data")]),t._v(" 方法返回的数据结构如下：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[t._v("{"),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"defunkt"')]),t._v("=>["),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("nil")]),t._v("],\n "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"tpw"')]),t._v("=>["),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("nil")]),t._v("],\n "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"nickh"')]),t._v("=>["),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("nil")]),t._v("],\n "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"pjhyett"')]),t._v("=>["),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("nil")]),t._v("],\n "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"schacon"')]),t._v("=>["),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"lib"')]),t._v(", "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"tests"')]),t._v("],\n "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"cdickens"')]),t._v("=>["),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"doc"')]),t._v("],\n "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"usinclair"')]),t._v("=>["),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"doc"')]),t._v("],\n "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"ebronte"')]),t._v("=>["),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"doc"')]),t._v("]}")])]),t._v(" "),s("p",[t._v("既然拿到了用户权限的数据，接下来你需要找出提交都修改了哪些路径，从而才能保证推送者对所有这些路径都有权限。")]),t._v(" "),s("p",[t._v("使用 "),s("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 的 "),s("code",{staticClass:"literal"},[t._v("--name-only")]),t._v(" 选项（在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch02-git-basics-chapter",href:"/chapter-2/index.html"}},[t._v("Git 基础")]),t._v("\n一章中里简单地提过），我们可以轻而易举的找出一次提交里修改的文件：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log -1 --name-only --pretty=format:"),s("span",{staticStyle:{"font-style":"italic"}},[t._v("''")]),t._v(" 9f585d\n\nREADME\nlib/test.rb")])]),t._v(" "),s("p",[t._v("使用 "),s("code",{staticClass:"literal"},[t._v("get_acl_access_data")]),t._v(" 返回的 ACL 结构来一一核对每次提交修改的文件列表，就能找出该用户是否有权限推送所有的提交内容：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("# 仅允许特定用户修改项目中的特定子目录")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" check_directory_perms\n  access = get_acl_access_data("),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'acl'")]),t._v(")\n\n  "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("# 检查是否有人在向他没有权限的地方推送内容")]),t._v("\n  new_commits = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git rev-list ")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$oldrev"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("..")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$newrev"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`")]),t._v(".split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(")\n  new_commits.each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |rev|\n    files_modified = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git log -1 --name-only --pretty=format:'' ")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("rev"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`")]),t._v(".split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(")\n    files_modified.each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |path|\n      "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("next")]),t._v(" "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" path.size == 0\n      has_file_access = "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("false")]),t._v("\n      access[$user].each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |access_path|\n        "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !access_path  "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("# 用户拥有完全访问权限")]),t._v("\n           || (path.start_with? access_path) "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("# 或者对此路径有访问权限")]),t._v("\n          has_file_access = "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("true")]),t._v("\n        "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n      "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n      "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !has_file_access\n        puts "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"[POLICY] You do not have access to push to ')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("path"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n        exit 1\n      "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\ncheck_directory_perms")])]),t._v(" "),s("p",[t._v("通过 "),s("code",{staticClass:"literal"},[t._v("git rev-list")]),t._v(" 获取推送到服务器的所有提交。\n接着，对于每一个提交，找出它修改的文件，然后确保推送者具有这些文件的推送权限。")]),t._v(" "),s("p",[t._v("现在你的用户没法推送带有不正确的提交信息的内容，也不能在准许他们访问范围之外的位置做出修改。")]),t._v(" "),s("h3",{attrs:{id:"测试一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试一下"}},[t._v("#")]),t._v(" 测试一下")]),t._v(" "),s("p",[t._v("如果已经把上面的代码放到 "),s("code",{staticClass:"literal"},[t._v(".git/hooks/update")]),t._v(" 文件里了，运行 "),s("code",{staticClass:"literal"},[t._v("chmod u+x .git/hooks/update")]),t._v("，然后尝试推送一个不符合格式的提交，你会得到以下的提示：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push -f origin master\nCounting objects: 5, done.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 323 bytes, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nEnforcing Policies...\n(refs/heads/master) (8338c5) (c5b616)\n[POLICY] Your message is not formatted correctly\nerror: hooks/update exited with error code 1\nerror: hook declined to update refs/heads/master\nTo git@gitserver:project.git\n ! [remote rejected] master -> master (hook declined)\nerror: failed to push some refs to 'git@gitserver:project.git'")])]),t._v(" "),s("p",[t._v("这里有几个有趣的信息。\n首先，我们可以看到钩子运行的起点。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[t._v("Enforcing Policies...\n(refs/heads/master) (fb8c72) (c56860)")])]),t._v(" "),s("p",[t._v("注意这是从 update 脚本开头输出到标准输出的。\n所有从脚本输出到标准输出的内容都会转发给客户端。")]),t._v(" "),s("p",[t._v("下一个值得注意的部分是错误信息。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[t._v("[POLICY] Your message is not formatted correctly\nerror: hooks/update exited with error code 1\nerror: hook declined to update refs/heads/master")])]),t._v(" "),s("p",[t._v("第一行是我们的脚本输出的，剩下两行是 Git 在告诉我们 update 脚本退出时返回了非零值因而推送遭到了拒绝。\n最后一点：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[t._v("To git@gitserver:project.git\n ! [remote rejected] master -> master (hook declined)\nerror: failed to push some refs to 'git@gitserver:project.git'")])]),t._v(" "),s("p",[t._v("你会看到每个被你的钩子拒之门外的引用都收到了一个 remote rejected 信息，它告诉你正是钩子无法成功运行导致了推送的拒绝。")]),t._v(" "),s("p",[t._v("又或者某人想修改一个自己不具备权限的文件然后推送了一个包含它的提交，他将看到类似的提示。\n比如，一个文档作者尝试推送一个修改到 "),s("code",{staticClass:"literal"},[t._v("lib")]),t._v(" 目录的提交，他会看到")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[t._v("[POLICY] You do not have access to push to lib/test.rb")])]),t._v(" "),s("p",[t._v("从今以后，只要 "),s("code",{staticClass:"literal"},[t._v("update")]),t._v(" 脚本存在并且可执行，我们的版本库中永远都不会包含不符合格式的提交信息，并且用户都会待在沙箱里面。")]),t._v(" "),s("h2",{attrs:{id:"客户端钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端钩子"}},[t._v("#")]),t._v(" 客户端钩子")]),t._v(" "),s("p",[t._v("这种方法的缺点在于，用户推送的提交遭到拒绝后无法避免的抱怨。\n辛辛苦苦写成的代码在最后时刻惨遭拒绝是十分让人沮丧且具有迷惑性的；更可怜的是他们不得不修改提交历史来解决问题，这个方法并不能让每一个人满意。")]),t._v(" "),s("p",[t._v("逃离这种两难境地的法宝是给用户一些客户端的钩子，在他们犯错的时候给以警告。\n然后呢，用户们就能趁问题尚未变得更难修复，在提交前消除这个隐患。\n由于钩子本身不跟随克隆的项目副本分发，所以你必须通过其他途径把这些钩子分发到用户的 "),s("code",{staticClass:"literal"},[t._v(".git/hooks")]),t._v(" 目录并设为可执行文件。\n虽然你可以在相同或单独的项目里加入并分发这些钩子，但是 Git 不会自动替你设置它。")]),t._v(" "),s("p",[t._v("首先，你应该在每次提交前核查你的提交信息，这样才能确保服务器不会因为不合条件的提交信息而拒绝你的更改。\n为了达到这个目的，你可以增加 "),s("code",{staticClass:"literal"},[t._v("commit-msg")]),t._v(" 钩子。\n如果你使用该钩子来读取作为第一个参数传递的提交信息，然后与规定的格式作比较，你就可以使 Git 在提交信息格式不对的情况下拒绝提交。")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("#!/usr/bin/env ruby")]),t._v("\nmessage_file = ARGV[0]\nmessage = File.read(message_file)\n\n$regex = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("/\\[ref: (\\d+)\\]/")]),t._v("\n\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !$regex.match(message)\n  puts "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"[POLICY] Your message is not formatted correctly"')]),t._v("\n  exit 1\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),s("p",[t._v("如果这个脚本位于正确的位置（ "),s("code",{staticClass:"literal"},[t._v(".git/hooks/commit-msg")]),t._v(" ）并且是可执行的，你提交信息的格式又是不正确的，你会看到：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'test'")]),t._v("\n[POLICY] Your message is not formatted correctly")])]),t._v(" "),s("p",[t._v("在这个示例中，提交没有成功。\n然而如果你的提交注释信息是符合要求的，Git 会允许你提交：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'test [ref: 132]'")]),t._v("\n[master e05c914] test [ref: 132]\n 1 file changed, 1 insertions(+), 0 deletions(-)")])]),t._v(" "),s("p",[t._v("接下来我们要保证没有修改到 ACL 允许范围之外的文件。\n假如你的 "),s("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 目录下有前面使用过的那份 ACL 文件，那么以下的 "),s("code",{staticClass:"literal"},[t._v("pre-commit")]),t._v(" 脚本将把里面的规定执行起来：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("#!/usr/bin/env ruby")]),t._v("\n\n$user    = ENV["),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'USER'")]),t._v("]\n\n"),s("span",{staticStyle:{"font-style":"italic"}},[t._v("# [ 插入上文中的 get_acl_access_data 方法 ]")]),t._v("\n\n"),s("span",{staticStyle:{"font-style":"italic"}},[t._v("# 仅允许特定用户修改项目中的特定子目录")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" check_directory_perms\n  access = get_acl_access_data("),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'.git/acl'")]),t._v(")\n\n  files_modified = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git diff-index --cached --name-only HEAD`")]),t._v(".split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(")\n  files_modified.each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |path|\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("next")]),t._v(" "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" path.size == 0\n    has_file_access = "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("false")]),t._v("\n    access[$user].each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |access_path|\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !access_path || (path.index(access_path) == 0)\n      has_file_access = "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("true")]),t._v("\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !has_file_access\n      puts "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"[POLICY] You do not have access to push to ')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("path"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n      exit 1\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\ncheck_directory_perms")])]),t._v(" "),s("p",[t._v("这和服务器端的脚本几乎一样，除了两个重要区别。\n第一，ACL 文件的位置不同，因为这个脚本在当前工作目录运行，而非 "),s("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 目录。\nACL 文件的路径必须从")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[t._v("access = get_acl_access_data("),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'acl'")]),t._v(")")])]),t._v(" "),s("p",[t._v("修改成：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[t._v("access = get_acl_access_data("),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'.git/acl'")]),t._v(")")])]),t._v(" "),s("p",[t._v("另一个重要区别是获取被修改文件列表的方式。\n在服务器端的时候使用了查看提交纪录的方式，可是目前的提交都还没被记录下来呢，所以这个列表只能从暂存区域获取。\n和原来的")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[t._v("files_modified = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git log -1 --name-only --pretty=format:'' ")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("ref"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`")])])]),t._v(" "),s("p",[t._v("不同，现在要用")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[t._v("files_modified = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git diff-index --cached --name-only HEAD`")])])]),t._v(" "),s("p",[t._v("不同的就只有这两个——除此之外，该脚本完全相同。\n有一点要注意的是，它假定在本地运行的用户和推送到远程服务器端的相同。\n如果这二者不一样，则需要手动设置一下 "),s("code",{staticClass:"literal"},[t._v("$user")]),t._v(" 变量。")]),t._v(" "),s("p",[t._v("在这里，我们还可以确保推送内容中不包含非快进（non-fast-forward）的引用。\n出现一个不是快进（fast-forward）的引用有两种情形，要么是在某个已经推送过的提交上作变基，要么是从本地推送一个错误的分支到远程分支上。")]),t._v(" "),s("p",[t._v("假定为了执行这个策略，你已经在服务器上配置好了 "),s("code",{staticClass:"literal"},[t._v("receive.denyDeletes")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("receive.denyNonFastForwards")]),t._v("，因而唯一还需要避免的是在某个已经推送过的提交上作变基。")]),t._v(" "),s("p",[t._v("下面是一个检查这个问题的 "),s("code",{staticClass:"literal"},[t._v("pre-rebase")]),t._v(" 脚本示例。\n它获取所有待重写的提交的列表，然后检查它们是否存在于远程引用中。\n一旦发现其中一个提交是在某个远程引用中可达的（reachable），它就终止此次变基：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("#!/usr/bin/env ruby")]),t._v("\n\nbase_branch = ARGV[0]\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" ARGV[1]\n  topic_branch = ARGV[1]\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("else")]),t._v("\n  topic_branch = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"HEAD"')]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\ntarget_shas = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git rev-list ")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("base_branch"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("..")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("topic_branch"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`")]),t._v(".split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(")\nremote_refs = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git branch -r`")]),t._v(".split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(").map { |r| r.strip }\n\ntarget_shas.each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |sha|\n  remote_refs.each "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |remote_ref|\n    shas_pushed = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git rev-list ^")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("sha"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("^@ refs/remotes/")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("remote_ref"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`")]),t._v("\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" shas_pushed.split("),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\n")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(").include?(sha)\n      puts "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"[POLICY] Commit ')]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("sha"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v(" has already been pushed to ")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("remote_ref"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n      exit 1\n    "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  "),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),s("p",[t._v("此脚本使用了 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_revision_selection",href:"/chapter-7/1.html#选择修订版本"}},[t._v("选择修订版本")]),t._v(" 一章中不曾提到的语法。\n通过运行这个命令可以获得一系列之前推送过的提交：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("`git rev-list ^")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("sha"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("^@ refs/remotes/")]),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("remote_ref"),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),s("span",{staticStyle:{"font-style":"italic"}},[t._v("`")])])]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("SHA^@")]),t._v(" 语法会被解析成该提交的所有父提交。\n该命令会列出在远程分支最新的提交中可达的，却在所有我们尝试推送的提交的\nSHA-1 值的所有父提交中不可达的提交——也就是快进的提交。")]),t._v(" "),s("p",[t._v("这个解决方案主要的问题在于它有可能很慢而且常常没有必要——只要你不用 "),s("code",{staticClass:"literal"},[t._v("-f")]),t._v(" 来强制推送，服务器就会自动给出警告并且拒绝接受推送。\n然而，这是个不错的练习，而且理论上能帮助你避免一次以后可能不得不回头修补的变基。")])])}),[],!1,null,null,null);e.default=i.exports}}]);