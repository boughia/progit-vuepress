(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{429:function(t,e,a){t.exports=a.p+"assets/img/rerere1.5f36a087.png"},430:function(t,e,a){t.exports=a.p+"assets/img/rerere2.b0a34bcc.png"},431:function(t,e,a){t.exports=a.p+"assets/img/rerere3.69e5f9e1.png"},544:function(t,e,a){"use strict";a.r(e);var s=a(28),l=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"rerere"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rerere"}},[t._v("#")]),t._v(" Rerere")]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("git rerere")]),t._v(" 功能是一个隐藏的功能。\n正如它的名字“重用记录的解决方案（reuse recorded resolution）”所示，它允许你让 Git 记住解决一个块冲突的方法，\n这样在下一次看到相同冲突时，Git 可以为你自动地解决它。")]),t._v(" "),s("p",[t._v("有几种情形下这个功能会非常有用。\n在文档中提到的一个例子是想要保证一个长期分支会干净地合并，但是又不想要一串中间的合并提交弄乱你的提交历史。\n将 "),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 功能开启后，你可以试着偶尔合并，解决冲突，然后退出合并。\n如果你持续这样做，那么最终的合并会很容易，因为 "),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 可以为你自动做所有的事情。")]),t._v(" "),s("p",[t._v("可以将同样的策略用在维持一个变基的分支时，这样就不用每次解决同样的变基冲突了。\n或者你将一个分支合并并修复了一堆冲突后想要用变基来替代合并——你可能并不想要再次解决相同的冲突。")]),t._v(" "),s("p",[t._v("另一个 "),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 的应用场景是当你偶尔将一堆正在改进的主题分支合并到一个可测试的头时，就像 Git 项目自身经常做的。\n如果测试失败，你可以倒回合并之前然后在去除导致测试失败的那个主题分支后重做合并，而不用再次重新解决所有的冲突。")]),t._v(" "),s("p",[t._v("要启用 "),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 功能，只需运行以下配置选项即可：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global rerere.enabled true")])]),t._v(" "),s("p",[t._v("你也可以通过在特定的仓库中创建 "),s("code",{staticClass:"literal"},[t._v(".git/rr-cache")]),t._v(" 目录来开启它，但是设置选项更干净并且可以应用到全局。")]),t._v(" "),s("p",[t._v("现在我们看一个简单的例子，类似之前的那个。\n假设有一个名为 "),s("code",{staticClass:"literal"},[t._v("hello.rb")]),t._v(" 的文件如下：")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("#! /usr/bin/env ruby")]),t._v("\n\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" hello\n  puts "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'hello world'")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),s("p",[t._v("在一个分支中修改单词 “hello” 为 “hola”，然后在另一个分支中修改 “world” 为 “mundo”，就像之前一样。")]),t._v(" "),s("figure",{staticClass:"image"},[s("div",{staticClass:"content"},[s("img",{attrs:{src:a(429),alt:"rerere1"}})])]),t._v(" "),s("p",[t._v("当合并两个分支到一起时，我们将会得到一个合并冲突：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge i18n-world\nAuto-merging hello.rb\nCONFLICT (content): Merge conflict in hello.rb\nRecorded preimage for 'hello.rb'\nAutomatic merge failed; fix conflicts and then commit the result.")])]),t._v(" "),s("p",[t._v("你会注意到那个新行 "),s("code",{staticClass:"literal"},[t._v("Recorded preimage for FILE")]),t._v("。\n除此之外它应该看起来就像一个普通的合并冲突。\n在这个时候，"),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 可以告诉我们几件事。\n和往常一样，在这个时候你可以运行 "),s("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 来查看所有冲突的内容：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" On branch master\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" Unmerged paths:\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("   (use "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage)\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("   (use "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"git add <file>..."')]),t._v(" to mark resolution)\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("\tboth modified:      hello.rb\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")])])]),t._v(" "),s("p",[t._v("然而，"),s("code",{staticClass:"literal"},[t._v("git rerere")]),t._v(" 也会通过 "),s("code",{staticClass:"literal"},[t._v("git rerere status")]),t._v(" 告诉你它记录的合并前状态。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rerere status\nhello.rb")])]),t._v(" "),s("p",[t._v("并且 "),s("code",{staticClass:"literal"},[t._v("git rerere diff")]),t._v(" 将会显示解决方案的当前状态——开始解决前与解决后的样子。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rerere diff\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,11 +1,11 @@\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v(" #")]),t._v("! /usr/bin/env ruby\n\n def hello\n-<<<<<<<\n-  puts 'hello mundo'\n-=======\n+<<<<<<< HEAD\n   puts 'hola world'\n->>>>>>>\n+=======\n+  puts 'hello mundo'\n+>>>>>>> i18n-world\n end")])]),t._v(" "),s("p",[t._v("同样（这并不是真的与 "),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 有关系），可以使用 "),s("code",{staticClass:"literal"},[t._v("git ls-files -u")]),t._v(" 来查看冲突文件的之前、左边与右边版本：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git ls-files -u\n100644 39804c942a9c1f2c03dc7c5ebcd7f3e3a6b97519 1\thello.rb\n100644 a440db6e8d1fd76ad438a49025a9ad9ce746f581 2\thello.rb\n100644 54336ba847c3758ab604876419607e9443848474 3\thello.rb")])]),t._v(" "),s("p",[t._v("现在可以通过改为 "),s("code",{staticClass:"literal"},[t._v("puts 'hola mundo'")]),t._v(" 来解决它，可以再次运行 "),s("code",{staticClass:"literal"},[t._v("git rerere diff")]),t._v(" 命令来查看 rerere 将会记住的内容：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rerere diff\n--- a/hello.rb\n+++ b/hello.rb\n@@ -1,11 +1,7 @@\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v(" #")]),t._v("! /usr/bin/env ruby\n\n def hello\n-<<<<<<<\n-  puts 'hello mundo'\n-=======\n-  puts 'hola world'\n->>>>>>>\n+  puts 'hola mundo'\n end")])]),t._v(" "),s("p",[t._v("所以从本质上说，当 Git 看到一个 "),s("code",{staticClass:"literal"},[t._v("hello.rb")]),t._v(" 文件的一个块冲突中有 “hello mundo” 在一边与 “hola world” 在另一边，它会将其解决为 “hola mundo”。")]),t._v(" "),s("p",[t._v("现在我们可以将它标记为已解决并提交它：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add hello.rb\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit\nRecorded resolution for 'hello.rb'.\n[master 68e16e5] Merge branch 'i18n'")])]),t._v(" "),s("p",[t._v('可以看到它 "Recorded resolution for FILE"。')]),t._v(" "),s("figure",{staticClass:"image"},[s("div",{staticClass:"content"},[s("img",{attrs:{src:a(430),alt:"rerere2"}})])]),t._v(" "),s("p",[t._v("现在，让我们撤消那个合并然后将它变基到 "),s("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支顶部来替代它。\n可以通过使用之前在 "),s("a",{staticClass:"xref",attrs:{href:"#_git_reset"}},[t._v("重置揭密")]),t._v(" 看到的 "),s("code",{staticClass:"literal"},[t._v("git reset")]),t._v(" 来回滚分支。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git reset --hard HEAD^\nHEAD is now at ad63f15 i18n the hello")])]),t._v(" "),s("p",[t._v("我们的合并被撤消了。\n现在让我们变基主题分支。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout i18n-world\nSwitched to branch 'i18n-world'\n\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: i18n one word\nUsing index info to reconstruct a base tree...\nFalling back to patching base and 3-way merge...\nAuto-merging hello.rb\nCONFLICT (content): Merge conflict in hello.rb\nResolved 'hello.rb' using previous resolution.\nFailed to merge in the changes.\nPatch failed at 0001 i18n one word")])]),t._v(" "),s("p",[t._v("现在，正像我们期望的一样，得到了相同的合并冲突，但是看一下 "),s("code",{staticClass:"literal"},[t._v("Resolved FILE using previous resolution")]),t._v(" 这行。\n如果我们看这个文件，会发现它已经被解决了，而且在它里面没有合并冲突标记。")]),t._v(" "),s("pre",{staticClass:"source language-ruby"},[s("code",[s("span",{staticStyle:{"font-style":"italic"}},[t._v("#! /usr/bin/env ruby")]),t._v("\n\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" hello\n  puts "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'hola mundo'")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),s("p",[t._v("同样，"),s("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 将会显示出它是如何自动地重新解决的：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff\ndiff --cc hello.rb\nindex a440db6,54336ba..0000000\n--- a/hello.rb\n+++ b/hello.rb\n@@@ -1,7 -1,7 +1,7 @@@\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("  #")]),t._v("! /usr/bin/env ruby\n\n  def hello\n-   puts 'hola world'\n -  puts 'hello mundo'\n++  puts 'hola mundo'\n  end")])]),t._v(" "),s("figure",{staticClass:"image"},[s("div",{staticClass:"content"},[s("img",{attrs:{src:a(431),alt:"rerere3"}})])]),t._v(" "),s("p",[t._v("也可以通过 "),s("code",{staticClass:"literal"},[t._v("git checkout")]),t._v(" 命令重新恢复到冲突时候的文件状态：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout --conflict=merge hello.rb\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat hello.rb\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("! /usr/bin/env ruby\n\ndef hello\n  puts 'hello mundo'\nend")])]),t._v(" "),s("p",[t._v("我们将会在 "),s("a",{staticClass:"xref",attrs:{id:"xref-_advanced_merging",href:"#_advanced_merging"}},[t._v("高级合并")]),t._v(" 中看到这个的一个例子。\n然而现在，让我们通过运行 "),s("code",{staticClass:"literal"},[t._v("git rerere")]),t._v(" 来重新解决它：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rerere\nResolved 'hello.rb' using previous resolution.\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat hello.rb\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("! /usr/bin/env ruby\n\ndef hello\n  puts 'hola mundo'\nend")])]),t._v(" "),s("p",[t._v("我们通过 "),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 缓存的解决方案来自动重新解决了文件冲突。\n现在可以添加并继续变基来完成它。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add hello.rb\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rebase --continue\nApplying: i18n one word")])]),t._v(" "),s("p",[t._v("所以，如果做了很多次重新合并，或者想要一个主题分支始终与你的 "),s("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支保持最新但却不想要一大堆合并，\n或者经常变基，打开 "),s("code",{staticClass:"literal"},[t._v("rerere")]),t._v(" 功能可以帮助你的生活变得更美好。")])])}),[],!1,null,null,null);e.default=l.exports}}]);