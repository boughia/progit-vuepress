(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{532:function(t,e,n){"use strict";n.r(e);var a=n(28),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"子模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子模块"}},[t._v("#")]),t._v(" 子模块")]),t._v(" "),n("p",[t._v("有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。\n也许是第三方库，或者你独立开发的，用于多个父项目的库。\n现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。")]),t._v(" "),n("p",[t._v("我们举一个例子。\n假设你正在开发一个网站然后创建了 Atom 订阅。\n你决定使用一个库，而不是写自己的 Atom 生成代码。\n你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。\n如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。\n如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。")]),t._v(" "),n("p",[t._v("Git 通过子模块来解决这个问题。\n子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。\n它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。")]),t._v(" "),n("h2",{attrs:{id:"开始使用子模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始使用子模块"}},[t._v("#")]),t._v(" 开始使用子模块")]),t._v(" "),n("p",[t._v("我们将要演示如何在一个被分成一个主项目与几个子项目的项目上开发。")]),t._v(" "),n("p",[t._v("我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。\n你可以通过在 "),n("code",{staticClass:"literal"},[t._v("git submodule add")]),t._v(" 命令后面加上想要跟踪的项目的相对或绝对 URL 来添加新的子模块。\n在本例中，我们将会添加一个名为 “DbConnector” 的库。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule add https://github.com/chaconinc/DbConnector\nCloning into 'DbConnector'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.")])]),t._v(" "),n("p",[t._v("默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。\n如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。")]),t._v(" "),n("p",[t._v("如果这时运行 "),n("code",{staticClass:"literal"},[t._v("git status")]),t._v("，你会注意到几件事。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\tnew file:   .gitmodules\n\tnew file:   DbConnector")])]),t._v(" "),n("p",[t._v("首先应当注意到新的 "),n("code",{staticClass:"literal"},[t._v(".gitmodules")]),t._v(" 文件。\n该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：")]),t._v(" "),n("pre",{staticClass:"source language-ini"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v('[submodule "DbConnector"]')]),t._v("\n\tpath = "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("DbConnector")]),t._v("\n"),n("span",{staticStyle:{"font-style":"italic"}},[t._v("\turl = https://github.com/chaconinc/DbConnector")])])]),t._v(" "),n("p",[t._v("如果有多个子模块，该文件中就会有多条记录。\n要重点注意的是，该文件也像 "),n("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件一样受到（通过）版本控制。\n它会和该项目的其他部分一同被拉取推送。\n这就是克隆该项目的人知道去哪获得子模块的原因。")]),t._v(" "),n("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[n("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),n("div",{staticClass:"content"},[n("p",[t._v("由于 .gitmodules 文件中的 URL 是人们首先尝试克隆/拉取的地方，因此请尽可能确保你使用的 URL 大家都能访问。\n例如，若你要使用的推送 URL 与他人的拉取 URL 不同，那么请使用他人能访问到的 URL。\n你也可以根据自己的需要，通过在本地执行 "),n("code",{staticClass:"literal"},[t._v("git config submodule.DbConnector.url <私有URL>")]),t._v(" 来覆盖这个选项的值。\n如果可行的话，一个相对路径会很有帮助。")])])]),t._v(" "),n("p",[t._v("在 "),n("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 输出中列出的另一个是项目文件夹记录。\n如果你运行 "),n("code",{staticClass:"literal"},[t._v("git diff")]),t._v("，会看到类似下面的信息：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff --cached DbConnector\ndiff --git a/DbConnector b/DbConnector\nnew file mode 160000\nindex 0000000..c3f01dc\n--- /dev/null\n+++ b/DbConnector\n@@ -0,0 +1 @@\n+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc")])]),t._v(" "),n("p",[t._v("虽然 "),n("code",{staticClass:"literal"},[t._v("DbConnector")]),t._v(" 是工作目录中的一个子目录，但 Git 还是会将它视作一个子模块。当你不在那个目录中时，Git 并不会跟踪它的内容，\n而是将它看作子模块仓库中的某个具体的提交。")]),t._v(" "),n("p",[t._v("如果你想看到更漂亮的差异输出，可以给 "),n("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 传递 "),n("code",{staticClass:"literal"},[t._v("--submodule")]),t._v(" 选项。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git diff --cached --submodule\ndiff --git a/.gitmodules b/.gitmodules\nnew file mode 100644\nindex 0000000..71fc376\n--- /dev/null\n+++ b/.gitmodules\n@@ -0,0 +1,3 @@\n+[submodule "DbConnector"]\n+       path = DbConnector\n+       url = https://github.com/chaconinc/DbConnector\nSubmodule DbConnector 0000000...c3f01dc (new submodule)')])]),t._v(" "),n("p",[t._v("当你提交时，会看到类似下面的信息：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'added DbConnector module'")]),t._v("\n[master fb9093c] added DbConnector module\n 2 files changed, 4 insertions(+)\n create mode 100644 .gitmodules\n create mode 160000 DbConnector")])]),t._v(" "),n("p",[t._v("注意 "),n("code",{staticClass:"literal"},[t._v("DbConnector")]),t._v(" 记录的 "),n("code",{staticClass:"literal"},[t._v("160000")]),t._v(" 模式。\n这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。")]),t._v(" "),n("p",[t._v("最后，推送这些更改：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master")])]),t._v(" "),n("h2",{attrs:{id:"克隆含有子模块的项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#克隆含有子模块的项目"}},[t._v("#")]),t._v(" 克隆含有子模块的项目")]),t._v(" "),n("p",[t._v("接下来我们将会克隆一个含有子模块的项目。\n当你在克隆这样的项目时，默认会包含该子模块目录，但其中还没有任何文件：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone https://github.com/chaconinc/MainProject\nCloning into 'MainProject'...\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (13/13), done.\nremote: Total 14 (delta 1), reused 13 (delta 0)\nUnpacking objects: 100% (14/14), done.\nChecking connectivity... done.\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd MainProject\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls -la\ntotal 16\ndrwxr-xr-x   9 schacon  staff  306 Sep 17 15:21 .\ndrwxr-xr-x   7 schacon  staff  238 Sep 17 15:21 ..\ndrwxr-xr-x  13 schacon  staff  442 Sep 17 15:21 .git\n-rw-r--r--   1 schacon  staff   92 Sep 17 15:21 .gitmodules\ndrwxr-xr-x   2 schacon  staff   68 Sep 17 15:21 DbConnector\n-rw-r--r--   1 schacon  staff  756 Sep 17 15:21 Makefile\ndrwxr-xr-x   3 schacon  staff  102 Sep 17 15:21 includes\ndrwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 scripts\ndrwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 src\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd DbConnector/\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")])])]),t._v(" "),n("p",[t._v("其中有 "),n("code",{staticClass:"literal"},[t._v("DbConnector")]),t._v(" 目录，不过是空的。\n你必须运行两个命令："),n("code",{staticClass:"literal"},[t._v("git submodule init")]),t._v(" 用来初始化本地配置文件，而 "),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v(" 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule init\nSubmodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update\nCloning into 'DbConnector'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.\nSubmodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc'")])]),t._v(" "),n("p",[t._v("现在 "),n("code",{staticClass:"literal"},[t._v("DbConnector")]),t._v(" 子目录是处在和之前提交时相同的状态了。")]),t._v(" "),n("p",[t._v("不过还有更简单一点的方式。\n如果给 "),n("code",{staticClass:"literal"},[t._v("git clone")]),t._v(" 命令传递 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 选项，它就会自动初始化并更新仓库中的每一个子模块，\n包括可能存在的嵌套子模块。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone --recurse-submodules https://github.com/chaconinc/MainProject\nCloning into 'MainProject'...\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (13/13), done.\nremote: Total 14 (delta 1), reused 13 (delta 0)\nUnpacking objects: 100% (14/14), done.\nChecking connectivity... done.\nSubmodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'\nCloning into 'DbConnector'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.\nSubmodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc'")])]),t._v(" "),n("p",[t._v("如果你已经克隆了项目但忘记了 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v("，那么可以运行 "),n("code",{staticClass:"literal"},[t._v("git submodule update --init")]),t._v("\n将 "),n("code",{staticClass:"literal"},[t._v("git submodule init")]),t._v(" 和 "),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v(" 合并成一步。如果还要初始化、抓取并检出任何嵌套的子模块，\n请使用简明的 "),n("code",{staticClass:"literal"},[t._v("git submodule update --init --recursive")]),t._v("。")]),t._v(" "),n("h2",{attrs:{id:"在包含子模块的项目上工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在包含子模块的项目上工作"}},[t._v("#")]),t._v(" 在包含子模块的项目上工作")]),t._v(" "),n("p",[t._v("现在我们有一份包含子模块的项目副本，我们将会同时在主项目和子模块项目上与队员协作。")]),t._v(" "),n("h3",{attrs:{id:"从子模块的远端拉取上游修改"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从子模块的远端拉取上游修改"}},[t._v("#")]),t._v(" 从子模块的远端拉取上游修改")]),t._v(" "),n("p",[t._v("在项目中使用子模块的最简模型，就是只使用子项目并不时地获取更新，而并不在你的检出中进行任何更改。\n我们来看一个简单的例子。")]),t._v(" "),n("p",[t._v("如果想要在子模块中查看新工作，可以进入到目录中运行 "),n("code",{staticClass:"literal"},[t._v("git fetch")]),t._v(" 与 "),n("code",{staticClass:"literal"},[t._v("git merge")]),t._v("，合并上游分支来更新本地代码。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch\nFrom https://github.com/chaconinc/DbConnector\n   c3f01dc..d0354fc  master     -> origin/master\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge origin/master\nUpdating c3f01dc..d0354fc\nFast-forward\n scripts/connect.sh | 1 +\n src/db.c           | 1 +\n 2 files changed, 2 insertions(+)")])]),t._v(" "),n("p",[t._v("如果你现在返回到主项目并运行 "),n("code",{staticClass:"literal"},[t._v("git diff --submodule")]),t._v("，就会看到子模块被更新的同时获得了一个包含新添加提交的列表。\n如果你不想每次运行 "),n("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 时都输入 "),n("code",{staticClass:"literal"},[t._v("--submodle")]),t._v("，那么可以将 "),n("code",{staticClass:"literal"},[t._v("diff.submodule")]),t._v(" 设置为 “log” 来将其作为默认行为。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global diff.submodule log\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff\nSubmodule DbConnector c3f01dc..d0354fc:\n  > more efficient db routine\n  > better connection routine")])]),t._v(" "),n("p",[t._v("如果在此时提交，那么你会将子模块锁定为其他人更新时的新代码。")]),t._v(" "),n("p",[t._v("如果你不想在子目录中手动抓取与合并，那么还有种更容易的方式。\n运行 "),n("code",{staticClass:"literal"},[t._v("git submodule update --remote")]),t._v("，Git 将会进入子模块然后抓取并更新。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --remote DbConnector\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 2), reused 4 (delta 2)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   3f19983..d0354fc  master     -> origin/master\nSubmodule path 'DbConnector': checked out 'd0354fc054692d3906c85c3af05ddce39a1c0644'")])]),t._v(" "),n("p",[t._v("此命令默认会假定你想要更新并检出子模块仓库的 "),n("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。\n不过你也可以设置为想要的其他分支。\n例如，你想要 DbConnector 子模块跟踪仓库的 “stable” 分支，那么既可以在 "),n("code",{staticClass:"literal"},[t._v(".gitmodules")]),t._v(" 文件中设置\n（这样其他人也可以跟踪它），也可以只在本地的 "),n("code",{staticClass:"literal"},[t._v(".git/config")]),t._v(" 文件中设置。\n让我们在 "),n("code",{staticClass:"literal"},[t._v(".gitmodules")]),t._v(" 文件中设置它：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config -f .gitmodules submodule.DbConnector.branch stable\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --remote\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 2), reused 4 (delta 2)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   27cf5d3..c87d55d  stable -> origin/stable\nSubmodule path 'DbConnector': checked out 'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687'")])]),t._v(" "),n("p",[t._v("如果不用 "),n("code",{staticClass:"literal"},[t._v("-f .gitmodules")]),t._v(" 选项，那么它只会为你做修改。但是在仓库中保留跟踪信息更有意义一些，因为其他人也可以得到同样的效果。")]),t._v(" "),n("p",[t._v("这时我们运行 "),n("code",{staticClass:"literal"},[t._v("git status")]),t._v("，Git 会显示子模块中有“新提交”。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n  modified:   .gitmodules\n  modified:   DbConnector (new commits)\n\nno changes added to commit (use "git add" and/or "git commit -a")')])]),t._v(" "),n("p",[t._v("如果你设置了配置选项 "),n("code",{staticClass:"literal"},[t._v("status.submodulesummary")]),t._v("，Git 也会显示你的子模块的更改摘要：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config status.submodulesummary 1\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   .gitmodules\n\tmodified:   DbConnector (new commits)\n\nSubmodules changed but not updated:\n\n* DbConnector c3f01dc...c87d55d (4):\n  > catch non-null terminated lines')])]),t._v(" "),n("p",[t._v("这时如果运行 "),n("code",{staticClass:"literal"},[t._v("git diff")]),t._v("，可以看到我们修改了 .gitmodules 文件，同时还有几个已拉取的提交需要提交到我们自己的子模块项目中。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git diff\ndiff --git a/.gitmodules b/.gitmodules\nindex 6fc0b3d..fd1cc29 100644\n--- a/.gitmodules\n+++ b/.gitmodules\n@@ -1,3 +1,4 @@\n [submodule "DbConnector"]\n        path = DbConnector\n        url = https://github.com/chaconinc/DbConnector\n+       branch = stable\n Submodule DbConnector c3f01dc..c87d55d:\n  > catch non-null terminated lines\n  > more robust error handling\n  > more efficient db routine\n  > better connection routine')])]),t._v(" "),n("p",[t._v("这非常有趣，因为我们可以直接看到将要提交到子模块中的提交日志。\n提交之后，你也可以运行 "),n("code",{staticClass:"literal"},[t._v("git log -p")]),t._v(" 查看这个信息。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git log -p --submodule\ncommit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Wed Sep 17 16:37:02 2014 +0200\n\n    updating DbConnector for bug fixes\n\ndiff --git a/.gitmodules b/.gitmodules\nindex 6fc0b3d..fd1cc29 100644\n--- a/.gitmodules\n+++ b/.gitmodules\n@@ -1,3 +1,4 @@\n [submodule "DbConnector"]\n        path = DbConnector\n        url = https://github.com/chaconinc/DbConnector\n+       branch = stable\nSubmodule DbConnector c3f01dc..c87d55d:\n  > catch non-null terminated lines\n  > more robust error handling\n  > more efficient db routine\n  > better connection routine')])]),t._v(" "),n("p",[t._v("当运行 "),n("code",{staticClass:"literal"},[t._v("git submodule update --remote")]),t._v(" 时，Git 默认会尝试更新 "),n("strong",[t._v("所有")]),t._v(" 子模块，\n所以如果有很多子模块的话，你可以传递想要更新的子模块的名字。")]),t._v(" "),n("h3",{attrs:{id:"从项目远端拉取上游更改"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从项目远端拉取上游更改"}},[t._v("#")]),t._v(" 从项目远端拉取上游更改")]),t._v(" "),n("p",[t._v("现在，让我们站在协作者的视角，他有自己的 "),n("code",{staticClass:"literal"},[t._v("MainProject")]),t._v(" 仓库的本地克隆，\n只是执行 "),n("code",{staticClass:"literal"},[t._v("git pull")]),t._v(" 获取你新提交的更改还不够：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git pull\nFrom https://github.com/chaconinc/MainProject\n   fb9093c..0a24cfc  master     -> origin/master\nFetching submodule DbConnector\nFrom https://github.com/chaconinc/DbConnector\n   c3f01dc..c87d55d  stable     -> origin/stable\nUpdating fb9093c..0a24cfc\nFast-forward\n .gitmodules         | 2 +-\n DbConnector         | 2 +-\n 2 files changed, 2 insertions(+), 2 deletions(-)\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\n On branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   DbConnector (new commits)\n\nSubmodules changed but not updated:\n\n* DbConnector c87d55d...c3f01dc (4):\n  < catch non-null terminated lines\n  < more robust error handling\n  < more efficient db routine\n  < better connection routine\n\nno changes added to commit (use "git add" and/or "git commit -a")')])]),t._v(" "),n("p",[t._v("默认情况下，"),n("code",{staticClass:"literal"},[t._v("git pull")]),t._v(" 命令会递归地抓取子模块的更改，如上面第一个命令的输出所示。\n然而，它不会 "),n("strong",[t._v("更新")]),t._v(" 子模块。这点可通过 "),n("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 命令看到，它会显示子模块“已修改”，且“有新的提交”。\n此外，左边的尖括号（<）指出了新的提交，表示这些提交已在 MainProject 中记录，但尚未在本地的 "),n("code",{staticClass:"literal"},[t._v("DbConnector")]),t._v(" 中检出。\n为了完成更新，你需要运行 "),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v("：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --init --recursive\nSubmodule path 'vendor/plugins/demo': checked out '48679c6302815f6c76f1fe30625d795d9e55fc56'\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\n On branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working tree clean")])]),t._v(" "),n("p",[t._v("请注意，为安全起见，如果 MainProject 提交了你刚拉取的新子模块，那么应该在\n"),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v(" 后面添加 "),n("code",{staticClass:"literal"},[t._v("--init")]),t._v(" 选项，如果子模块有嵌套的子模块，则应使用 "),n("code",{staticClass:"literal"},[t._v("--recursive")]),t._v(" 选项。")]),t._v(" "),n("p",[t._v("如果你想自动化此过程，那么可以为 "),n("code",{staticClass:"literal"},[t._v("git pull")]),t._v(" 命令添加 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 选项（从 Git 2.14 开始）。\n这会让 Git 在拉取后运行 "),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v("，将子模块置为正确的状态。\n此外，如果你想让 Git 总是以 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 拉取，可以将配置选项 "),n("code",{staticClass:"literal"},[t._v("submodule.recurse")]),t._v(" 设置为 "),n("code",{staticClass:"literal"},[t._v("true")]),t._v("\n（从 Git 2.15 开始可用于 "),n("code",{staticClass:"literal"},[t._v("git pull")]),t._v("）。此选项会让 Git 为所有支持 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 的命令使用该选项（除 "),n("code",{staticClass:"literal"},[t._v("clone")]),t._v(" 以外）。")]),t._v(" "),n("p",[t._v("在为父级项目拉取更新时，还会出现一种特殊的情况：在你拉取的提交中，\n可能 "),n("code",{staticClass:"literal"},[t._v(".gitmodules")]),t._v(" 文件中记录的子模块的 URL 发生了改变。\n比如，若子模块项目改变了它的托管平台，就会发生这种情况。\n此时，若父级项目引用的子模块提交不在仓库中本地配置的子模块远端上，那么执行\n"),n("code",{staticClass:"literal"},[t._v("git pull --recurse-submodules")]),t._v(" 或 "),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v(" 就会失败。\n为了补救，"),n("code",{staticClass:"literal"},[t._v("git submodule sync")]),t._v(" 命令需要：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" 将新的 URL 复制到本地配置中\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule sync --recursive\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" 从新 URL 更新子模块\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --init --recursive")])]),t._v(" "),n("h3",{attrs:{id:"在子模块上工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在子模块上工作"}},[t._v("#")]),t._v(" 在子模块上工作")]),t._v(" "),n("p",[t._v("你很有可能正在使用子模块，因为你确实想在子模块中编写代码的同时，还想在主项目上编写代码（或者跨子模块工作）。\n否则你大概只能用简单的依赖管理系统（如 Maven 或 Rubygems）来替代了。")]),t._v(" "),n("p",[t._v("现在我们将通过一个例子来演示如何在子模块与主项目中同时做修改，以及如何同时提交与发布那些修改。")]),t._v(" "),n("p",[t._v("到目前为止，当我们运行 "),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v(" 从子模块仓库中抓取修改时，\nGit 将会获得这些改动并更新子目录中的文件，但是会将子仓库留在一个称作“游离的 HEAD”的状态。\n这意味着没有本地工作分支（例如 “master” ）跟踪改动。\n如果没有工作分支跟踪更改，也就意味着即便你将更改提交到了子模块，这些更改也很可能会在下次运行\n"),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v(" 时丢失。如果你想要在子模块中跟踪这些修改，还需要一些额外的步骤。")]),t._v(" "),n("p",[t._v("为了将子模块设置得更容易进入并修改，你需要做两件事。\n首先，进入每个子模块并检出其相应的工作分支。\n接着，若你做了更改就需要告诉 Git 它该做什么，然后运行 "),n("code",{staticClass:"literal"},[t._v("git submodule update --remote")]),t._v(" 来从上游拉取新工作。\n你可以选择将它们合并到你的本地工作中，也可以尝试将你的工作变基到新的更改上。")]),t._v(" "),n("p",[t._v("首先，让我们进入子模块目录然后检出一个分支。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd DbConnector/\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout stable\nSwitched to branch 'stable'")])]),t._v(" "),n("p",[t._v("然后尝试用 “merge” 选项来更新子模块。\n为了手动指定它，我们只需给 "),n("code",{staticClass:"literal"},[t._v("update")]),t._v(" 添加 "),n("code",{staticClass:"literal"},[t._v("--merge")]),t._v(" 选项即可。\n这时我们将会看到服务器上的这个子模块有一个改动并且它被合并了进来。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd ..\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --remote --merge\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 2), reused 4 (delta 2)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   c87d55d..92c7337  stable     -> origin/stable\nUpdating c87d55d..92c7337\nFast-forward\n src/main.c | 1 +\n 1 file changed, 1 insertion(+)\nSubmodule path 'DbConnector': merged in '92c7337b30ef9e0893e758dac2459d07362ab5ea'")])]),t._v(" "),n("p",[t._v("如果我们进入 DbConnector 目录，可以发现新的改动已经合并入本地 "),n("code",{staticClass:"literal"},[t._v("stable")]),t._v(" 分支。\n现在让我们看看当我们对库做一些本地的改动而同时其他人推送另外一个修改到上游时会发生什么。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd DbConnector/\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim src/db.c\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'unicode support'")]),t._v("\n[stable f906e16] unicode support\n 1 file changed, 1 insertion(+)")])]),t._v(" "),n("p",[t._v("如果我们现在更新子模块，就会看到当我们在本地做了更改时上游也有一个改动，我们需要将它并入本地。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd ..\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --remote --rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: unicode support\nSubmodule path 'DbConnector': rebased into '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'")])]),t._v(" "),n("p",[t._v("如果你忘记 "),n("code",{staticClass:"literal"},[t._v("--rebase")]),t._v(" 或 "),n("code",{staticClass:"literal"},[t._v("--merge")]),t._v("，Git 会将子模块更新为服务器上的状态。并且会将项目重置为一个游离的 HEAD 状态。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --remote\nSubmodule path 'DbConnector': checked out '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'")])]),t._v(" "),n("p",[t._v("即便这真的发生了也不要紧，你只需回到目录中再次检出你的分支（即还包含着你的工作的分支）然后手动地合并或变基 "),n("code",{staticClass:"literal"},[t._v("origin/stable")]),t._v("（或任何一个你想要的远程分支）就行了。")]),t._v(" "),n("p",[t._v("如果你没有提交子模块的改动，那么运行一个子模块更新也不会出现问题，此时 Git 会只抓取更改而并不会覆盖子模块目录中未保存的工作。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --remote\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 4 (delta 0), reused 4 (delta 0)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/chaconinc/DbConnector\n   5d60ef9..c75e92a  stable     -> origin/stable\nerror: Your local changes to the following files would be overwritten by checkout:\n\tscripts/setup.sh\nPlease, commit your changes or stash them before you can switch branches.\nAborting\nUnable to checkout 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector'")])]),t._v(" "),n("p",[t._v("如果你做了一些与上游改动冲突的改动，当运行更新时 Git 会让你知道。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --remote --merge\nAuto-merging scripts/setup.sh\nCONFLICT (content): Merge conflict in scripts/setup.sh\nRecorded preimage for 'scripts/setup.sh'\nAutomatic merge failed; fix conflicts and then commit the result.\nUnable to merge 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector'")])]),t._v(" "),n("p",[t._v("你可以进入子模块目录中然后就像平时那样修复冲突。")]),t._v(" "),n("h3",{attrs:{id:"发布子模块改动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发布子模块改动"}},[t._v("#")]),t._v(" 发布子模块改动")]),t._v(" "),n("p",[t._v("现在我们的子模块目录中有一些改动。\n其中有一些是我们通过更新从上游引入的，而另一些是本地生成的，由于我们还没有推送它们，所以对任何其他人都不可用。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff\nSubmodule DbConnector c87d55d..82d2ad3:\n  > Merge from origin/stable\n  > updated setup script\n  > unicode support\n  > remove unnecessary method\n  > add new option for conn pooling")])]),t._v(" "),n("p",[t._v("如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，\n因为他们无法得到依赖的子模块改动。那些改动只存在于我们本地的拷贝中。")]),t._v(" "),n("p",[t._v("为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。\n"),n("code",{staticClass:"literal"},[t._v("git push")]),t._v(" 命令接受可以设置为 “check” 或 “on-demand” 的 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 参数。\n如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 "),n("code",{staticClass:"literal"},[t._v("push")]),t._v(" 操作失败。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push --recurse-submodules=check\nThe following submodule paths contain changes that can\nnot be found on any remote:\n  DbConnector\n\nPlease try\n\n\tgit push --recurse-submodules=on-demand\n\nor cd to the path and use\n\n\tgit push\n\nto push them to a remote.")])]),t._v(" "),n("p",[t._v("如你所见，它也给我们了一些有用的建议，指导接下来该如何做。\n最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。\n如果你想要对所有推送都执行检查，那么可以通过设置 "),n("code",{staticClass:"literal"},[t._v("git config push.recurseSubmodules check")]),t._v(" 让它成为默认行为。")]),t._v(" "),n("p",[t._v("另一个选项是使用 “on-demand” 值，它会尝试为你这样做。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push --recurse-submodules=on-demand\nPushing submodule 'DbConnector'\nCounting objects: 9, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (9/9), 917 bytes | 0 bytes/s, done.\nTotal 9 (delta 3), reused 0 (delta 0)\nTo https://github.com/chaconinc/DbConnector\n   c75e92a..82d2ad3  stable -> stable\nCounting objects: 2, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 266 bytes | 0 bytes/s, done.\nTotal 2 (delta 1), reused 0 (delta 0)\nTo https://github.com/chaconinc/MainProject\n   3d6d338..9a377d1  master -> master")])]),t._v(" "),n("p",[t._v("如你所见，Git 进入到 DbConnector 模块中然后在推送主项目前推送了它。\n如果那个子模块因为某些原因推送失败，主项目也会推送失败。\n你也可以通过设置 "),n("code",{staticClass:"literal"},[t._v("git config push.recurseSubmodules on-demand")]),t._v(" 让它成为默认行为。")]),t._v(" "),n("h3",{attrs:{id:"合并子模块改动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合并子模块改动"}},[t._v("#")]),t._v(" 合并子模块改动")]),t._v(" "),n("p",[t._v("如果你其他人同时改动了一个子模块引用，那么可能会遇到一些问题。\n也就是说，如果子模块的历史已经分叉并且在父项目中分别提交到了分叉的分支上，那么你需要做一些工作来修复它。")]),t._v(" "),n("p",[t._v("如果一个提交是另一个的直接祖先（一个快进式合并），那么 Git 会简单地选择之后的提交来合并，这样没什么问题。")]),t._v(" "),n("p",[t._v("不过，Git 甚至不会尝试去进行一次简单的合并。\n如果子模块提交已经分叉且需要合并，那你会得到类似下面的信息：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git pull\nremote: Counting objects: 2, done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 2 (delta 1), reused 2 (delta 1)\nUnpacking objects: 100% (2/2), done.\nFrom https://github.com/chaconinc/MainProject\n   9a377d1..eb974f8  master     -> origin/master\nFetching submodule DbConnector\nwarning: Failed to merge submodule DbConnector (merge following commits not found)\nAuto-merging DbConnector\nCONFLICT (submodule): Merge conflict in DbConnector\nAutomatic merge failed; fix conflicts and then commit the result.")])]),t._v(" "),n("p",[t._v("所以本质上 Git 在这里指出了子模块历史中的两个分支记录点已经分叉并且需要合并。\n它将其解释为 “merge following commits not found” （未找到接下来需要合并的提交），虽然这有点令人困惑，不过之后我们会解释为什么是这样。")]),t._v(" "),n("p",[t._v("为了解决这个问题，你需要弄清楚子模块应该处于哪种状态。\n奇怪的是，Git 并不会给你多少能帮你摆脱困境的信息，甚至连两边提交历史中的 SHA-1 值都没有。\n幸运的是，这很容易解决。\n如果你运行 "),n("code",{staticClass:"literal"},[t._v("git diff")]),t._v("，就会得到试图合并的两个分支中记录的提交的 SHA-1 值。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff\ndiff --cc DbConnector\nindex eb41d76,c771610..0000000\n--- a/DbConnector\n+++ b/DbConnector")])]),t._v(" "),n("p",[t._v("所以，在本例中，"),n("code",{staticClass:"literal"},[t._v("eb41d76")]),t._v(" 是我们的子模块中"),n("strong",[t._v("大家共有")]),t._v("的提交，而 "),n("code",{staticClass:"literal"},[t._v("c771610")]),t._v(" 是上游拥有的提交。\n如果我们进入子模块目录中，它应该已经在 "),n("code",{staticClass:"literal"},[t._v("eb41d76")]),t._v(" 上了，因为合并没有动过它。\n如果不是的话，无论什么原因，你都可以简单地创建并检出一个指向它的分支。")]),t._v(" "),n("p",[t._v("来自另一边的提交的 SHA-1 值比较重要。\n它是需要你来合并解决的。\n你可以尝试直接通过 SHA-1 合并，也可以为它创建一个分支然后尝试合并。\n我们建议后者，哪怕只是为了一个更漂亮的合并提交信息。")]),t._v(" "),n("p",[t._v("所以，我们将会进入子模块目录，基于 "),n("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 的第二个 SHA-1 创建一个分支然后手动合并。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd DbConnector\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rev-parse HEAD\neb41d764bccf88be77aced643c13a7fa86714135\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git branch try-merge c771610\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("(DbConnector) $")]),t._v(" git merge try-merge\nAuto-merging src/main.c\nCONFLICT (content): Merge conflict in src/main.c\nRecorded preimage for 'src/main.c'\nAutomatic merge failed; fix conflicts and then commit the result.")])]),t._v(" "),n("p",[t._v("我们在这儿得到了一个真正的合并冲突，所以如果想要解决并提交它，那么只需简单地通过结果来更新主项目。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim src/main.c "),n("i",{staticClass:"conum",attrs:{"data-value":"1"}},[t._v("①")]),t._v("\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add src/main.c\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'merged our changes'")]),t._v("\nRecorded resolution for 'src/main.c'.\n[master 9fd905e] merged our changes\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd .. "),n("i",{staticClass:"conum",attrs:{"data-value":"2"}},[t._v("②")]),t._v("\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff "),n("i",{staticClass:"conum",attrs:{"data-value":"3"}},[t._v("③")]),t._v("\ndiff --cc DbConnector\nindex eb41d76,c771610..0000000\n--- a/DbConnector\n+++ b/DbConnector\n@@@ -1,1 -1,1 +1,1 @@@\n- Subproject commit eb41d764bccf88be77aced643c13a7fa86714135\n -Subproject commit c77161012afbbe1f58b5053316ead08f4b7e6d1d\n++Subproject commit 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add DbConnector "),n("i",{staticClass:"conum",attrs:{"data-value":"4"}},[t._v("④")]),t._v("\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -m "),n("span",{staticStyle:{"font-style":"italic"}},[t._v('"Merge Tom\'s Changes"')]),t._v(" "),n("i",{staticClass:"conum",attrs:{"data-value":"5"}},[t._v("⑤")]),t._v("\n[master 10d2c60] Merge Tom's Changes")])]),t._v(" "),n("div",{staticClass:"callout-list"},[n("ol",[n("li",[n("i",{staticClass:"conum",attrs:{"data-value":"1"}},[t._v("①")]),t._v(" 首先解决冲突")]),t._v(" "),n("li",[n("i",{staticClass:"conum",attrs:{"data-value":"2"}},[t._v("②")]),t._v(" 然后返回到主项目目录中")]),t._v(" "),n("li",[n("i",{staticClass:"conum",attrs:{"data-value":"3"}},[t._v("③")]),t._v(" 再次检查 SHA-1 值")]),t._v(" "),n("li",[n("i",{staticClass:"conum",attrs:{"data-value":"4"}},[t._v("④")]),t._v(" 解决冲突的子模块记录")]),t._v(" "),n("li",[n("i",{staticClass:"conum",attrs:{"data-value":"5"}},[t._v("⑤")]),t._v(" 提交我们的合并")])])]),t._v(" "),n("p",[t._v("这可能会让你有点儿困惑，但它确实不难。")]),t._v(" "),n("p",[t._v("有趣的是，Git 还能处理另一种情况。\n如果子模块目录中存在着这样一个合并提交，它的历史中包含了的"),n("strong",[t._v("两边")]),t._v("的提交，那么 Git 会建议你将它作为一个可行的解决方案。\n它看到有人在子模块项目的某一点上合并了包含这两次提交的分支，所以你可能想要那个。")]),t._v(" "),n("p",[t._v("这就是为什么前面的错误信息是 “merge following commits not found”，因为它不能 "),n("strong",[t._v("这样")]),t._v(" 做。\n它让人困惑是因为"),n("strong",[t._v("谁能想到它会尝试这样做？")])]),t._v(" "),n("p",[t._v("如果它找到了一个可以接受的合并提交，你会看到类似下面的信息：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git merge origin/master\nwarning: Failed to merge submodule DbConnector (not fast-forward)\nFound a possible merge resolution for the submodule:\n 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a: > merged our changes\nIf this is correct simply add it to the index for example\nby using:\n\n  git update-index --cacheinfo 160000 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a "DbConnector"\n\nwhich will accept this suggestion.\nAuto-merging DbConnector\nCONFLICT (submodule): Merge conflict in DbConnector\nAutomatic merge failed; fix conflicts and then commit the result.')])]),t._v(" "),n("p",[t._v("Git 建议的命令是更新索引，就像你运行了 "),n("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 那样，这样会清除冲突然后提交。\n不过你可能不应该这样做。你可以轻松地进入子模块目录，查看差异是什么，快进到这次提交，恰当地测试，然后提交它。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd DbConnector/\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge 9fd905e\nUpdating eb41d76..9fd905e\nFast-forward\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd ..\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add DbConnector\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'Fast forwarded to a common submodule child'")])])]),t._v(" "),n("p",[t._v("这些命令完成了同一件事，但是通过这种方式你至少可以验证工作是否有效，以及当你在完成时可以确保子模块目录中有你的代码。")]),t._v(" "),n("h2",{attrs:{id:"子模的块技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子模的块技巧"}},[t._v("#")]),t._v(" 子模的块技巧")]),t._v(" "),n("p",[t._v("你可以做几件事情来让用子模块工作轻松一点儿。")]),t._v(" "),n("h3",{attrs:{id:"子模块遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子模块遍历"}},[t._v("#")]),t._v(" 子模块遍历")]),t._v(" "),n("p",[t._v("有一个 "),n("code",{staticClass:"literal"},[t._v("foreach")]),t._v(" 子模块命令，它能在每一个子模块中运行任意命令。\n如果项目中包含了大量子模块，这会非常有用。")]),t._v(" "),n("p",[t._v("例如，假设我们想要开始开发一项新功能或者修复一些错误，并且需要在几个子模块内工作。\n我们可以轻松地保存所有子模块的工作进度。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule foreach "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'git stash'")]),t._v("\nEntering 'CryptoLibrary'\nNo local changes to save\nEntering 'DbConnector'\nSaved working directory and index state WIP on stable: 82d2ad3 Merge from origin/stable\nHEAD is now at 82d2ad3 Merge from origin/stable")])]),t._v(" "),n("p",[t._v("然后我们可以创建一个新分支，并将所有子模块都切换过去。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule foreach "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'git checkout -b featureA'")]),t._v("\nEntering 'CryptoLibrary'\nSwitched to a new branch 'featureA'\nEntering 'DbConnector'\nSwitched to a new branch 'featureA'")])]),t._v(" "),n("p",[t._v("你应该明白。\n能够生成一个主项目与所有子项目的改动的统一差异是非常有用的。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff; git submodule foreach "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'git diff'")]),t._v("\nSubmodule DbConnector contains modified content\ndiff --git a/src/main.c b/src/main.c\nindex 210f1ae..1f0acdc 100644\n--- a/src/main.c\n+++ b/src/main.c\n@@ -245,6 +245,8 @@ static int handle_alias(int *argcp, const char ***argv)\n\n      commit_pager_choice();\n\n+     url = url_decode(url_orig);\n+\n      /* build alias_argv */\n      alias_argv = xmalloc(sizeof(*alias_argv) * (argc + 1));\n      alias_argv[0] = alias_string + 1;\nEntering 'DbConnector'\ndiff --git a/src/db.c b/src/db.c\nindex 1aaefb6..5297645 100644\n--- a/src/db.c\n+++ b/src/db.c\n@@ -93,6 +93,11 @@ char *url_decode_mem(const char *url, int len)\n        return url_decode_internal(&url, len, NULL, &out, 0);\n }\n\n+char *url_decode(const char *url)\n+{\n+       return url_decode_mem(url, strlen(url));\n+}\n+\n char *url_decode_parameter_name(const char **query)\n {\n        struct strbuf out = STRBUF_INIT;")])]),t._v(" "),n("p",[t._v("在这里，我们看到子模块中定义了一个函数并在主项目中调用了它。\n这明显是个简化了的例子，但是希望它能让你明白这种方法的用处。")]),t._v(" "),n("h3",{attrs:{id:"有用的别名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有用的别名"}},[t._v("#")]),t._v(" 有用的别名")]),t._v(" "),n("p",[t._v("你可能想为其中一些命令设置别名，因为它们可能会非常长而你又不能设置选项作为它们的默认选项。\n我们在 "),n("a",{staticClass:"xref",attrs:{id:"xref--ch02-git-basics-chapter--_git_aliases",href:"/chapter-2/7.html#git-别名"}},[t._v("Git 别名")]),t._v(" 介绍了设置 Git 别名，\n但是如果你计划在 Git 中大量使用子模块的话，这里有一些例子。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config alias.sdiff "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'!'\"git diff && git submodule foreach 'git diff'\"")]),t._v("\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config alias.spush "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'push --recurse-submodules=on-demand'")]),t._v("\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config alias.supdate "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'submodule update --remote --merge'")])])]),t._v(" "),n("p",[t._v("这样当你想要更新子模块时可以简单地运行 "),n("code",{staticClass:"literal"},[t._v("git supdate")]),t._v("，或 "),n("code",{staticClass:"literal"},[t._v("git spush")]),t._v(" 检查子模块依赖后推送。")]),t._v(" "),n("h2",{attrs:{id:"子模块的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子模块的问题"}},[t._v("#")]),t._v(" 子模块的问题")]),t._v(" "),n("p",[t._v("然而使用子模块还是有一些小问题。")]),t._v(" "),n("h3",{attrs:{id:"切换分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[t._v("#")]),t._v(" 切换分支")]),t._v(" "),n("p",[t._v("例如，使用 Git 2.13 以前的版本时，在有子模块的项目中切换分支可能会造成麻烦。\n如果你创建一个新分支，在其中添加一个子模块，之后切换到没有该子模块的分支上时，你仍然会有一个还未跟踪的子模块目录。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git --version\ngit version 2.12.2\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b add-crypto\nSwitched to a new branch 'add-crypto'\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule add https://github.com/chaconinc/CryptoLibrary\nCloning into 'CryptoLibrary'...\n...\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'adding crypto library'")]),t._v("\n[add-crypto 4445836] adding crypto library\n 2 files changed, 4 insertions(+)\n create mode 160000 CryptoLibrary\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout master\nwarning: unable to rmdir CryptoLibrary: Directory not empty\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n\tCryptoLibrary/\n\nnothing added to commit but untracked files present (use "git add" to track)')])]),t._v(" "),n("p",[t._v("移除那个目录并不困难，但是有一个目录在那儿会让人有一点困惑。\n如果你移除它然后切换回有那个子模块的分支，需要运行 "),n("code",{staticClass:"literal"},[t._v("submodule update --init")]),t._v(" 来重新建立和填充。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clean -fdx\nRemoving CryptoLibrary/\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout add-crypto\nSwitched to branch 'add-crypto'\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls CryptoLibrary/\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule update --init\nSubmodule path 'CryptoLibrary': checked out 'b8dda6aa182ea4464f3f3264b11e0268545172af'\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls CryptoLibrary/\nMakefile\tincludes\tscripts\t\tsrc")])]),t._v(" "),n("p",[t._v("再说一遍，这真的不难，只是会让人有点儿困惑。")]),t._v(" "),n("p",[t._v("新版的 Git（>= 2.13）通过为 "),n("code",{staticClass:"literal"},[t._v("git checkout")]),t._v(" 命令添加 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 选项简化了所有这些步骤，\n它能为了我们要切换到的分支让子模块处于的正确状态。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git --version\ngit version 2.13.3\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b add-crypto\nSwitched to a new branch 'add-crypto'\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule add https://github.com/chaconinc/CryptoLibrary\nCloning into 'CryptoLibrary'...\n...\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),n("span",{staticStyle:{"font-style":"italic"}},[t._v("'adding crypto library'")]),t._v("\n[add-crypto 4445836] adding crypto library\n 2 files changed, 4 insertions(+)\n create mode 160000 CryptoLibrary\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout --recurse-submodules master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\n\nnothing to commit, working tree clean")])]),t._v(" "),n("p",[t._v("当你在父级项目的几个分支上工作时，对 "),n("code",{staticClass:"literal"},[t._v("git checkout")]),t._v(" 使用 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 选项也很有用，\n它能让你的子模块处于不同的提交上。确实，如果你在记录了子模块的不同提交的分支上切换，\n那么在执行 "),n("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 后子模块会显示为“已修改”并指出“新的提交”。\n这是因为子模块的状态默认不会在切换分支时保留。")]),t._v(" "),n("p",[t._v("这点非常让人困惑，因此当你的项目中拥有子模块时，可以总是使用 "),n("code",{staticClass:"literal"},[t._v("git checkout --recurse-submodules")]),t._v("。\n（对于没有 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 选项的旧版 Git，在检出之后可使用\n"),n("code",{staticClass:"literal"},[t._v("git submodule update --init --recursive")]),t._v(" 来让子模块处于正确的状态）。")]),t._v(" "),n("p",[t._v("幸运的是，你可以通过 "),n("code",{staticClass:"literal"},[t._v("git config submodule.recurse true")]),t._v(" 设置 "),n("code",{staticClass:"literal"},[t._v("submodule.recurse")]),t._v(" 选项，\n告诉 Git（>=2.14）总是使用 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v("。\n如上所述，这也会让 Git 为每个拥有 "),n("code",{staticClass:"literal"},[t._v("--recurse-submodules")]),t._v(" 选项的命令（除了 "),n("code",{staticClass:"literal"},[t._v("git clone")]),t._v("）\n总是递归地在子模块中执行。")]),t._v(" "),n("h3",{attrs:{id:"从子目录切换到子模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从子目录切换到子模块"}},[t._v("#")]),t._v(" 从子目录切换到子模块")]),t._v(" "),n("p",[t._v("另一个主要的告诫是许多人遇到了将子目录转换为子模块的问题。\n如果你在项目中已经跟踪了一些文件，然后想要将它们移动到一个子模块中，那么请务必小心，否则 Git 会对你发脾气。\n假设项目内有一些文件在子目录中，你想要将其转换为一个子模块。\n如果删除子目录然后运行 "),n("code",{staticClass:"literal"},[t._v("submodule add")]),t._v("，Git 会朝你大喊：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" rm -Rf CryptoLibrary/\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule add https://github.com/chaconinc/CryptoLibrary\n'CryptoLibrary' already exists in the index")])]),t._v(" "),n("p",[t._v("你必须要先取消暂存 "),n("code",{staticClass:"literal"},[t._v("CryptoLibrary")]),t._v(" 目录。\n然后才可以添加子模块：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rm -r CryptoLibrary\n"),n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git submodule add https://github.com/chaconinc/CryptoLibrary\nCloning into 'CryptoLibrary'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 0), reused 11 (delta 0)\nUnpacking objects: 100% (11/11), done.\nChecking connectivity... done.")])]),t._v(" "),n("p",[t._v("现在假设你在一个分支下做了这样的工作。\n如果尝试切换回的分支中那些文件还在子目录而非子模块中时——你会得到这个错误：")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout master\nerror: The following untracked working tree files would be overwritten by checkout:\n  CryptoLibrary/Makefile\n  CryptoLibrary/includes/crypto.h\n  ...\nPlease move or remove them before you can switch branches.\nAborting")])]),t._v(" "),n("p",[t._v("你可以通过 "),n("code",{staticClass:"literal"},[t._v("checkout -f")]),t._v(" 来强制切换，但是要小心，如果其中还有未保存的修改，这个命令会把它们覆盖掉。")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",[n("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -f master\nwarning: unable to rmdir CryptoLibrary: Directory not empty\nSwitched to branch 'master'")])]),t._v(" "),n("p",[t._v("当你切换回来之后，因为某些原因你得到了一个空的 "),n("code",{staticClass:"literal"},[t._v("CryptoLibrary")]),t._v(" 目录，并且 "),n("code",{staticClass:"literal"},[t._v("git submodule update")]),t._v(" 也无法修复它。\n你需要进入到子模块目录中运行 "),n("code",{staticClass:"literal"},[t._v("git checkout .")]),t._v(" 来找回所有的文件。\n你也可以通过 "),n("code",{staticClass:"literal"},[t._v("submodule foreach")]),t._v(" 脚本来为多个子模块运行它。")]),t._v(" "),n("p",[t._v("要特别注意的是，近来子模块会将它们的所有 Git 数据保存在顶级项目的 "),n("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 目录中，所以不像旧版本的 Git，摧毁一个子模块目录并不会丢失任何提交或分支。")]),t._v(" "),n("p",[t._v("拥有了这些工具，使用子模块会成为可以在几个相关但却分离的项目上同时开发的相当简单有效的方法。")])])}),[],!1,null,null,null);e.default=s.exports}}]);