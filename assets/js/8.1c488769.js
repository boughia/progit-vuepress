(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{272:function(t,a,s){t.exports=s.p+"assets/img/commit-and-tree.a1135575.png"},273:function(t,a,s){t.exports=s.p+"assets/img/commits-and-parents.388b42c6.png"},274:function(t,a,s){t.exports=s.p+"assets/img/branch-and-history.9753b839.png"},275:function(t,a,s){t.exports=s.p+"assets/img/two-branches.23ac05fc.png"},276:function(t,a,s){t.exports=s.p+"assets/img/head-to-master.bd925006.png"},277:function(t,a,s){t.exports=s.p+"assets/img/head-to-testing.7c260230.png"},278:function(t,a,s){t.exports=s.p+"assets/img/advance-testing.7c1e25ab.png"},279:function(t,a,s){t.exports=s.p+"assets/img/checkout-master.8d39010f.png"},280:function(t,a,s){t.exports=s.p+"assets/img/advance-master.3554acad.png"},499:function(t,a,s){"use strict";s.r(a);var i=s(28),e=Object(i.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"分支简介"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支简介"}},[t._v("#")]),t._v(" 分支简介")]),t._v(" "),i("p",[t._v("为了真正理解 Git 处理分支的方式，我们需要回顾一下 Git 是如何保存数据的。")]),t._v(" "),i("p",[t._v("或许你还记得 "),i("a",{staticClass:"xref",attrs:{id:"xref--ch01-getting-started",href:"/chapter-1/index.html"}},[t._v("起步")]),t._v(" 的内容，\nGit 保存的不是文件的变化或者差异，而是一系列不同时刻的 "),i("strong",[t._v("快照")]),t._v(" 。")]),t._v(" "),i("p",[t._v("在进行提交操作时，Git 会保存一个提交对象（commit object）。\n知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。\n但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。\n首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，\n而由多个分支合并产生的提交对象有多个父对象，")]),t._v(" "),i("p",[t._v("为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。\n暂存操作会为每一个文件计算校验和（使用我们在 "),i("a",{staticClass:"xref",attrs:{href:"/chapter-1/index.html"}},[t._v("起步")]),t._v("\n中提到的 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中\n（Git 使用 "),i("em",[t._v("blob")]),t._v(" 对象来保存它们），最终将校验和加入到暂存区域等待提交：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add README test.rb LICENSE\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -m "),i("span",{staticStyle:{"font-style":"italic"}},[t._v("'The initial commit of my project'")])])]),t._v(" "),i("p",[t._v("当使用 "),i("code",{staticClass:"literal"},[t._v("git commit")]),t._v(" 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和，\n然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象，\n它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。\n如此一来，Git 就可以在需要的时候重现此次保存的快照。")]),t._v(" "),i("p",[t._v("现在，Git 仓库中有五个对象：三个 "),i("em",[t._v("blob")]),t._v(" 对象（保存着文件快照）、一个 "),i("strong",[t._v("树")]),t._v(" 对象\n（记录着目录结构和 blob 对象索引）以及一个 "),i("strong",[t._v("提交")]),t._v(" 对象（包含着指向前述树对象的指针和所有提交信息）。")]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(272),alt:"首次提交对象及其树结构。"}})]),t._v(" "),i("figcaption",[t._v("Figure 1. 首次提交对象及其树结构")])]),t._v(" "),i("p",[t._v("做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。")]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(273),alt:"提交对象及其父对象。"}})]),t._v(" "),i("figcaption",[t._v("Figure 2. 提交对象及其父对象")])]),t._v(" "),i("p",[t._v("Git 的分支，其实本质上仅仅是指向提交对象的可变指针。\nGit 的默认分支名字是 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v("。\n在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。\n"),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支会在每次提交时自动向前移动。")]),t._v(" "),i("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("Git 的 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支并不是一个特殊分支。\n它就跟其它分支完全没有区别。\n之所以几乎每一个仓库都有 master 分支，是因为 "),i("code",{staticClass:"literal"},[t._v("git init")]),t._v(" 命令默认创建它，并且大多数人都懒得去改动它。")])])]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(274),alt:"分支及其提交历史。"}})]),t._v(" "),i("figcaption",[t._v("Figure 3. 分支及其提交历史")])]),t._v(" "),i("h2",{attrs:{id:"分支创建"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支创建"}},[t._v("#")]),t._v(" 分支创建")]),t._v(" "),i("p",[t._v("\nGit 是怎么创建新分支的呢？\n很简单，它只是为你创建了一个可以移动的新的指针。\n比如，创建一个 testing 分支，\n你需要使用 "),i("code",{staticClass:"literal"},[t._v("git branch")]),t._v(" 命令：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git branch testing")])]),t._v(" "),i("p",[t._v("这会在当前所在的提交对象上创建一个指针。")]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(275),alt:"两个指向相同提交历史的分支。"}})]),t._v(" "),i("figcaption",[t._v("Figure 4. 两个指向相同提交历史的分支")])]),t._v(" "),i("p",[t._v("那么，Git 又是怎么知道当前在哪一个分支上呢？\n也很简单，它有一个名为 "),i("code",{staticClass:"literal"},[t._v("HEAD")]),t._v(" 的特殊指针。\n请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 "),i("code",{staticClass:"literal"},[t._v("HEAD")]),t._v(" 概念完全不同。\n在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 "),i("code",{staticClass:"literal"},[t._v("HEAD")]),t._v(" 想象为当前分支的别名）。\n在本例中，你仍然在 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支上。\n因为 "),i("code",{staticClass:"literal"},[t._v("git branch")]),t._v(" 命令仅仅 "),i("strong",[t._v("创建")]),t._v(" 一个新分支，并不会自动切换到新分支中去。")]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(276),alt:"HEAD 指向当前所在的分支。"}})]),t._v(" "),i("figcaption",[t._v("Figure 5. HEAD 指向当前所在的分支")])]),t._v(" "),i("p",[t._v("你可以简单地使用 "),i("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 命令查看各个分支当前所指的对象。\n提供这一功能的参数是 "),i("code",{staticClass:"literal"},[t._v("--decorate")]),t._v("。")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --oneline --decorate\nf30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface\n34ac2 Fixed bug #1328 - stack overflow under certain conditions\n98ca9 The initial commit of my project")])]),t._v(" "),i("p",[t._v("正如你所见，当前 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 和 "),i("code",{staticClass:"literal"},[t._v("testing")]),t._v(" 分支均指向校验和以 "),i("code",{staticClass:"literal"},[t._v("f30ab")]),t._v(" 开头的提交对象。")]),t._v(" "),i("h2",{attrs:{id:"分支切换"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支切换"}},[t._v("#")]),t._v(" 分支切换")]),t._v(" "),i("p",[t._v("\n要切换到一个已存在的分支，你需要使用 "),i("code",{staticClass:"literal"},[t._v("git checkout")]),t._v(" 命令。\n我们现在切换到新创建的 "),i("code",{staticClass:"literal"},[t._v("testing")]),t._v(" 分支去：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout testing")])]),t._v(" "),i("p",[t._v("这样 "),i("code",{staticClass:"literal"},[t._v("HEAD")]),t._v(" 就指向 "),i("code",{staticClass:"literal"},[t._v("testing")]),t._v(" 分支了。")]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(277),alt:"HEAD 指向当前所在的分支。"}})]),t._v(" "),i("figcaption",[t._v("Figure 6. HEAD 指向当前所在的分支")])]),t._v(" "),i("p",[t._v("那么，这样的实现方式会给我们带来什么好处呢？\n现在不妨再提交一次：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim test.rb\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -a -m "),i("span",{staticStyle:{"font-style":"italic"}},[t._v("'made a change'")])])]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(278),alt:"HEAD 分支随着提交操作自动向前移动。"}})]),t._v(" "),i("figcaption",[t._v("Figure 7. HEAD 分支随着提交操作自动向前移动")])]),t._v(" "),i("p",[t._v("如图所示，你的 "),i("code",{staticClass:"literal"},[t._v("testing")]),t._v(" 分支向前移动了，但是 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支却没有，它仍然指向运行 "),i("code",{staticClass:"literal"},[t._v("git checkout")]),t._v(" 时所指的对象。\n这就有意思了，现在我们切换回 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支看看：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout master")])]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(279),alt:"检出时 HEAD 随之移动。"}})]),t._v(" "),i("figcaption",[t._v("Figure 8. 检出时 HEAD 随之移动")])]),t._v(" "),i("p",[t._v("这条命令做了两件事。\n一是使 HEAD 指回 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支，二是将工作目录恢复成 "),i("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支所指向的快照内容。\n也就是说，你现在做修改的话，项目将始于一个较旧的版本。\n本质上来讲，这就是忽略 "),i("code",{staticClass:"literal"},[t._v("testing")]),t._v(" 分支所做的修改，以便于向另一个方向进行开发。")]),t._v(" "),i("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: 分支切换会改变你工作目录中的文件","epub:type":"note"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("h2",[t._v("分支切换会改变你工作目录中的文件")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("在切换分支时，一定要注意你工作目录里的文件会被改变。\n如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。\n如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。")])])]),t._v(" "),i("p",[t._v("我们不妨再稍微做些修改并提交：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim test.rb\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -a -m "),i("span",{staticStyle:{"font-style":"italic"}},[t._v("'made other changes'")])])]),t._v(" "),i("p",[t._v("现在，这个项目的提交历史已经产生了分叉（参见 "),i("a",{staticClass:"xref",attrs:{id:"xref-divergent_history",href:"#divergent_history"}},[t._v("项目分叉历史")]),t._v("）。\n因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。\n上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。\n而所有这些工作，你需要的命令只有 "),i("code",{staticClass:"literal"},[t._v("branch")]),t._v("、"),i("code",{staticClass:"literal"},[t._v("checkout")]),t._v(" 和 "),i("code",{staticClass:"literal"},[t._v("commit")]),t._v("。")]),t._v(" "),i("figure",{staticClass:"image",attrs:{id:"divergent_history"}},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(280),alt:"项目分叉历史。"}})]),t._v(" "),i("figcaption",[t._v("Figure 9. 项目分叉历史")])]),t._v(" "),i("p",[t._v("你可以简单地使用 "),i("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 命令查看分叉历史。\n运行 "),i("code",{staticClass:"literal"},[t._v("git log --oneline --decorate --graph --all")]),t._v(" ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature #32 - ability to add new formats to the\n* 34ac2 fixed bug #1328 - stack overflow under certain conditions\n* 98ca9 initial commit of my project")])]),t._v(" "),i("p",[t._v("由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。\n创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？")]),t._v(" "),i("p",[t._v("这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。\n完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。\n而在 Git 中，任何规模的项目都能在瞬间创建新分支。\n同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。\n这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。")]),t._v(" "),i("p",[t._v("接下来，让我们看看你为什么应该这样做。")]),t._v(" "),i("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: 创建新分支的同时切换过去","epub:type":"note"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("h2",[t._v("创建新分支的同时切换过去")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("通常我们会在创建一个新分支后立即切换过去，这可以用 "),i("code",{staticClass:"literal"},[t._v("git checkout -b <newbranchname>")]),t._v(" 一条命令搞定。")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);