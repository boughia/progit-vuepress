(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{454:function(t,e,a){"use strict";a.r(e);var s=a(28),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"jgit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jgit"}},[t._v("#")]),t._v(" JGit")]),t._v(" "),a("p",[t._v("\n如果你想在一个 Java 程序中使用 Git ，有一个功能齐全的 Git 库，那就是 JGit 。\nJGit 是一个用 Java 写成的功能相对健全的 Git 的实现，它在 Java 社区中被广泛使用。\nJGit 项目由 Eclipse 维护，它的主页在 "),a("a",{staticClass:"link",attrs:{href:"https://www.eclipse.org/jgit"}},[t._v("https://www.eclipse.org/jgit")]),t._v(" 。")]),t._v(" "),a("h2",{attrs:{id:"起步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起步"}},[t._v("#")]),t._v(" 起步")]),t._v(" "),a("p",[t._v("有很多种方式可以让 JGit 连接你的项目，并依靠它去写代码。\n最简单的方式也许就是使用 Maven 。你可以通过在你的 pom.xml 文件里的 "),a("code",{staticClass:"literal"},[t._v("<dependencies>")]),t._v(" 标签中增加像下面这样的片段来完成这个整合。")]),t._v(" "),a("pre",{staticClass:"source language-xml"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("<dependency>")]),t._v("\n    "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("<groupId>")]),t._v("org.eclipse.jgit"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("</groupId>")]),t._v("\n    "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("<artifactId>")]),t._v("org.eclipse.jgit"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("</artifactId>")]),t._v("\n    "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("<version>")]),t._v("3.5.0.201409260305-r"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("</version>")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("</dependency>")])])]),t._v(" "),a("p",[t._v("在你读到这段文字时 "),a("code",{staticClass:"literal"},[t._v("version")]),t._v(" 很可能已经更新了，所以请浏览 "),a("a",{staticClass:"link",attrs:{href:"https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit"}},[t._v("https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit")]),t._v(" 以获取最新的仓库信息。\n当这一步完成之后， Maven 就会自动获取并使用你所需要的 JGit 库。")]),t._v(" "),a("p",[t._v("如果你想自己管理二进制的依赖包，那么你可以从 "),a("a",{staticClass:"link",attrs:{href:"https://www.eclipse.org/jgit/download"}},[t._v("https://www.eclipse.org/jgit/download")]),t._v(" 获得预构建的 JGit 二进制文件。\n你可以像下面这样执行一个命令来将它们构建进你的项目。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[t._v("javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java\njava -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App")])]),t._v(" "),a("h2",{attrs:{id:"底层命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#底层命令"}},[t._v("#")]),t._v(" 底层命令")]),t._v(" "),a("p",[t._v("JGit 的 API 有两种基本的层次：底层命令和高层命令。\n这个两个术语都来自 Git ，并且 JGit 也被按照相同的方式粗略地划分：高层 API 是一个面向普通用户级别功能的友好的前端（一系列普通用户使用 Git 命令行工具时可能用到的东西），底层 API 则直接作用于低级的仓库对象。")]),t._v(" "),a("p",[t._v("大多数 JGit 会话会以 "),a("code",{staticClass:"literal"},[t._v("Repository")]),t._v(" 类作为起点，你首先要做的事就是创建一个它的实例。\n对于一个基于文件系统的仓库来说（嗯， JGit 允许其它的存储模型），用 "),a("code",{staticClass:"literal"},[t._v("FileRepositoryBuilder")]),t._v(" 完成它。")]),t._v(" "),a("pre",{staticClass:"source language-java"},[a("code",[a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 创建一个新仓库")]),t._v("\nRepository newlyCreatedRepo = FileRepositoryBuilder.create(\n    "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("new")]),t._v(" File("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"/tmp/new_repo/.git"')]),t._v("));\nnewlyCreatedRepo.create();\n\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 打开一个存在的仓库")]),t._v("\nRepository existingRepo = "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("new")]),t._v(" FileRepositoryBuilder()\n    .setGitDir("),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("new")]),t._v(" File("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"my_repo/.git"')]),t._v("))\n    .build();")])]),t._v(" "),a("p",[t._v("无论你的程序是否知道仓库的确切位置，builder 中的那个流畅的 API 都可以提供给它寻找仓库所需所有信息。\n它可以使用环境变量 （"),a("code",{staticClass:"literal"},[t._v(".readEnvironment()")]),t._v("） ，从工作目录的某处开始并搜索 （"),a("code",{staticClass:"literal"},[t._v(".setWorkTree(…).findGitDir()")]),t._v("） , 或者仅仅只是像上面那样打开一个已知的 "),a("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 目录。")]),t._v(" "),a("p",[t._v("当你拥有一个 "),a("code",{staticClass:"literal"},[t._v("Repository")]),t._v(" 实例后，你就能对它做各种各样的事。\n下面是一个速览：")]),t._v(" "),a("pre",{staticClass:"source language-java"},[a("code",[a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 获取引用")]),t._v("\nRef master = repo.getRef("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"master"')]),t._v(");\n\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 获取该引用所指向的对象")]),t._v("\nObjectId masterTip = master.getObjectId();\n\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// Rev-parse")]),t._v("\nObjectId obj = repo.resolve("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"HEAD^{tree}"')]),t._v(");\n\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 装载对象原始内容")]),t._v("\nObjectLoader loader = repo.open(masterTip);\nloader.copyTo(System.out);\n\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 创建分支")]),t._v("\nRefUpdate createBranch1 = repo.updateRef("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"refs/heads/branch1"')]),t._v(");\ncreateBranch1.setNewObjectId(masterTip);\ncreateBranch1.update();\n\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 删除分支")]),t._v("\nRefUpdate deleteBranch1 = repo.updateRef("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"refs/heads/branch1"')]),t._v(");\ndeleteBranch1.setForceUpdate("),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("true")]),t._v(");\ndeleteBranch1.delete();\n\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 配置")]),t._v("\nConfig cfg = repo.getConfig();\nString name = cfg.getString("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"user"')]),t._v(", "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("null")]),t._v(", "),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"name"')]),t._v(");")])]),t._v(" "),a("p",[t._v("这里完成了一大堆事情，所以我们还是一次理解一段的好。")]),t._v(" "),a("p",[t._v("第一行获取一个指向 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 引用的指针。\nJGit 自动抓取位于 "),a("code",{staticClass:"literal"},[t._v("refs/heads/master")]),t._v(" 的 "),a("em",[t._v("真正的")]),t._v(" "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 引用，并返回一个允许你获取该引用的信息的对象。\n你可以获取它的名字 （"),a("code",{staticClass:"literal"},[t._v(".getName()")]),t._v("） ，或者一个直接引用的目标对象 （"),a("code",{staticClass:"literal"},[t._v(".getObjectId()")]),t._v("） ，或者一个指向该引用的符号指针 （"),a("code",{staticClass:"literal"},[t._v(".getTarget()")]),t._v("） 。\n引用对象也经常被用来表示标签的引用和对象，所以你可以询问某个标签是否被“削除”了，或者说它指向一个标签对象的（也许很长的）字符串的最终目标。")]),t._v(" "),a("p",[t._v("第二行获得以 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 引用的目标，它返回一个 ObjectId 实例。\n不管是否存在于一个 Git 对象的数据库，ObjectId 都会代表一个对象的 SHA-1 哈希。\n第三行与此相似，但是它展示了 JGit 如何处理 rev-parse 语法（要了解更多，请看 "),a("a",{staticClass:"xref",attrs:{href:"/chapter-7/1.html#分支引用"}},[t._v("分支引用")]),t._v(" ），你可以传入任何 Git 了解的对象说明符，然后 JGit 会返回该对象的一个有效的 ObjectId ，或者 "),a("code",{staticClass:"literal"},[t._v("null")]),t._v(" 。")]),t._v(" "),a("p",[t._v("接下来两行展示了如何装载一个对象的原始内容。\n在这个例子中，我们调用 "),a("code",{staticClass:"literal"},[t._v("ObjectLoader.copyTo()")]),t._v(" 直接向标准输出流输出对象的内容，除此之外 ObjectLoader 还带有读取对象的类型和长度并将它以字节数组返回的方法。\n对于一个（ "),a("code",{staticClass:"literal"},[t._v(".isLarge()")]),t._v(" 返回 "),a("code",{staticClass:"literal"},[t._v("true")]),t._v(" 的）大的对象，你可以调用 "),a("code",{staticClass:"literal"},[t._v(".openStream()")]),t._v(" 来获得一个类似 InputStream 的对象，它可以在没有一次性将所有数据拉到内存的前提下读取对象的原始数据。")]),t._v(" "),a("p",[t._v("接下来几行展现了如何创建一个新的分支。\n我们创建一个 RefUpdate 实例，配置一些参数，然后调用 "),a("code",{staticClass:"literal"},[t._v(".update()")]),t._v(" 来确认这个更改。\n删除相同分支的代码就在这行下面。\n记住必须先 "),a("code",{staticClass:"literal"},[t._v(".setForceUpdate(true)")]),t._v(" 才能让它工作，否则调用 "),a("code",{staticClass:"literal"},[t._v(".delete()")]),t._v(" 只会返回 "),a("code",{staticClass:"literal"},[t._v("REJECTED")]),t._v(" ，然后什么都没有发生。")]),t._v(" "),a("p",[t._v("最后一个例子展示了如何从 Git 配置文件中获取 "),a("code",{staticClass:"literal"},[t._v("user.name")]),t._v(" 的值。\n这个 Config 实例使用我们先前打开的仓库做本地配置，但是它也会自动地检测并读取全局和系统的配置文件。")]),t._v(" "),a("p",[t._v("这只是底层 API 的冰山一角，另外还有许多可以使用的方法和类。\n还有一个没有放在这里说明的，就是 JGit 是用异常机制来处理错误的。\nJGit API 有时使用标准的 Java 异常（例如 "),a("code",{staticClass:"literal"},[t._v("IOException")]),t._v(" ），但是它也提供了大量 JGit 自己定义的异常类型（例如 "),a("code",{staticClass:"literal"},[t._v("NoRemoteRepositoryException")]),t._v("、 "),a("code",{staticClass:"literal"},[t._v("CorruptObjectException")]),t._v(" 和 "),a("code",{staticClass:"literal"},[t._v("NoMergeBaseException")]),t._v("）。")]),t._v(" "),a("h2",{attrs:{id:"高层命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高层命令"}},[t._v("#")]),t._v(" 高层命令")]),t._v(" "),a("p",[t._v("底层 API 更加完善，但是有时将它们串起来以实现普通的目的非常困难，例如将一个文件添加到索引，或者创建一个新的提交。\n为了解决这个问题， JGit 提供了一系列高层 API ，使用这些 API 的入口点就是 "),a("code",{staticClass:"literal"},[t._v("Git")]),t._v(" 类：")]),t._v(" "),a("pre",{staticClass:"source language-java"},[a("code",[t._v("Repository repo;\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("// 构建仓库……")]),t._v("\nGit git = "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("new")]),t._v(" Git(repo);")])]),t._v(" "),a("p",[t._v("Git 类有一系列非常好的 "),a("em",[t._v("构建器")]),t._v(" 风格的高层方法，它可以用来构造一些复杂的行为。\n我们来看一个例子——做一件类似 "),a("code",{staticClass:"literal"},[t._v("git ls-remote")]),t._v(" 的事。")]),t._v(" "),a("pre",{staticClass:"source language-java"},[a("code",[t._v("CredentialsProvider cp = "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("new")]),t._v(" UsernamePasswordCredentialsProvider("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"username"')]),t._v(", "),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"p4ssw0rd"')]),t._v(");\nCollection<Ref> remoteRefs = git.lsRemote()\n    .setCredentialsProvider(cp)\n    .setRemote("),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"origin"')]),t._v(")\n    .setTags("),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("true")]),t._v(")\n    .setHeads("),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("false")]),t._v(")\n    .call();\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("for")]),t._v(" (Ref ref : remoteRefs) {\n    System.out.println(ref.getName() + "),a("span",{staticStyle:{"font-style":"italic"}},[t._v('" -> "')]),t._v(" + ref.getObjectId().name());\n}")])]),t._v(" "),a("p",[t._v("这是一个 Git 类的公共样式，这个方法返回一个可以让你串连若干方法调用来设置参数的命令对象，当你调用 "),a("code",{staticClass:"literal"},[t._v(".call()")]),t._v(" 时它们就会被执行。\n在这情况下，我们只是请求了 "),a("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 远程的标签，而不是头部。\n还要注意用于验证的 "),a("code",{staticClass:"literal"},[t._v("CredentialsProvider")]),t._v(" 对象的使用。")]),t._v(" "),a("p",[t._v("在 Git 类中还可以使用许多其它的命令，包括但不限于 "),a("code",{staticClass:"literal"},[t._v("add")]),t._v("、"),a("code",{staticClass:"literal"},[t._v("blame")]),t._v("、"),a("code",{staticClass:"literal"},[t._v("commit")]),t._v("、"),a("code",{staticClass:"literal"},[t._v("clean")]),t._v("、"),a("code",{staticClass:"literal"},[t._v("push")]),t._v("、"),a("code",{staticClass:"literal"},[t._v("rebase")]),t._v("、"),a("code",{staticClass:"literal"},[t._v("revert")]),t._v(" 和 "),a("code",{staticClass:"literal"},[t._v("reset")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"拓展阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[t._v("#")]),t._v(" 拓展阅读")]),t._v(" "),a("p",[t._v("这只是 JGit 的全部能力的冰山一角。\n如果你对这有兴趣并且想深入学习，在下面可以找到一些信息和灵感。")]),t._v(" "),a("div",{staticClass:"itemized-list"},[a("ul",[a("li",[a("span",{staticClass:"principal"},[t._v("JGit API 在线官方文档： "),a("a",{staticClass:"link",attrs:{href:"http://download.eclipse.org/jgit/docs/latest/apidocs"}},[t._v("http://download.eclipse.org/jgit/docs/latest/apidocs")]),t._v(" 。\n这是基本的 Javadoc ，所以你也可以在你最喜欢的 JVM IDE 上将它们安装它们到本地。")])]),t._v(" "),a("li",[a("span",{staticClass:"principal"},[t._v("JGit Cookbook ： "),a("a",{staticClass:"link",attrs:{href:"https://github.com/centic9/jgit-cookbook"}},[t._v("https://github.com/centic9/jgit-cookbook")]),t._v(" 拥有许多如何利用 JGit 实现特定任务的例子。")])]),t._v(" "),a("li",[a("span",{staticClass:"principal"},[a("a",{staticClass:"link",attrs:{href:"http://stackoverflow.com/questions/6861881"}},[t._v("http://stackoverflow.com/questions/6861881")]),t._v(" 指出了几个好的资源。")])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);