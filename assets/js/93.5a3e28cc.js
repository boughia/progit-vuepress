(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{511:function(t,s,a){"use strict";a.r(s);var e=a(28),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"配置服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置服务器"}},[t._v("#")]),t._v(" 配置服务器")]),t._v(" "),a("p",[t._v("我们来看看如何配置服务器端的 SSH 访问。\n本例中，我们将使用 "),a("code",{staticClass:"literal"},[t._v("authorized_keys")]),t._v(" 方法来对用户进行认证。\n同时我们假设你使用的操作系统是标准的 Linux 发行版，比如 Ubuntu。\n首先，创建一个操作系统用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v("，并为其建立一个 "),a("code",{staticClass:"literal"},[t._v(".ssh")]),t._v(" 目录。")]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("以下操作可通过 "),a("code",{staticClass:"literal"},[t._v("ssh-copy-id")]),t._v(" 命令自动完成，这样就不必手动复制并安装公钥了。")])])]),t._v(" "),a("p",[t._v("首先，创建一个操作系统用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v("，并为其建立一个 "),a("code",{staticClass:"literal"},[t._v(".ssh")]),t._v(" 目录。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo adduser git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" su git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" mkdir .ssh && chmod 700 .ssh\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys")])]),t._v(" "),a("p",[t._v("接着，我们需要为系统用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 的 "),a("code",{staticClass:"literal"},[t._v("authorized_keys")]),t._v(" 文件添加一些开发者 SSH 公钥。\n假设我们已经获得了若干受信任的公钥，并将它们保存在临时文件中。\n与前文类似，这些公钥看起来是这样的：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /tmp/id_rsa.john.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L\nojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k\nYjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez\nSdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv\nO7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq\ndAv8JggJICUvax2T9va5 gsg-keypair")])]),t._v(" "),a("p",[t._v("将这些公钥加入系统用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 的 "),a("code",{staticClass:"literal"},[t._v(".ssh")]),t._v(" 目录下 "),a("code",{staticClass:"literal"},[t._v("authorized_keys")]),t._v(" 文件的末尾：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys")])]),t._v(" "),a("p",[t._v("现在我们来为开发者新建一个空仓库。可以借助带 "),a("code",{staticClass:"literal"},[t._v("--bare")]),t._v(" 选项的 "),a("code",{staticClass:"literal"},[t._v("git init")]),t._v(" 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /srv/git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" mkdir project.git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd project.git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git init --bare\nInitialized empty Git repository in /srv/git/project.git/")])]),t._v(" "),a("p",[t._v("接着，John、Josie 或者 Jessica 中的任意一人可以将他们项目的最初版本推送到这个仓库中，\n他只需将此仓库设置为项目的远程仓库并向其推送分支。\n请注意，每添加一个新项目，都需要有人登录服务器取得 shell，并创建一个裸仓库。\n我们假定这个设置了 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 用户和 Git 仓库的服务器使用 "),a("code",{staticClass:"literal"},[t._v("gitserver")]),t._v(" 作为主机名。\n同时，假设该服务器运行在内网，并且你已在 DNS 配置中将 "),a("code",{staticClass:"literal"},[t._v("gitserver")]),t._v(" 指向此服务器。\n那么我们可以运行如下命令（假定 "),a("code",{staticClass:"literal"},[t._v("myproject")]),t._v(" 是已有项目且其中已包含文件）：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" on John"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'s computer")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),a("span",{staticStyle:{"font-style":"italic"}},[t._v(" cd myproject")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),a("span",{staticStyle:{"font-style":"italic"}},[t._v(" git init")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),a("span",{staticStyle:{"font-style":"italic"}},[t._v(" git add .")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),a("span",{staticStyle:{"font-style":"italic"}},[t._v(" git commit -m '")]),t._v("initial commit"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git remote add origin git@gitserver:/srv/git/project.git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master")])]),t._v(" "),a("p",[t._v("此时，其他开发者可以克隆此仓库，并推回各自的改动，步骤很简单：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone git@gitserver:/srv/git/project.git\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd project\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim README\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'fix for the README file'")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master")])]),t._v(" "),a("p",[t._v("通过这种方法，你可以快速搭建一个具有读写权限、面向多个开发者的 Git 服务器。")]),t._v(" "),a("p",[t._v("需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 的身份登录服务器从而获得一个普通 shell。\n如果你想对此加以限制，则需要修改 "),a("code",{staticClass:"literal"},[t._v("/etc/passwd")]),t._v(" 文件中（"),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 用户所对应）的 shell 值。")]),t._v(" "),a("p",[t._v("借助一个名为 "),a("code",{staticClass:"literal"},[t._v("git-shell")]),t._v(" 的受限 shell 工具，你可以方便地将用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 的活动限制在与 Git 相关的范围内。\n该工具随 Git 软件包一同提供。如果将 "),a("code",{staticClass:"literal"},[t._v("git-shell")]),t._v(" 设置为用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 的登录 shell（login shell），\n那么该用户便不能获得此服务器的普通 shell 访问权限。\n若要使用 "),a("code",{staticClass:"literal"},[t._v("git-shell")]),t._v("，需要用它替换掉 bash 或 csh，使其成为该用户的登录 shell。\n为进行上述操作，首先你必须确保 "),a("code",{staticClass:"literal"},[t._v("git-shell")]),t._v(" 的完整路径名已存在于 "),a("code",{staticClass:"literal"},[t._v("/etc/shells")]),t._v(" 文件中：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /etc/shells   "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("# see if git-shell is already in there. If not...")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" which git-shell   "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("# make sure git-shell is installed on your system.")]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo -e /etc/shells  "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("# and add the path to git-shell from last command")])])]),t._v(" "),a("p",[t._v("现在你可以使用 "),a("code",{staticClass:"literal"},[t._v("chsh <username> -s <shell>")]),t._v(" 命令修改任一系统用户的 shell：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo chsh git -s "),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$(")]),t._v("which git-shell"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v(")")])])]),t._v(" "),a("p",[t._v("这样，用户 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。\n如果试图登录，你会发现尝试被拒绝，像这样：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ssh git@gitserver\nfatal: Interactive git shell is not enabled.\nhint: ~/git-shell-commands should exist and have read and execute access.\nConnection to gitserver closed.")])]),t._v(" "),a("p",[t._v("此时，用户仍可通过 SSH 端口转发来访问任何可达的 git 服务器。\n如果你想要避免它，可编辑 "),a("code",{staticClass:"literal"},[t._v("authorized_keys")]),t._v(" 文件并在所有想要限制的公钥之前添加以下选项：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[t._v("no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty")])]),t._v(" "),a("p",[t._v("其结果如下：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat ~/.ssh/authorized_keys\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h\nPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N\nYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC\nIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myivO7TCUSBd\nLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPqdAv8JggJ\nICUvax2T9va5 gsg-keypair\n\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQDEwENNMomTboYI+LJieaAY16qiXiH3wuvENhBG...")])]),t._v(" "),a("p",[t._v("现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。\n正如输出信息所提示的，你也可以在 "),a("code",{staticClass:"literal"},[t._v("git")]),t._v(" 用户的主目录下建立一个目录，来对 "),a("code",{staticClass:"literal"},[t._v("git-shell")]),t._v(" 命令进行一定程度的自定义。\n比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。\n要了解更多有关自定义 shell 的信息，请运行 "),a("code",{staticClass:"literal"},[t._v("git help shell")]),t._v("。")])])}),[],!1,null,null,null);s.default=i.exports}}]);