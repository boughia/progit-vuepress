(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{538:function(t,s,e){"use strict";e.r(s);var a=e(28),i=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"贮藏与清理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贮藏与清理"}},[t._v("#")]),t._v(" 贮藏与清理")]),t._v(" "),e("p",[t._v("有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，\n而这时你想要切换到另一个分支做一点别的事情。\n问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。\n针对这个问题的答案是 "),e("code",{staticClass:"literal"},[t._v("git stash")]),t._v(" 命令。")]),t._v(" "),e("p",[t._v("贮藏（stash）会处理工作目录的脏的状态——即跟踪文件的修改与暂存的改动——然后将未完成的修改保存到一个栈上，\n而你可以在任何时候重新应用这些改动（甚至在不同的分支上）。")]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: 迁移到 git stash push","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("h2",[t._v("迁移到 "),e("code",{staticClass:"literal"},[t._v("git stash push")])]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("截至 2017 年 10 月下旬，Git 邮件列表上进行了广泛讨论，该讨论中弃用了 "),e("code",{staticClass:"literal"},[t._v("git stash save")]),t._v(" 命令，\n代之以现有 "),e("code",{staticClass:"literal"},[t._v("git stash push")]),t._v(" 命令。主因是 "),e("code",{staticClass:"literal"},[t._v("git stash push")]),t._v(" 引入了贮藏选定的 "),e("strong",[t._v("路径规范")]),t._v(" 的选项，\n而有些东西 "),e("code",{staticClass:"literal"},[t._v("git stash save")]),t._v(" 不支持。")]),t._v(" "),e("p",[e("code",{staticClass:"literal"},[t._v("git stash save")]),t._v(" 不会很快就消失，所以不用担心它突然不见。\n不过你可能想要迁移到 "),e("code",{staticClass:"literal"},[t._v("push")]),t._v(" 来获取新功能。")])])]),t._v(" "),e("h2",{attrs:{id:"贮藏工作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贮藏工作"}},[t._v("#")]),t._v(" 贮藏工作")]),t._v(" "),e("p",[t._v("为了演示贮藏，你需要进入项目并改动几个文件，然后可以暂存其中的一个改动。\n如果运行 "),e("code",{staticClass:"literal"},[t._v("git status")]),t._v("，可以看到有改动的状态：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb')])]),t._v(" "),e("p",[t._v("现在想要切换分支，但是还不想要提交之前的工作；所以贮藏修改。\n将新的贮藏推送到栈上，运行 "),e("code",{staticClass:"literal"},[t._v("git stash")]),t._v(" 或 "),e("code",{staticClass:"literal"},[t._v("git stash push")]),t._v("：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git stash\nSaved working directory and index state \\\n  "WIP on master: 049d078 added the index file"\nHEAD is now at 049d078 added the index file\n(To restore them type "git stash apply")')])]),t._v(" "),e("p",[t._v("可以看到工作目录是干净的了：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" On branch master\nnothing to commit, working directory clean")])]),t._v(" "),e("p",[t._v("此时，你可以切换分支并在其他地方工作；你的修改被存储在栈上。\n要查看贮藏的东西，可以使用 "),e("code",{staticClass:"literal"},[t._v("git stash list")]),t._v("：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git stash list\nstash@{0}: WIP on master: 049d078 added the index file\nstash@{1}: WIP on master: c264051 Revert "added file_size"\nstash@{2}: WIP on master: 21d80a5 added number to log')])]),t._v(" "),e("p",[t._v("在本例中，有两个之前的贮藏，所以你接触到了三个不同的贮藏工作。\n可以通过原来 stash 命令的帮助提示中的命令将你刚刚贮藏的工作重新应用："),e("code",{staticClass:"literal"},[t._v("git stash apply")]),t._v("。\n如果想要应用其中一个更旧的贮藏，可以通过名字指定它，像这样："),e("code",{staticClass:"literal"},[t._v("git stash apply stash@{2}")]),t._v("。\n如果不指定一个贮藏，Git 认为指定的是最近的贮藏：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git stash apply\nOn branch master\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   index.html\n\tmodified:   lib/simplegit.rb\n\nno changes added to commit (use "git add" and/or "git commit -a")')])]),t._v(" "),e("p",[t._v("可以看到 Git 重新修改了当你保存贮藏时撤消的文件。\n在本例中，当尝试应用贮藏时有一个干净的工作目录，并且尝试将它应用在保存它时所在的分支。\n并不是必须要有一个干净的工作目录，或者要应用到同一分支才能成功应用贮藏。\n可以在一个分支上保存一个贮藏，切换到另一个分支，然后尝试重新应用这些修改。\n当应用贮藏时工作目录中也可以有修改与未提交的文件——如果有任何东西不能干净地应用，Git 会产生合并冲突。")]),t._v(" "),e("p",[t._v("文件的改动被重新应用了，但是之前暂存的文件却没有重新暂存。\n想要那样的话，必须使用 "),e("code",{staticClass:"literal"},[t._v("--index")]),t._v(" 选项来运行 "),e("code",{staticClass:"literal"},[t._v("git stash apply")]),t._v(" 命令，来尝试重新应用暂存的修改。\n如果已经那样做了，那么你将回到原来的位置：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git stash apply --index\nOn branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb')])]),t._v(" "),e("p",[t._v("应用选项只会尝试应用贮藏的工作——在堆栈上还有它。\n可以运行 "),e("code",{staticClass:"literal"},[t._v("git stash drop")]),t._v(" 加上将要移除的贮藏的名字来移除它：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git stash list\nstash@{0}: WIP on master: 049d078 added the index file\nstash@{1}: WIP on master: c264051 Revert "added file_size"\nstash@{2}: WIP on master: 21d80a5 added number to log\n'),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git stash drop stash@{0}\nDropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)")])]),t._v(" "),e("p",[t._v("也可以运行 "),e("code",{staticClass:"literal"},[t._v("git stash pop")]),t._v(" 来应用贮藏然后立即从栈上扔掉它。")]),t._v(" "),e("h2",{attrs:{id:"贮藏的创意性使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贮藏的创意性使用"}},[t._v("#")]),t._v(" 贮藏的创意性使用")]),t._v(" "),e("p",[t._v("有几个贮藏的变种可能也很有用。\n第一个非常流行的选项是 "),e("code",{staticClass:"literal"},[t._v("git stash")]),t._v(" 命令的 "),e("code",{staticClass:"literal"},[t._v("--keep-index")]),t._v(" 选项。\n它告诉 Git 不仅要贮藏所有已暂存的内容，同时还要将它们保留在索引中。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status -s\nM  index.html\n M lib/simplegit.rb\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git stash --keep-index\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status -s\nM  index.html")])]),t._v(" "),e("p",[t._v("另一个经常使用贮藏来做的事情是像贮藏跟踪文件一样贮藏未跟踪文件。\n默认情况下，"),e("code",{staticClass:"literal"},[t._v("git stash")]),t._v(" 只会贮藏已修改和暂存的 "),e("strong",[t._v("已跟踪")]),t._v(" 文件。\n如果指定 "),e("code",{staticClass:"literal"},[t._v("--include-untracked")]),t._v(" 或 "),e("code",{staticClass:"literal"},[t._v("-u")]),t._v(" 选项，Git 也会贮藏任何未跟踪文件。\n然而，在贮藏中包含未跟踪的文件仍然不会包含明确 "),e("strong",[t._v("忽略")]),t._v(" 的文件。\n要额外包含忽略的文件，请使用 "),e("code",{staticClass:"literal"},[t._v("--all")]),t._v(" 或 "),e("code",{staticClass:"literal"},[t._v("-a")]),t._v(" 选项。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status -s\nM  index.html\n M lib/simplegit.rb\n?? new-file.txt\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git stash -u\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status -s\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")])])]),t._v(" "),e("p",[t._v("最终，如果指定了 "),e("code",{staticClass:"literal"},[t._v("--patch")]),t._v(" 标记，Git 不会贮藏所有修改过的任何东西，\n但是会交互式地提示哪些改动想要贮藏、哪些改动需要保存在工作目录中。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git stash --patch\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex 66d332e..8bb5674 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -16,6 +16,10 @@ class SimpleGit\n         return `#{git_cmd} 2>&1`.chomp\n       end\n     end\n+\n+    def show(treeish = 'master')\n+      command(\"git show #{treeish}\")\n+    end\n\n end\n test\nStash this hunk [y,n,q,a,d,/,e,?]? y\n\nSaved working directory and index state WIP on master: 1b65b17 added the index file")])]),t._v(" "),e("h2",{attrs:{id:"从贮藏创建一个分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从贮藏创建一个分支"}},[t._v("#")]),t._v(" 从贮藏创建一个分支")]),t._v(" "),e("p",[t._v("如果贮藏了一些工作，将它留在那儿了一会儿，然后继续在贮藏的分支上工作，在重新应用工作时可能会有问题。\n如果应用尝试修改刚刚修改的文件，你会得到一个合并冲突并不得不解决它。\n如果想要一个轻松的方式来再次测试贮藏的改动，可以运行 "),e("code",{staticClass:"literal"},[t._v("git stash branch <new branchname>")]),t._v("\n以你指定的分支名创建一个新分支，检出贮藏工作时所在的提交，重新在那应用工作，然后在应用成功后丢弃贮藏：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git stash branch testchanges\nM\tindex.html\nM\tlib/simplegit.rb\nSwitched to a new branch \'testchanges\'\nOn branch testchanges\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n\tmodified:   index.html\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n\tmodified:   lib/simplegit.rb\n\nDropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)')])]),t._v(" "),e("p",[t._v("这是在新分支轻松恢复贮藏工作并继续工作的一个很不错的途径。")]),t._v(" "),e("h2",{attrs:{id:"清理工作目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清理工作目录"}},[t._v("#")]),t._v(" 清理工作目录")]),t._v(" "),e("p",[t._v("对于工作目录中一些工作或文件，你想做的也许不是贮藏而是移除。\n"),e("code",{staticClass:"literal"},[t._v("git clean")]),t._v(" 命令就是用来干这个的。")]),t._v(" "),e("p",[t._v("清理工作目录有一些常见的原因，比如说为了移除由合并或外部工具生成的东西，\n或是为了运行一个干净的构建而移除之前构建的残留。")]),t._v(" "),e("p",[t._v("你需要谨慎地使用这个命令，因为它被设计为从工作目录中移除未被追踪的文件。\n如果你改变主意了，你也不一定能找回来那些文件的内容。\n一个更安全的选项是运行 "),e("code",{staticClass:"literal"},[t._v("git stash --all")]),t._v(" 来移除每一样东西并存放在栈中。")]),t._v(" "),e("p",[t._v("你可以使用 "),e("code",{staticClass:"literal"},[t._v("git clean")]),t._v(" 命令去除冗余文件或者清理工作目录。\n使用 "),e("code",{staticClass:"literal"},[t._v("git clean -f -d")]),t._v(" 命令来移除工作目录中所有未追踪的文件以及空的子目录。\n"),e("code",{staticClass:"literal"},[t._v("-f")]),t._v(" 意味着“强制（force）”或“确定要移除”，使用它需要 Git 配置变量 "),e("code",{staticClass:"literal"},[t._v("clean.requireForce")]),t._v(" 没有显式设置为 "),e("code",{staticClass:"literal"},[t._v("false")]),t._v("。")]),t._v(" "),e("p",[t._v("如果只是想要看看它会做什么，可以使用 "),e("code",{staticClass:"literal"},[t._v("--dry-run")]),t._v(" 或 "),e("code",{staticClass:"literal"},[t._v("-n")]),t._v(" 选项来运行命令，\n这意味着“做一次演习然后告诉你 "),e("strong",[t._v("将要")]),t._v(" 移除什么”。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clean -d -n\nWould remove test.o\nWould remove tmp/")])]),t._v(" "),e("p",[t._v("默认情况下，"),e("code",{staticClass:"literal"},[t._v("git clean")]),t._v(" 命令只会移除没有忽略的未跟踪文件。\n任何与 "),e("code",{staticClass:"literal"},[t._v(".gitiignore")]),t._v(" 或其他忽略文件中的模式匹配的文件都不会被移除。\n如果你也想要移除那些文件，例如为了做一次完全干净的构建而移除所有由构建生成的 "),e("code",{staticClass:"literal"},[t._v(".o")]),t._v(" 文件，\n可以给 clean 命令增加一个 "),e("code",{staticClass:"literal"},[t._v("-x")]),t._v(" 选项。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status -s\n M lib/simplegit.rb\n?? build.TMP\n?? tmp/\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clean -n -d\nWould remove build.TMP\nWould remove tmp/\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clean -n -d -x\nWould remove build.TMP\nWould remove test.o\nWould remove tmp/")])]),t._v(" "),e("p",[t._v("如果不知道 "),e("code",{staticClass:"literal"},[t._v("git clean")]),t._v(" 命令将会做什么，在将 "),e("code",{staticClass:"literal"},[t._v("-n")]),t._v(" 改为 "),e("code",{staticClass:"literal"},[t._v("-f")]),t._v(" 来真正做之前总是先用 "),e("code",{staticClass:"literal"},[t._v("-n")]),t._v(" 来运行它做双重检查。\n另一个小心处理过程的方式是使用 "),e("code",{staticClass:"literal"},[t._v("-i")]),t._v(" 或 “interactive” 标记来运行它。")]),t._v(" "),e("p",[t._v("这将会以交互模式运行 clean 命令。")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clean -x -i\nWould remove the following items:\n  build.TMP  test.o\n*** Commands ***\n    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit\n    6: help\nWhat now>")])]),t._v(" "),e("p",[t._v("这种方式下可以分别地检查每一个文件或者交互地指定删除的模式。")]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("在一种奇怪的情况下，可能需要格外用力才能让 Git 清理你的工作目录。\n如果你恰好在工作目录中复制或克隆了其他 Git 仓库（可能是子模块），那么即便是\n"),e("code",{staticClass:"literal"},[t._v("git clean -fd")]),t._v(" 都会拒绝删除这些目录。这种情况下，你需要加上第二个 "),e("code",{staticClass:"literal"},[t._v("-f")]),t._v(" 选项来强调。")])])])])}),[],!1,null,null,null);s.default=i.exports}}]);