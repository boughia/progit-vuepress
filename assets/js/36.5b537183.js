(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{271:function(t,a,s){t.exports=s.p+"assets/img/lifecycle.ecfc1dd9.png"},491:function(t,a,s){"use strict";s.r(a);var i=s(28),e=Object(i.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"记录每次更新到仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#记录每次更新到仓库"}},[t._v("#")]),t._v(" 记录每次更新到仓库")]),t._v(" "),i("p",[t._v("现在我们的机器上有了一个 "),i("strong",[t._v("真实项目")]),t._v(" 的 Git 仓库，并从这个仓库中检出了所有文件的 "),i("strong",[t._v("工作副本")]),t._v("。\n通常，你会对这些文件做些修改，每当完成了一个阶段的目标，想要将记录下它时，就将它提交到到仓库。")]),t._v(" "),i("p",[t._v("请记住，你工作目录下的每一个文件都不外乎这两种状态："),i("strong",[t._v("已跟踪")]),t._v(" 或 "),i("strong",[t._v("未跟踪")]),t._v("。\n已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，\n它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。")]),t._v(" "),i("p",[t._v("工作目录中除已跟踪文件外的其它所有文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。\n初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们，\n而你尚未编辑过它们。")]),t._v(" "),i("p",[t._v("编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。\n在工作时，你可以选择性地将这些修改过的文件放入暂存区，然后提交所有已暂存的修改，如此反复。")]),t._v(" "),i("figure",{staticClass:"image"},[i("div",{staticClass:"content"},[i("img",{attrs:{src:s(271),alt:"Git 下文件生命周期图。"}})]),t._v(" "),i("figcaption",[t._v("Figure 1. 文件的状态变化周期")])]),t._v(" "),i("h2",{attrs:{id:"检查当前文件状态"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#检查当前文件状态"}},[t._v("#")]),t._v(" 检查当前文件状态")]),t._v(" "),i("p",[t._v("可以用 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 命令查看哪些文件处于什么状态。\n如果在克隆仓库后立即使用此命令，会看到类似这样的输出：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean")])]),t._v(" "),i("p",[t._v("这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。\n此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。\n最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。\n现在，分支名是“master”,这是默认的分支名。\n我们在 "),i("a",{staticClass:"xref",attrs:{id:"xref--ch03-git-branching",href:"/chapter-3/index.html"}},[t._v("Git 分支")]),t._v(" 中会详细讨论分支和引用。")]),t._v(" "),i("p",[t._v("现在，让我们在项目下创建一个新的 "),i("code",{staticClass:"literal"},[t._v("README")]),t._v(" 文件。\n如果之前并不存在这个文件，使用 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 命令，你将看到一个新的未跟踪文件：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" echo "),i("span",{staticStyle:{"font-style":"italic"}},[t._v("'My Project'")]),t._v(" > README\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n    README\n\nnothing added to commit but untracked files present (use "git add" to track)')])]),t._v(" "),i("p",[t._v("在状态报告中可以看到新建的 "),i("code",{staticClass:"literal"},[t._v("README")]),t._v(" 文件出现在 "),i("code",{staticClass:"literal"},[t._v("Untracked files")]),t._v(" 下面。\n未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”。\n这样的处理让你不必担心将生成的二进制文件或其它不想被跟踪的文件包含进来。\n不过现在的例子中，我们确实想要跟踪管理 "),i("code",{staticClass:"literal"},[t._v("README")]),t._v(" 这个文件。")]),t._v(" "),i("h2",{attrs:{id:"跟踪新文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#跟踪新文件"}},[t._v("#")]),t._v(" 跟踪新文件")]),t._v(" "),i("p",[t._v("使用命令 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 开始跟踪一个文件。\n所以，要跟踪 "),i("code",{staticClass:"literal"},[t._v("README")]),t._v(" 文件，运行：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add README")])]),t._v(" "),i("p",[t._v("此时再运行 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 命令，会看到 "),i("code",{staticClass:"literal"},[t._v("README")]),t._v(" 文件已被跟踪，并处于暂存状态：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\n    new file:   README")])]),t._v(" "),i("p",[t._v("只要在 "),i("code",{staticClass:"literal"},[t._v("Changes to be committed")]),t._v(" 这行下面的，就说明是已暂存状态。\n如果此时提交，那么该文件在你运行 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 时的版本将被留存在后续的历史记录中。\n你可能会想起之前我们使用 "),i("code",{staticClass:"literal"},[t._v("git init")]),t._v(" 后就运行了 "),i("code",{staticClass:"literal"},[t._v("git add <files>")]),t._v(" 命令，开始跟踪当前目录下的文件。\n")]),i("p",[i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。")]),i("p"),t._v(" "),i("h2",{attrs:{id:"暂存已修改的文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#暂存已修改的文件"}},[t._v("#")]),t._v(" 暂存已修改的文件")]),t._v(" "),i("p",[t._v("现在我们来修改一个已被跟踪的文件。\n如果你修改了一个名为 "),i("code",{staticClass:"literal"},[t._v("CONTRIBUTING.md")]),t._v(" 的已被跟踪的文件，然后运行 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 命令，会看到下面内容：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    new file:   README\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md')])]),t._v(" "),i("p",[t._v("文件 "),i("code",{staticClass:"literal"},[t._v("CONTRIBUTING.md")]),t._v(" 出现在 "),i("code",{staticClass:"literal"},[t._v("Changes not staged for commit")]),t._v(" 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。\n要暂存这次更新，需要运行 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 命令。\n这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。\n将这个命令理解为“精确地将内容添加到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。\n现在让我们运行 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 将“CONTRIBUTING.md”放到暂存区，然后再看看 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 的输出：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add CONTRIBUTING.md\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    new file:   README\n    modified:   CONTRIBUTING.md")])]),t._v(" "),i("p",[t._v("现在两个文件都已暂存，下次提交时就会一并记录到仓库。\n假设此时，你想要在 "),i("code",{staticClass:"literal"},[t._v("CONTRIBUTING.md")]),t._v(" 里再加条注释。\n重新编辑存盘后，准备好提交。\n不过且慢，再运行 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 看看：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim CONTRIBUTING.md\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    new file:   README\n    modified:   CONTRIBUTING.md\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md')])]),t._v(" "),i("p",[t._v("怎么回事？\n现在 "),i("code",{staticClass:"literal"},[t._v("CONTRIBUTING.md")]),t._v(" 文件同时出现在暂存区和非暂存区。\n这怎么可能呢？\n好吧，实际上 Git 只不过暂存了你运行 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 命令时的版本。\n如果你现在提交，"),i("code",{staticClass:"literal"},[t._v("CONTRIBUTING.md")]),t._v(" 的版本是你最后一次运行 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 命令时的那个版本，而不是你运行 "),i("code",{staticClass:"literal"},[t._v("git commit")]),t._v(" 时，在工作目录中的当前版本。\n所以，运行了 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 之后又作了修订的文件，需要重新运行 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 把最新版本重新暂存起来：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add CONTRIBUTING.md\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    new file:   README\n    modified:   CONTRIBUTING.md")])]),t._v(" "),i("h2",{attrs:{id:"状态简览"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#状态简览"}},[t._v("#")]),t._v(" 状态简览")]),t._v(" "),i("p",[i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 命令的输出十分详细，但其用语有些繁琐。\nGit 有一个选项可以帮你缩短状态命令的输出，这样可以以简洁的方式查看更改。\n如果你使用 "),i("code",{staticClass:"literal"},[t._v("git status -s")]),t._v(" 命令或 "),i("code",{staticClass:"literal"},[t._v("git status --short")]),t._v(" 命令，你将得到一种格式更为紧凑的输出。")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt")])]),t._v(" "),i("p",[t._v("新添加的未跟踪文件前面有 "),i("code",{staticClass:"literal"},[t._v("??")]),t._v(" 标记，新添加到暂存区中的文件前面有 "),i("code",{staticClass:"literal"},[t._v("A")]),t._v(" 标记，修改过的文件前面有 "),i("code",{staticClass:"literal"},[t._v("M")]),t._v(" 标记。\n输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示：\n"),i("code",{staticClass:"literal"},[t._v("README")]),t._v(" 文件在工作区已修改但尚未暂存，而 "),i("code",{staticClass:"literal"},[t._v("lib/simplegit.rb")]),t._v(" 文件已修改且已暂存。\n"),i("code",{staticClass:"literal"},[t._v("Rakefile")]),t._v(" 文件已修，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。")]),t._v(" "),i("h2",{attrs:{id:"忽略文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),i("p",[t._v("一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。\n通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。\n在这种情况下，我们可以创建一个名为 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 的文件，列出要忽略的文件的模式。\n来看一个实际的 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 例子：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat .gitignore\n*.[oa]\n*~")])]),t._v(" "),i("p",[t._v("第一行告诉 Git 忽略所有以 "),i("code",{staticClass:"literal"},[t._v(".o")]),t._v(" 或 "),i("code",{staticClass:"literal"},[t._v(".a")]),t._v(" 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。\n第二行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。\n此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。\n要养成一开始就为你的新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。")]),t._v(" "),i("p",[t._v("文件 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 的格式规范如下：")]),t._v(" "),i("div",{staticClass:"itemized-list"},[i("ul",[i("li",[i("span",{staticClass:"principal"},[t._v("所有空行或者以 "),i("code",{staticClass:"literal"},[t._v("#")]),t._v(" 开头的行都会被 Git 忽略。")])]),t._v(" "),i("li",[i("span",{staticClass:"principal"},[t._v("可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。")])]),t._v(" "),i("li",[i("span",{staticClass:"principal"},[t._v("匹配模式可以以（"),i("code",{staticClass:"literal"},[t._v("/")]),t._v("）开头防止递归。")])]),t._v(" "),i("li",[i("span",{staticClass:"principal"},[t._v("匹配模式可以以（"),i("code",{staticClass:"literal"},[t._v("/")]),t._v("）结尾指定目录。")])]),t._v(" "),i("li",[i("span",{staticClass:"principal"},[t._v("要忽略指定模式以外的文件或目录，可以在模式前加上叹号（"),i("code",{staticClass:"literal"},[t._v("!")]),t._v("）取反。")])])])]),t._v(" "),i("p",[t._v("所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。\n星号（"),i("code",{staticClass:"literal"},[t._v("*")]),t._v("）匹配零个或多个任意字符；"),i("code",{staticClass:"literal"},[t._v("[abc]")]),t._v(" 匹配任何一个列在方括号中的字符\n（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；\n问号（"),i("code",{staticClass:"literal"},[t._v("?")]),t._v("）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，\n表示所有在这两个字符范围内的都可以匹配（比如 "),i("code",{staticClass:"literal"},[t._v("[0-9]")]),t._v(" 表示匹配所有 0 到 9 的数字）。\n使用两个星号（"),i("code",{staticClass:"literal"},[t._v("**")]),t._v("）表示匹配任意中间目录，比如 "),i("code",{staticClass:"literal"},[t._v("a/**/z")]),t._v(" 可以匹配 "),i("code",{staticClass:"literal"},[t._v("a/z")]),t._v(" 、 "),i("code",{staticClass:"literal"},[t._v("a/b/z")]),t._v(" 或 "),i("code",{staticClass:"literal"},[t._v("a/b/c/z")]),t._v(" 等。")]),t._v(" "),i("p",[t._v("我们再看一个 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件的例子：")]),t._v(" "),i("pre",{staticClass:"source language-"},[i("code",[t._v("# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf")])]),t._v(" "),i("aside",{staticClass:"admonition tip custom-block",attrs:{title:"Tip","epub:type":"help"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("GitHub 有一个十分详细的针对数十种项目及语言的 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件列表，\n你可以在 "),i("a",{staticClass:"link",attrs:{href:"https://github.com/github/gitignore"}},[t._v("https://github.com/github/gitignore")]),t._v(" 找到它。")])])]),t._v(" "),i("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("在最简单的情况下，一个仓库可能只根目录下有一个 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件，它递归地应用到整个仓库中。\n然而，子目录下也可以有额外的 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件。子目录中的 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件中的规则只作用于它所在的目录中。\n（Linux 内核的源码库拥有 206 个 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件。）")]),t._v(" "),i("p",[t._v("多个 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件的具体细节超出了本书的范围，更多详情见 "),i("code",{staticClass:"literal"},[t._v("man gitignore")]),t._v(" 。")])])]),t._v(" "),i("h2",{attrs:{id:"查看已暂存和未暂存的修改"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看已暂存和未暂存的修改"}},[t._v("#")]),t._v(" 查看已暂存和未暂存的修改")]),t._v(" "),i("p",[t._v("如果 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 命令的输出对于你来说过于简略，而你想知道具体修改了什么地方，可以用 "),i("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 命令。\n稍后我们会详细介绍 "),i("code",{staticClass:"literal"},[t._v("git diff")]),t._v("，你通常可能会用它来回答这两个问题：当前做的哪些更新尚未暂存？\n有哪些更新已暂存并准备好下次提交？\n虽然 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 已经通过在相应栏下列出文件名的方式回答了这个问题，但 "),i("code",{staticClass:"literal"},[t._v("git diff")]),t._v("\n能通过文件补丁的格式更加具体地显示哪些行发生了改变。")]),t._v(" "),i("p",[t._v("假如再次修改 README 文件后暂存，然后编辑 "),i("code",{staticClass:"literal"},[t._v("CONTRIBUTING.md")]),t._v(" 文件后先不暂存，\n运行 "),i("code",{staticClass:"literal"},[t._v("status")]),t._v(" 命令将会看到：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    modified:   README\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md')])]),t._v(" "),i("p",[t._v("要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 "),i("code",{staticClass:"literal"},[t._v("git diff")]),t._v("：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 8ebb991..643e24f 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -65,7 +65,8 @@ branch directly, things can get messy.\n Please include a nice description of your changes when you submit your PR;\n if we have to read the whole diff to figure out why you're contributing\n in the first place, you're less likely to get feedback and have your change\n-merged in.\n+merged in. Also, split your changes into comprehensive chunks if your patch is\n+longer than a dozen lines.\n\n If you are starting to work on a particular area, feel free to submit a PR\n that highlights your work in progress (and note in the PR title that it's")])]),t._v(" "),i("p",[t._v("此命令比较的是工作目录中当前文件和暂存区域快照之间的差异。\n也就是修改之后还没有暂存起来的变化内容。")]),t._v(" "),i("p",[t._v("若要查看已暂存的将要添加到下次提交里的内容，可以用 "),i("code",{staticClass:"literal"},[t._v("git diff --staged")]),t._v(" 命令。\n这条命令将比对已暂存文件与最后一次提交的文件差异：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff --staged\ndiff --git a/README b/README\nnew file mode 100644\nindex 0000000..03902a1\n--- /dev/null\n+++ b/README\n@@ -0,0 +1 @@\n+My Project")])]),t._v(" "),i("p",[t._v("请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。\n所以有时候你一下子暂存了所有更新过的文件，运行 "),i("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 后却什么也没有，就是这个原因。")]),t._v(" "),i("p",[t._v("像之前说的，暂存 "),i("code",{staticClass:"literal"},[t._v("CONTRIBUTING.md")]),t._v(" 后再编辑，可以使用 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 查看已被暂存的修改或未被暂存的修改。\n如果我们的环境（终端输出）看起来如下：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add CONTRIBUTING.md\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" echo "),i("span",{staticStyle:{"font-style":"italic"}},[t._v("'# test line'")]),t._v(" >> CONTRIBUTING.md\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    modified:   CONTRIBUTING.md\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md')])]),t._v(" "),i("p",[t._v("现在运行 "),i("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 看暂存前后的变化：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 643e24f..87f08c8 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -119,3 +119,4 @@ at the\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v(" #")]),i("span",{staticStyle:{"font-style":"italic"}},[t._v("# Starter Projects")]),t._v("\n\n See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).\n+# test line")])]),t._v(" "),i("p",[t._v("然后用 "),i("code",{staticClass:"literal"},[t._v("git diff --cached")]),t._v(" 查看已经暂存起来的变化（ "),i("code",{staticClass:"literal"},[t._v("--staged")]),t._v(" 和 "),i("code",{staticClass:"literal"},[t._v("--cached")]),t._v(" 是同义词）：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff --cached\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 8ebb991..643e24f 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -65,7 +65,8 @@ branch directly, things can get messy.\n Please include a nice description of your changes when you submit your PR;\n if we have to read the whole diff to figure out why you're contributing\n in the first place, you're less likely to get feedback and have your change\n-merged in.\n+merged in. Also, split your changes into comprehensive chunks if your patch is\n+longer than a dozen lines.\n\n If you are starting to work on a particular area, feel free to submit a PR\n that highlights your work in progress (and note in the PR title that it's")])]),t._v(" "),i("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: Git Diff 的插件版本","epub:type":"note"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("h2",[t._v("Git Diff 的插件版本")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("在本书中，我们使用 "),i("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 来分析文件差异。\n但是你也可以使用图形化的工具或外部 diff 工具来比较差异。\n可以使用 "),i("code",{staticClass:"literal"},[t._v("git difftool")]),t._v(" 命令来调用 emerge 或 vimdiff 等软件（包括商业软件）输出 diff 的分析结果。\n使用 "),i("code",{staticClass:"literal"},[t._v("git difftool --tool-help")]),t._v(" 命令来看你的系统支持哪些 Git Diff 插件。")])])]),t._v(" "),i("h2",{attrs:{id:"提交更新"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#提交更新"}},[t._v("#")]),t._v(" 提交更新")]),t._v(" "),i("p",[t._v("现在的暂存区已经准备就绪，可以提交了。\n在此之前，请务必确认还有什么已修改或新建的文件还没有 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 过，\n否则提交的时候不会记录这些尚未暂存的变化。\n这些已修改但未暂存的文件只会保留在本地磁盘。\n所以，每次准备提交前，先用 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 看下，你所需要的文件是不是都已暂存起来了，\n然后再运行提交命令 "),i("code",{staticClass:"literal"},[t._v("git commit")]),t._v("：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit")])]),t._v(" "),i("p",[t._v("这样会启动你选择的文本编辑器来输入提交说明。")]),t._v(" "),i("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("启动的编辑器是通过 Shell 的环境变量 "),i("code",{staticClass:"literal"},[t._v("EDITOR")]),t._v(" 指定的，一般为 vim 或 emacs。\n当然也可以按照 "),i("a",{staticClass:"xref",attrs:{id:"xref--ch01-getting-started",href:"/chapter-1/index.html"}},[t._v("起步")]),t._v(" 介绍的方式，\n使用 "),i("code",{staticClass:"literal"},[t._v("git config --global core.editor")]),t._v(" 命令设置你喜欢的编辑器。\n")])])]),t._v(" "),i("p",[t._v("编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）：")]),t._v(" "),i("pre",{staticClass:"source language-"},[i("code",[t._v("# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Your branch is up-to-date with 'origin/master'.\n#\n# Changes to be committed:\n#\tnew file:   README\n#\tmodified:   CONTRIBUTING.md\n#\n~\n~\n~\n\".git/COMMIT_EDITMSG\" 9L, 283C")])]),t._v(" "),i("p",[t._v("可以看到，默认的提交消息包含最后一次运行 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 的输出，放在注释行里，另外开头还有一个空行，供你输入提交说明。\n你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。")]),t._v(" "),i("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("div",{staticClass:"content"},[i("p",[t._v("更详细的内容修改提示可以用 "),i("code",{staticClass:"literal"},[t._v("-v")]),t._v(" 选项查看，这会将你所作的更改的\ndiff 输出呈现在编辑器中，以便让你知道本次提交具体作出哪些修改。")])])]),t._v(" "),i("p",[t._v("退出编辑器时，Git 会丢弃注释行，用你输入的提交说明生成一次提交。")]),t._v(" "),i("p",[t._v("另外，你也可以在 "),i("code",{staticClass:"literal"},[t._v("commit")]),t._v(" 命令后添加 "),i("code",{staticClass:"literal"},[t._v("-m")]),t._v(" 选项，将提交信息与命令放在同一行，如下所示：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -m "),i("span",{staticStyle:{"font-style":"italic"}},[t._v('"Story 182: Fix benchmarks for speed"')]),t._v("\n[master 463dc4f] Story 182: Fix benchmarks for speed\n 2 files changed, 2 insertions(+)\n create mode 100644 README")])]),t._v(" "),i("p",[t._v("好，现在你已经创建了第一个提交！\n可以看到，提交后它会告诉你，当前是在哪个分支（"),i("code",{staticClass:"literal"},[t._v("master")]),t._v("）提交的，本次提交的完整 SHA-1 校验和是什么（"),i("code",{staticClass:"literal"},[t._v("463dc4f")]),t._v("），以及在本次提交中，有多少文件修订过，多少行添加和删改过。")]),t._v(" "),i("p",[t._v("请记住，提交时记录的是放在暂存区域的快照。\n任何还未暂存文件的仍然保持已修改状态，可以在下次提交时纳入版本管理。\n每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。")]),t._v(" "),i("h2",{attrs:{id:"跳过使用暂存区域"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#跳过使用暂存区域"}},[t._v("#")]),t._v(" 跳过使用暂存区域")]),t._v(" "),i("p",[t._v("\n尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。\nGit 提供了一个跳过使用暂存区域的方式，\n只要在提交的时候，给 "),i("code",{staticClass:"literal"},[t._v("git commit")]),t._v(" 加上 "),i("code",{staticClass:"literal"},[t._v("-a")]),t._v(" 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 步骤：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md\n\nno changes added to commit (use "git add" and/or "git commit -a")\n'),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -a -m "),i("span",{staticStyle:{"font-style":"italic"}},[t._v("'added new benchmarks'")]),t._v("\n[master 83e38c7] added new benchmarks\n 1 file changed, 5 insertions(+), 0 deletions(-)")])]),t._v(" "),i("p",[t._v("看到了吗？提交之前不再需要 "),i("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 文件“CONTRIBUTING.md”了。\n这是因为 "),i("code",{staticClass:"literal"},[t._v("-a")]),t._v(" 选项使本次提交包含了所有修改过的文件。\n这很方便，但是要小心，有时这个选项会将不需要的文件添加到提交中。")]),t._v(" "),i("h2",{attrs:{id:"移除文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#移除文件"}},[t._v("#")]),t._v(" 移除文件")]),t._v(" "),i("p",[t._v("\n要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。\n可以用 "),i("code",{staticClass:"literal"},[t._v("git rm")]),t._v(" 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。")]),t._v(" "),i("p",[t._v("如果只是简单地从工作目录中手工删除文件，运行 "),i("code",{staticClass:"literal"},[t._v("git status")]),t._v(" 时就会在\n“Changes not staged for commit” 部分（也就是 "),i("em",[t._v("未暂存清单")]),t._v("）看到：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" rm PROJECTS.md\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'.\nChanges not staged for commit:\n  (use "git add/rm <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n        deleted:    PROJECTS.md\n\nno changes added to commit (use "git add" and/or "git commit -a")')])]),t._v(" "),i("p",[t._v("然后再运行 "),i("code",{staticClass:"literal"},[t._v("git rm")]),t._v(" 记录此次移除文件的操作：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rm PROJECTS.md\nrm 'PROJECTS.md'\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    deleted:    PROJECTS.md")])]),t._v(" "),i("p",[t._v("下一次提交时，该文件就不再纳入版本管理了。\n如果要删除之前修改过或已经放到暂存区的文件，则必须使用强制删除选项 "),i("code",{staticClass:"literal"},[t._v("-f")]),t._v("（译注：即 force 的首字母）。\n这是一种安全特性，用于防止误删尚未添加到快照的数据，这样的数据不能被 Git 恢复。")]),t._v(" "),i("p",[t._v("另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。\n换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。\n当你忘记添加 "),i("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件，不小心把一个很大的日志文件或一堆 "),i("code",{staticClass:"literal"},[t._v(".a")]),t._v(" 这样的编译生成文件添加到暂存区时，这一做法尤其有用。\n为达到这一目的，使用 "),i("code",{staticClass:"literal"},[t._v("--cached")]),t._v(" 选项：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rm --cached README")])]),t._v(" "),i("p",[i("code",{staticClass:"literal"},[t._v("git rm")]),t._v(" 命令后面可以列出文件或者目录的名字，也可以使用 "),i("code",{staticClass:"literal"},[t._v("glob")]),t._v(" 模式。比如：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rm log/"),i("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\*")]),t._v(".log")])]),t._v(" "),i("p",[t._v("注意到星号 "),i("code",{staticClass:"literal"},[t._v("*")]),t._v(" 之前的反斜杠 "),i("code",{staticClass:"literal"},[t._v("\\")]),t._v("，\n因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。\n此命令删除 "),i("code",{staticClass:"literal"},[t._v("log/")]),t._v(" 目录下扩展名为 "),i("code",{staticClass:"literal"},[t._v(".log")]),t._v(" 的所有文件。\n类似的比如：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rm "),i("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\*")]),t._v("~")])]),t._v(" "),i("p",[t._v("该命令会删除所有名字以 "),i("code",{staticClass:"literal"},[t._v("~")]),t._v(" 结尾的文件。")]),t._v(" "),i("h2",{attrs:{id:"移动文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#移动文件"}},[t._v("#")]),t._v(" 移动文件")]),t._v(" "),i("p",[t._v("\n不像其它的 VCS 系统，Git 并不显式跟踪文件移动操作。\n如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。\n不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。")]),t._v(" "),i("p",[t._v("既然如此，当你看到 Git 的 "),i("code",{staticClass:"literal"},[t._v("mv")]),t._v(" 命令时一定会困惑不已。\n要在 Git 中对文件改名，可以这么做：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git mv file_from file_to")])]),t._v(" "),i("p",[t._v("它会恰如预期般正常工作。\n实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git mv README.md README\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    renamed:    README.md -> README")])]),t._v(" "),i("p",[t._v("其实，运行 "),i("code",{staticClass:"literal"},[t._v("git mv")]),t._v(" 就相当于运行了下面三条命令：")]),t._v(" "),i("pre",{staticClass:"language-bash"},[i("code",[i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" mv README.md README\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rm README.md\n"),i("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git add README")])]),t._v(" "),i("p",[t._v("如此分开操作，Git 也会意识到这是一次重命名，所以不管何种方式结果都一样。\n两者唯一的区别是，"),i("code",{staticClass:"literal"},[t._v("mv")]),t._v(" 是一条命令而非三条命令，直接用 "),i("code",{staticClass:"literal"},[t._v("git mv")]),t._v(" 方便得多。\n不过有时候用其他工具批处理重命名的话，要记得在提交前删除旧的文件名，再添加新的文件名。")])])}),[],!1,null,null,null);a.default=e.exports}}]);