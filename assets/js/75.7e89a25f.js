(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{487:function(t,a,s){"use strict";s.r(a);var e=s(28),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),s("p",[t._v("Git 总是在一个 "),s("code",{staticClass:"literal"},[t._v("bash")]),t._v(" shell 中运行，并借助一些 shell 环境变量来决定它的运行方式。\n有时候，知道它们是什么以及它们如何让 Git 按照你想要的方式去运行会很有用。\n这里不会列出所有的 Git 环境变量，但我们会涉及最有的那部分。")]),t._v(" "),s("h2",{attrs:{id:"全局行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局行为"}},[t._v("#")]),t._v(" 全局行为")]),t._v(" "),s("p",[t._v("像通常的程序一样，Git 的常规行为依赖于环境变量。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_EXEC_PATH")])]),t._v(" 决定 Git 到哪找它的子程序 （像 "),s("code",{staticClass:"literal"},[t._v("git-commit")]),t._v(", "),s("code",{staticClass:"literal"},[t._v("git-diff")]),t._v(" 等等）。\n  你可以用 "),s("code",{staticClass:"literal"},[t._v("git --exec-path")]),t._v(" 来查看当前设置。")]),t._v(" "),s("p",[t._v("通常不会考虑修改 "),s("strong",[s("code",{staticClass:"literal"},[t._v("HOME")])]),t._v(" 这个变量（太多其它东西都依赖它），这是 Git 查找全局配置文件的地方。\n  如果你想要一个包括全局配置的真正的便携版 Git， 你可以在便携版 Git 的 shell 配置中覆盖 "),s("code",{staticClass:"literal"},[t._v("HOME")]),t._v(" 设置。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("PREFIX")])]),t._v(" 也类似，除了用于系统级别的配置。\n  Git 在 "),s("code",{staticClass:"literal"},[t._v("$PREFIX/etc/gitconfig")]),t._v(" 查找此文件。")]),t._v(" "),s("p",[t._v("如果设置了 "),s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_CONFIG_NOSYSTEM")])]),t._v("，就禁用系统级别的配置文件。\n  这在系统配置影响了你的命令，而你又无权限修改的时候很有用。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_PAGER")])]),t._v(" 控制在命令行上显示多页输出的程序。\n如果这个没有设置，就会用 "),s("code",{staticClass:"literal"},[t._v("PAGER")]),t._v(" 。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_EDITOR")])]),t._v(" 当用户需要编辑一些文本（比如提交信息）时， Git 会启动这个编辑器。\n如果没设置，就会用 "),s("code",{staticClass:"literal"},[t._v("EDITOR")]),t._v(" 。")]),t._v(" "),s("h2",{attrs:{id:"版本库位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本库位置"}},[t._v("#")]),t._v(" 版本库位置")]),t._v(" "),s("p",[t._v("Git 用了几个变量来确定它如何与当前版本库交互。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_DIR")])]),t._v(" 是 "),s("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 目录的位置。\n如果这个没有设置， Git 会按照目录树逐层向上查找 "),s("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 目录，直到到达 "),s("code",{staticClass:"literal"},[t._v("~")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v("/")]),t._v("。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_CEILING_DIRECTORIES")])]),t._v(" 控制查找 "),s("code",{staticClass:"literal"},[t._v(".git")]),t._v(" 目录的行为。\n如果你访问加载很慢的目录（如那些磁带机上的或通过网络连接访问的），你可能会想让 Git 早点停止尝试，尤其是 shell 构建时调用了 Git 。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_WORK_TREE")])]),t._v(" 是非空版本库的工作目录的根路径。\n如果指定了 "),s("code",{staticClass:"literal"},[t._v("--git-dir")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v("GIT_DIR")]),t._v(" 但未指定 "),s("code",{staticClass:"literal"},[t._v("--work-tree")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("GIT_WORK_TREE")]),t._v(" 或\n"),s("code",{staticClass:"literal"},[t._v("core.worktree")]),t._v("，那么当前工作目录就会视作工作树的顶级目录。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_INDEX_FILE")])]),t._v(" 是索引文件的路径（只有非空版本库有）。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_OBJECT_DIRECTORY")])]),t._v(" 用来指定 "),s("code",{staticClass:"literal"},[t._v(".git/objects")]),t._v(" 目录的位置。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_ALTERNATE_OBJECT_DIRECTORIES")])]),t._v(" 一个冒号分割的列表（格式类似 "),s("code",{staticClass:"literal"},[t._v("/dir/one:/dir/two:…")]),t._v("）用来告诉 Git 到哪里去找不在 "),s("code",{staticClass:"literal"},[t._v("GIT_OBJECT_DIRECTORY")]),t._v(" 目录中的对象。\n如果你有很多项目有相同内容的大文件，这个可以用来避免存储过多备份。")]),t._v(" "),s("h2",{attrs:{id:"路径规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径规则"}},[t._v("#")]),t._v(" 路径规则")]),t._v(" "),s("p",[t._v("所谓 “pathspec” 是指你在 Git 中如何指定路径，包括通配符的使用。\n它们会在 "),s("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件中用到，命令行里也会用到（"),s("code",{staticClass:"literal"},[t._v("git add *.c")]),t._v("）。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_GLOB_PATHSPECS")])]),t._v(" 和 "),s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_NOGLOB_PATHSPECS")])]),t._v(" 控制通配符在路径规则中的默认行为。\n如果 "),s("code",{staticClass:"literal"},[t._v("GIT_GLOB_PATHSPECS")]),t._v(" 设置为 1, 通配符表现为通配符（这是默认设置）; 如果 "),s("code",{staticClass:"literal"},[t._v("GIT_NOGLOB_PATHSPECS")]),t._v(" 设置为 1,通配符仅匹配字面。意思是 "),s("code",{staticClass:"literal"},[t._v("*.c")]),t._v(" 只会匹配 "),s("em",[t._v("文件名是")]),t._v(" “*.c” 的文件，而不是以 "),s("code",{staticClass:"literal"},[t._v(".c")]),t._v(" 结尾的文件。\n你可以在各个路径规范中用 "),s("code",{staticClass:"literal"},[t._v(":(glob)")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v(":(literal)")]),t._v(" 开头来覆盖这个配置，如 "),s("code",{staticClass:"literal"},[t._v(":(glob)*.c")]),t._v(" 。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_LITERAL_PATHSPECS")])]),t._v(" 禁用上面的两种行为；通配符将不能用，前缀覆盖也不能用。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_ICASE_PATHSPECS")])]),t._v(" 让所有的路径规范忽略大小写。")]),t._v(" "),s("h2",{attrs:{id:"提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交"}},[t._v("#")]),t._v(" 提交")]),t._v(" "),s("p",[t._v("Git 提交对象的创建通常最后是由 "),s("code",{staticClass:"literal"},[t._v("git-commit-tree")]),t._v(" 来完成， "),s("code",{staticClass:"literal"},[t._v("git-commit-tree")]),t._v(" 用这些环境变量作主要的信息源。 仅当这些值不存在才回退到预置的值。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_AUTHOR_NAME")])]),t._v(" 是 “author” 字段的可读名字。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_AUTHOR_EMAIL")])]),t._v(" 是 “author” 字段的邮件。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_AUTHOR_DATE")])]),t._v(" 是 “author” 字段的时间戳。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_COMMITTER_NAME")])]),t._v(" 是 “committer” 字段的可读名字。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_COMMITTER_EMAIL")])]),t._v(" 是 “committer” 字段的邮件。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_COMMITTER_DATE")])]),t._v(" 是 “committer” 字段的时间戳。")]),t._v(" "),s("p",[t._v("如果 "),s("code",{staticClass:"literal"},[t._v("user.email")]),t._v(" 没有配置， 就会用到 "),s("strong",[s("code",{staticClass:"literal"},[t._v("EMAIL")])]),t._v(" 指定的邮件地址。\n如果 "),s("em",[t._v("这个")]),t._v(" 也没有设置， Git 继续回退使用系统用户和主机名。")]),t._v(" "),s("h2",{attrs:{id:"网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),s("p",[t._v("Git 使用 "),s("code",{staticClass:"literal"},[t._v("curl")]),t._v(" 库通过 HTTP 来完成网络操作， 所以 "),s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_CURL_VERBOSE")])]),t._v(" 告诉 Git 显示所有由那个库产生的消息。\n这跟在命令行执行 "),s("code",{staticClass:"literal"},[t._v("curl -v")]),t._v(" 差不多。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_SSL_NO_VERIFY")])]),t._v(" 告诉 Git 不用验证 SSL 证书。\n这在有些时候是需要的， 例如你用一个自己签名的证书通过 HTTPS 来提供 Git 服务， 或者你正在搭建 Git 服务器，还没有安装完全的证书。")]),t._v(" "),s("p",[t._v("如果 Git 操作在网速低于 "),s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_HTTP_LOW_SPEED_LIMIT")])]),t._v(" 字节／秒，并且持续 "),s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_HTTP_LOW_SPEED_TIME")])]),t._v(" 秒以上的时间，Git 会终止那个操作。\n这些值会覆盖 "),s("code",{staticClass:"literal"},[t._v("http.lowSpeedLimit")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("http.lowSpeedTime")]),t._v(" 配置的值。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_HTTP_USER_AGENT")])]),t._v(" 设置 Git 在通过 HTTP 通讯时用到的 user-agent。\n默认值类似于 "),s("code",{staticClass:"literal"},[t._v("git/2.0.0")]),t._v(" 。")]),t._v(" "),s("h2",{attrs:{id:"比较和合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较和合并"}},[t._v("#")]),t._v(" 比较和合并")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_DIFF_OPTS")])]),t._v(" 这个有点起错名字了。\n有效值仅支持 "),s("code",{staticClass:"literal"},[t._v("-u<n>")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v("--unified=<n>")]),t._v("，用来控制在 "),s("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 命令中显示的内容行数。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_EXTERNAL_DIFF")])]),t._v(" 用来覆盖 "),s("code",{staticClass:"literal"},[t._v("diff.external")]),t._v(" 配置的值。\n如果设置了这个值， 当执行 "),s("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 时，Git 会调用该程序。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_DIFF_PATH_COUNTER")])]),t._v(" 和 "),s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_DIFF_PATH_TOTAL")])]),t._v(" 对于 "),s("code",{staticClass:"literal"},[t._v("GIT_EXTERNAL_DIFF")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v("diff.external")]),t._v(" 指定的程序有用。\n前者表示在一系列文件中哪个是被比较的（从 1 开始），后者表示每批文件的总数。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_MERGE_VERBOSITY")])]),t._v(" 控制递归合并策略的输出。\n允许的值有下面这些：")]),t._v(" "),s("div",{staticClass:"itemized-list"},[s("ul",[s("li",[s("span",{staticClass:"principal"},[t._v("0 什么都不输出，除了可能会有一个错误信息。")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("1 只显示冲突。")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("2 还显示文件改变。")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("3 显示因为没有改变被跳过的文件。")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("4 显示处理的所有路径。")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("5 显示详细的调试信息。")])])])]),t._v(" "),s("p",[t._v("默认值是 2。")]),t._v(" "),s("h2",{attrs:{id:"调试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[t._v("#")]),t._v(" 调试")]),t._v(" "),s("p",[t._v("想 "),s("em",[t._v("真正地")]),t._v(" 知道 Git 正在做什么?\nGit 内置了相当完整的跟踪信息，你需要做的就是把它们打开。\n这些变量的可用值如下：")]),t._v(" "),s("div",{staticClass:"itemized-list"},[s("ul",[s("li",[s("span",{staticClass:"principal"},[t._v("“true”“1” 或 “2”——跟踪类别写到标准错误输出。")])]),t._v(" "),s("li",[s("span",{staticClass:"principal"},[t._v("以 "),s("code",{staticClass:"literal"},[t._v("/")]),t._v(" 开头的绝对路径——跟踪输出会被写到那个文件。")])])])]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_TRACE")])]),t._v(" 控制常规跟踪，它并不适用于特殊情况。\n它跟踪的范围包括别名的展开和其他子程序的委托。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" GIT_TRACE=true git lga\n20:12:49.877982 git.c:554               trace: exec: 'git-lga'\n20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'\n20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'\n20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'\n20:12:49.899217 run-command.c:341       trace: run_command: 'less'\n20:12:49.899675 run-command.c:192       trace: exec: 'less'")])]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_TRACE_PACK_ACCESS")])]),t._v(" 控制访问打包文件的跟踪信息。\n第一个字段是被访问的打包文件，第二个是文件的偏移量：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" GIT_TRACE_PACK_ACCESS=true git status\n20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12\n20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662\n20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" […]\n20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983\n20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean")])]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_TRACE_PACKET")])]),t._v(" 打开网络操作包级别的跟踪信息。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" GIT_TRACE_PACKET=true git ls-remote origin\n20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack\n20:15:14.867071 pkt-line.c:46           packet:          git< 0000\n20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4\n20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name\n20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" […]")])]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_TRACE_PERFORMANCE")])]),t._v(" 控制性能数据的日志打印。\n输出显示了每个 "),s("code",{staticClass:"literal"},[t._v("git")]),t._v(" 命令调用花费的时间。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" GIT_TRACE_PERFORMANCE=true git gc\n20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'\n20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'\nCounting objects: 170994, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (43413/43413), done.\nWriting objects: 100% (170994/170994), done.\nTotal 170994 (delta 126176), reused 170524 (delta 125706)\n20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'\n20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'\n20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'\n20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'\nChecking connectivity: 170994, done.\n20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'\n20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'\n20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'")])]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_TRACE_SETUP")])]),t._v(" 显示 Git 发现的关于版本库和交互环境的信息。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" GIT_TRACE_SETUP=true git status\n20:19:47.086765 trace.c:315             setup: git_dir: .git\n20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git\n20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git\n20:19:47.087194 trace.c:318             setup: prefix: (null)\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean")])]),t._v(" "),s("h2",{attrs:{id:"其它"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),s("p",[t._v("如果指定了 "),s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_SSH")])]),t._v("， Git 连接 SSH 主机时会用指定的程序代替 "),s("code",{staticClass:"literal"},[t._v("ssh")]),t._v(" 。\n它会被用 "),s("code",{staticClass:"literal"},[t._v("$GIT_SSH [username@]host [-p <port>] <command>")]),t._v(" 的命令方式调用。\n这不是配置定制 "),s("code",{staticClass:"literal"},[t._v("ssh")]),t._v(" 调用方式的最简单的方法; 它不支持额外的命令行参数， 所以你必须写一个封装脚本然后让 "),s("code",{staticClass:"literal"},[t._v("GIT_SSH")]),t._v(" 指向它。\n可能用 "),s("code",{staticClass:"literal"},[t._v("~/.ssh/config")]),t._v(" 会更简单。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_ASKPASS")])]),t._v(" 覆盖了 "),s("code",{staticClass:"literal"},[t._v("core.askpass")]),t._v(" 配置。\n这是 Git 需要向用户请求验证时用到的程序，它接受一个文本提示作为命令行参数，并在 "),s("code",{staticClass:"literal"},[t._v("stdout")]),t._v(" 中返回应答。\n（查看 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_credential_caching",href:"/chapter-7/14.html#凭证存储"}},[t._v("凭证存储")]),t._v(" 访问更多相关内容）")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_NAMESPACE")])]),t._v(" 控制有命令空间的引用的访问，与 "),s("code",{staticClass:"literal"},[t._v("--namespace")]),t._v(" 标志是相同的。\n这主要在服务器端有用， 如果你想在一个版本库中存储单个版本库的多个 fork, 只要保持引用是隔离的就可以。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_FLUSH")])]),t._v(" 强制 Git 在向标准输出增量写入时使用没有缓存的 I/O。\n设置为 1 让 Git 刷新更多， 设置为 0 则使所有的输出被缓存。\n默认值（若此变量未设置）是根据活动和输出模式的不同选择合适的缓存方案。")]),t._v(" "),s("p",[s("strong",[s("code",{staticClass:"literal"},[t._v("GIT_REFLOG_ACTION")])]),t._v(" 让你可以指定描述性的文字写到 reflog 中。\n这有个例子：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" GIT_REFLOG_ACTION="),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"my action"')]),t._v(" git commit --allow-empty -m "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("'my message'")]),t._v("\n[master 9e3d55a] my message\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git reflog -1\n9e3d55a HEAD@{0}: my action: my message")])])])}),[],!1,null,null,null);a.default=i.exports}}]);