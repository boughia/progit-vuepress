(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{550:function(t,a,e){"use strict";e.r(a);var s=e(28),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"迁移到-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迁移到-git"}},[t._v("#")]),t._v(" 迁移到 Git")]),t._v(" "),e("p",[t._v("\n如果你现在有一个正在使用其他 VCS 的代码库，但是你已经决定开始使用 Git，必须通过某种方式将你的项目迁移至 Git。\n这一部分会介绍一些通用系统的导入器，然后演示如何开发你自己定制的导入器。\n你将会学习如何从几个大型专业应用的 SCM 系统中导入数据，不仅因为它们是大多数想要转换的用户正在使用的系统，也因为获取针对它们的高质量工具很容易。")]),t._v(" "),e("h2",{attrs:{id:"subversion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subversion"}},[t._v("#")]),t._v(" Subversion")]),t._v(" "),e("p"),e("p",[t._v("如果你阅读过前面关于 "),e("code",{staticClass:"literal"},[t._v("git svn")]),t._v(" 的章节，可以轻松地使用那些指令来 "),e("code",{staticClass:"literal"},[t._v("git svn clone")]),t._v(" 一个仓库，停止使用 Subversion 服务器，推送到一个新的 Git 服务器，然后就可以开始使用了。\n如果你想要历史，可以从 Subversion 服务器上尽可能快地拉取数据来完成这件事（这可能会花费一些时间）。")]),t._v(" "),e("p",[t._v("然而，导入并不完美；因为花费太长时间了，你可能早已用其他方法完成导入操作。\n导入产生的第一个问题就是作者信息。\n在 Subversion 中，每一个人提交时都需要在系统中有一个用户，它会被记录在提交信息内。\n在之前章节的例子中几个地方显示了 "),e("code",{staticClass:"literal"},[t._v("schacon")]),t._v("，比如 "),e("code",{staticClass:"literal"},[t._v("blame")]),t._v(" 输出与 "),e("code",{staticClass:"literal"},[t._v("git svn log")]),t._v("。\n如果想要将上面的 Subversion 用户映射到一个更好的 Git 作者数据中，你需要一个 Subversion 用户到 Git 用户的映射。\n创建一个 "),e("code",{staticClass:"literal"},[t._v("users.txt")]),t._v(" 的文件包含像下面这种格式的映射：")]),e("p"),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v("schacon = Scott Chacon <schacon@geemail.com>\nselse = Someo Nelse <selse@geemail.com>")])]),t._v(" "),e("p",[t._v("为了获得 SVN 使用的作者名字列表，可以运行这个：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" svn log --xml --quiet | grep author | sort -u | "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n  perl -pe "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'s/.*>(.*?)<.*/$1 = /'")])])]),t._v(" "),e("p",[t._v("这会将日志输出为 XML 格式，然后保留作者信息行、去除重复、去除 XML 标记。\n很显然这只会在安装了 "),e("code",{staticClass:"literal"},[t._v("grep")]),t._v("、"),e("code",{staticClass:"literal"},[t._v("sort")]),t._v(" 与 "),e("code",{staticClass:"literal"},[t._v("perl")]),t._v(" 的机器上运行。\n然后，将输出重定向到你的 "),e("code",{staticClass:"literal"},[t._v("users.txt")]),t._v(" 文件中，这样就可以在每一个记录后面加入对应的 Git 用户数据。")]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("如果你在 Windows 上运行它，那么到这里就会遇到问题。微软提供了一些不错的建议和示例：\n"),e("a",{staticClass:"link",attrs:{href:"https://docs.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git"}},[t._v("https://docs.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git")]),t._v(".")])])]),t._v(" "),e("p",[t._v("你可以将此文件提供给 "),e("code",{staticClass:"literal"},[t._v("git svn")]),t._v(" 来帮助它更加精确地映射作者数据。\n也可以通过传递 "),e("code",{staticClass:"literal"},[t._v("--no-metadata")]),t._v(" 给 "),e("code",{staticClass:"literal"},[t._v("clone")]),t._v(" 与 "),e("code",{staticClass:"literal"},[t._v("init")]),t._v(" 命令，告诉 "),e("code",{staticClass:"literal"},[t._v("git svn")]),t._v(" 不要包括\nSubversion 通常会导入的元数据。在导入过程中，Git 会在每个提交说明的元数据中生成一个\n"),e("code",{staticClass:"literal"},[t._v("git-svn-id")]),t._v("。")]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("当你想要将 Git 仓库中的提交镜像回原 SVN 仓库中时，需要保留元数据。\n如果你不想在提交记录中同步它，请直接省略掉 "),e("code",{staticClass:"literal"},[t._v("--no-metadata")]),t._v(" 选项。")])])]),t._v(" "),e("p",[t._v("这会使你的 "),e("code",{staticClass:"literal"},[t._v("import")]),t._v(" 命令看起来像这样：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git svn clone http://my-project.googlecode.com/svn/ "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n      --authors-file=users.txt --no-metadata --prefix "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('""')]),t._v(" -s my_project\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd my_project")])]),t._v(" "),e("p",[t._v("现在在 "),e("code",{staticClass:"literal"},[t._v("my_project")]),t._v(" 目录中应当有了一个更好的 Subversion 导入。\n并不像是下面这样的提交：")]),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v("commit 37efa680e8473b615de980fa935944215428a35a\nAuthor: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>\nDate:   Sun May 3 00:12:22 2009 +0000\n\n    fixed install - go to trunk\n\n    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-\n    be05-5f7a86268029")])]),t._v(" "),e("p",[t._v("反而它们看起来像是这样：")]),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v("commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2\nAuthor: Scott Chacon <schacon@geemail.com>\nDate:   Sun May 3 00:12:22 2009 +0000\n\n    fixed install - go to trunk")])]),t._v(" "),e("p",[t._v("不仅是 Author 字段更好看了，"),e("code",{staticClass:"literal"},[t._v("git-svn-id")]),t._v(" 也不在了。")]),t._v(" "),e("p",[t._v("之后，你应当做一些导入后的清理工作。\n第一步，你应当清理 "),e("code",{staticClass:"literal"},[t._v("git svn")]),t._v(" 设置的奇怪的引用。\n首先移动标签，这样它们就是标签而不是奇怪的远程引用，然后你会移动剩余的分支这样它们就是本地的了。")]),t._v(" "),e("p",[t._v("为了将标签变为合适的 Git 标签，运行：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("for")]),t._v(" t in "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$(")]),t._v("git "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("for")]),t._v("-each-ref --format="),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'%(refname:short)'")]),t._v(" refs/remotes/tags"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v(")")]),t._v("; "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" git tag "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("${")]),t._v("t/tags"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\/")]),t._v("/"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),t._v(" $t && git branch -D -r $t; "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("done")])])]),t._v(" "),e("p",[t._v("这会使原来在 "),e("code",{staticClass:"literal"},[t._v("refs/remotes/tags/")]),t._v(" 里的远程分支引用变成真正的（轻量）标签。")]),t._v(" "),e("p",[t._v("接下来，将 "),e("code",{staticClass:"literal"},[t._v("refs/remotes")]),t._v(" 下剩余的引用移动为本地分支：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("for")]),t._v(" b in "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$(")]),t._v("git "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("for")]),t._v("-each-ref --format="),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'%(refname:short)'")]),t._v(" refs/remotes"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v(")")]),t._v("; "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" git branch $b refs/remotes/$b && git branch -D -r $b; "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("done")])])]),t._v(" "),e("p",[t._v("It may happen that you’ll see some extra branches which are suffixed by "),e("code",{staticClass:"literal"},[t._v("@xxx")]),t._v(" (where xxx is a number), while in Subversion you only see one branch.\nThis is actually a Subversion feature called “peg-revisions”, which is something that Git simply has no syntactical counterpart for.\nHence, "),e("code",{staticClass:"literal"},[t._v("git svn")]),t._v(" simply adds the svn version number to the branch name just in the same way as you would have written it in svn to address the peg-revision of that branch.\nIf you do not care anymore about the peg-revisions, simply remove them:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("for")]),t._v(" p in "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$(")]),t._v("git "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("for")]),t._v("-each-ref --format="),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'%(refname:short)'")]),t._v(" | grep @"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v(")")]),t._v("; "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" git branch -D $p; "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("done")])])]),t._v(" "),e("p",[t._v("现在所有的旧分支都是真正的 Git 分支，并且所有的旧标签都是真正的 Git 标签。")]),t._v(" "),e("p",[t._v("还有最后一点东西需要清理。"),e("code",{staticClass:"literal"},[t._v("git svn")]),t._v(" 会创建一个名为 "),e("code",{staticClass:"literal"},[t._v("trunk")]),t._v(" 的额外分支，它对应于\nSubversion 的默认分支，然而 "),e("code",{staticClass:"literal"},[t._v("trunk")]),t._v(" 引用和 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 指向同一个位置。\n鉴于在 Git 中 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 最为常用，因此我们可以移除额外的分支：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git branch -d trunk")])]),t._v(" "),e("p",[t._v("最后一件要做的事情是，将你的新 Git 服务器添加为远程仓库并推送到上面。\n下面是一个将你的服务器添加为远程仓库的例子：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git remote add origin git@my-git-server:myrepository.git")])]),t._v(" "),e("p",[t._v("因为想要上传所有分支与标签，你现在可以运行：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin --all\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin --tags")])]),t._v(" "),e("p",[t._v("通过以上漂亮、干净地导入操作，你的所有分支与标签都应该在新 Git 服务器上。")]),t._v(" "),e("h2",{attrs:{id:"mercurial"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mercurial"}},[t._v("#")]),t._v(" Mercurial")]),t._v(" "),e("p",[t._v("\n因为 Mercurial 与 Git 在表示版本时有着非常相似的模型，也因为 Git 拥有更加强大的灵活性，将一个仓库从 Mercurial 转换到 Git 是相当直接的，使用一个叫作“hg-fast-export”的工具，需要从这里拷贝一份：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone https://github.com/frej/fast-export.git")])]),t._v(" "),e("p",[t._v("转换的第一步就是要先得到想要转换的 Mercurial 仓库的完整克隆：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" hg clone <remote repo URL> /tmp/hg-repo")])]),t._v(" "),e("p",[t._v("下一步就是创建一个作者映射文件。\nMercurial 对放入到变更集作者字段的内容比 Git 更宽容一些，所以这是一个清理的好机会。\n只需要用到 "),e("code",{staticClass:"literal"},[t._v("bash")]),t._v(" 终端下的一行命令：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /tmp/hg-repo\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" hg log | grep user: | sort | uniq | sed "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'s/user: *//'")]),t._v(" > ../authors")])]),t._v(" "),e("p",[t._v("这会花费几秒钟，具体要看项目提交历史有多少，最终 "),e("code",{staticClass:"literal"},[t._v("/tmp/authors")]),t._v(" 文件看起来会像这样：")]),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v("bob\nbob@localhost\nbob <bob@company.com>\nbob jones <bob <AT> company <DOT> com>\nBob Jones <bob@company.com>\nJoe Smith <joe@company.com>")])]),t._v(" "),e("p",[t._v("在这个例子中，同一个人（Bob）使用不同的名字创建变更集，其中一个实际上是正确的，\n另一个完全不符合 Git 提交的规范。hg-fast-export 通过对每一行应用规则\n"),e("code",{staticClass:"literal"},[t._v('"<input>"="<output>"')]),t._v(" ，将 "),e("code",{staticClass:"literal"},[t._v("<input>")]),t._v(" 映射到 "),e("code",{staticClass:"literal"},[t._v("<output>")]),t._v(" 来修正这个问题。\n在 "),e("code",{staticClass:"literal"},[t._v("<input>")]),t._v(" 和 "),e("code",{staticClass:"literal"},[t._v("<output>")]),t._v(" 字符串中，所有 Python 的 "),e("code",{staticClass:"literal"},[t._v("string_escape")]),t._v("\n支持的转义序列都会被解释。如果作者映射文件中并不包含匹配的 "),e("code",{staticClass:"literal"},[t._v("<input>")]),t._v("，\n那么该作者将原封不动地被发送到 Git。\n如果所有的用户名看起来都是正确的，那我们根本就不需要这个文件。\n在本例中，我们会使文件看起来像这样：")]),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v('"bob"="Bob Jones <bob@company.com>"\n"bob@localhost"="Bob Jones <bob@company.com>"\n"bob <bob@company.com>"="Bob Jones <bob@company.com>"\n"bob jones <bob <AT> company <DOT> com>"="Bob Jones <bob@company.com>"')])]),t._v(" "),e("p",[t._v("当分支和标签 Mercurial 中的名字在 Git 中不允许时，这种映射文件也可以用来重命名它们。")]),t._v(" "),e("p",[t._v("下一步是创建一个新的 Git 仓库，然后运行导出脚本：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git init /tmp/converted\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /tmp/converted\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors")])]),t._v(" "),e("p",[e("code",{staticClass:"literal"},[t._v("-r")]),t._v(" 选项告诉 hg-fast-export 去哪里寻找我们想要转换的 Mercurial 仓库，"),e("code",{staticClass:"literal"},[t._v("-A")]),t._v("\n标记告诉它在哪找到作者映射文件（分支和标签的映射文件分别通过 "),e("code",{staticClass:"literal"},[t._v("-B")]),t._v(" 和 "),e("code",{staticClass:"literal"},[t._v("-T")]),t._v(" 选项来指定）。\n这个脚本会分析 Mercurial 变更集然后将它们转换成 Git“fast-import”功能（我们将在之后详细讨论）需要的脚本。\n这会花一点时间（尽管它比通过网格 "),e("em",[t._v("更")]),t._v(" 快），输出相当的冗长：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors\nLoaded 4 authors\nmaster: Exporting full revision 1/22208 with 13/0/0 added/changed/removed files\nmaster: Exporting simple delta revision 2/22208 with 1/1/0 added/changed/removed files\nmaster: Exporting simple delta revision 3/22208 with 0/1/0 added/changed/removed files\n[…]\nmaster: Exporting simple delta revision 22206/22208 with 0/4/0 added/changed/removed files\nmaster: Exporting simple delta revision 22207/22208 with 0/2/0 added/changed/removed files\nmaster: Exporting thorough delta revision 22208/22208 with 3/213/0 added/changed/removed files\nExporting tag [0.4c] at [hg r9] [git :10]\nExporting tag [0.4d] at [hg r16] [git :17]\n[…]\nExporting tag [3.1-rc] at [hg r21926] [git :21927]\nExporting tag [3.1] at [hg r21973] [git :21974]\nIssued 22315 commands\ngit-fast-import statistics:\n---------------------------------------------------------------------\nAlloc'd objects:     120000\nTotal objects:       115032 (    208171 duplicates                  )\n      blobs  :        40504 (    205320 duplicates      26117 deltas of      39602 attempts)\n      trees  :        52320 (      2851 duplicates      47467 deltas of      47599 attempts)\n      commits:        22208 (         0 duplicates          0 deltas of          0 attempts)\n      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)\nTotal branches:         109 (         2 loads     )\n      marks:        1048576 (     22208 unique    )\n      atoms:           1952\nMemory total:          7860 KiB\n       pools:          2235 KiB\n     objects:          5625 KiB\n---------------------------------------------------------------------\npack_report: getpagesize()            =       4096\npack_report: core.packedGitWindowSize = 1073741824\npack_report: core.packedGitLimit      = 8589934592\npack_report: pack_used_ctr            =      90430\npack_report: pack_mmap_calls          =      46771\npack_report: pack_open_windows        =          1 /          1\npack_report: pack_mapped              =  340852700 /  340852700\n---------------------------------------------------------------------\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git shortlog -sn\n   369  Bob Jones\n   365  Joe Smith")])]),t._v(" "),e("p",[t._v("那看起来非常好。\n所有 Mercurial 标签都已被转换成 Git 标签，Mercurial 分支与书签都被转换成 Git 分支。\n现在已经准备好将仓库推送到新的服务器那边：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git remote add origin git@my-git-server:myrepository.git\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin --all")])]),t._v(" "),e("h2",{attrs:{id:"bazaar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bazaar"}},[t._v("#")]),t._v(" Bazaar")]),t._v(" "),e("p"),t._v(" "),e("p",[t._v("Bazaar is a DVCS tool much like Git, and as a result it’s pretty straightforward to convert a Bazaar repository into a Git one.\nTo accomplish this, you’ll need to import the "),e("code",{staticClass:"literal"},[t._v("bzr-fastimport")]),t._v(" plugin.")]),t._v(" "),e("h3",{attrs:{id:"getting-the-bzr-fastimport-plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getting-the-bzr-fastimport-plugin"}},[t._v("#")]),t._v(" Getting the bzr-fastimport plugin")]),t._v(" "),e("p",[t._v("The procedure for installing the fastimport plugin is different on UNIX-like operating systems and on Windows.\nIn the first case, the simplest is to install the "),e("code",{staticClass:"literal"},[t._v("bzr-fastimport")]),t._v(" package that will install all the required dependencies.")]),t._v(" "),e("p",[t._v("For example, with Debian and derived, you would do the following:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo apt-get install bzr-fastimport")])]),t._v(" "),e("p",[t._v("With RHEL, you would do the following:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo yum install bzr-fastimport")])]),t._v(" "),e("p",[t._v("With Fedora, since release 22, the new package manager is dnf:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo dnf install bzr-fastimport")])]),t._v(" "),e("p",[t._v("If the package is not available, you may install it as a plugin:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" mkdir --parents ~/.bazaar/plugins     "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# creates the necessary folders for the plugins")]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd ~/.bazaar/plugins\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" bzr branch lp:bzr-fastimport fastimport   "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# imports the fastimport plugin")]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd fastimport\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo python setup.py install --record=files.txt   "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# installs the plugin")])])]),t._v(" "),e("p",[t._v("For this plugin to work, you’ll also need the "),e("code",{staticClass:"literal"},[t._v("fastimport")]),t._v(" Python module.\nYou can check whether it is present or not and install it with the following commands:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" python -c "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"import fastimport"')]),t._v('\nTraceback (most recent call last):\n  File "<string>", line 1, in <module>\nImportError: No module named fastimport\n'),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" pip install fastimport")])]),t._v(" "),e("p",[t._v("If it is not available, you can download it at address "),e("a",{staticClass:"link",attrs:{href:"https://pypi.python.org/pypi/fastimport/"}},[t._v("https://pypi.python.org/pypi/fastimport/")]),t._v(".")]),t._v(" "),e("p",[t._v("In the second case (on Windows), "),e("code",{staticClass:"literal"},[t._v("bzr-fastimport")]),t._v(" is automatically installed with the standalone version and the default installation (let all the checkboxes checked).\nSo in this case you have nothing to do.")]),t._v(" "),e("p",[t._v("At this point, the way to import a Bazaar repository differs according to that you have a single branch or you are working with a repository that has several branches.")]),t._v(" "),e("h3",{attrs:{id:"project-with-a-single-branch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#project-with-a-single-branch"}},[t._v("#")]),t._v(" Project with a single branch")]),t._v(" "),e("p",[t._v("Now "),e("code",{staticClass:"literal"},[t._v("cd")]),t._v(" in the directory that contains your Bazaar repository and initialize the Git repository:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd /path/to/the/bzr/repository\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git init")])]),t._v(" "),e("p",[t._v("Now, you can simply export your Bazaar repository and convert it into a Git repository using the following command:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" bzr fast-export --plain . | git fast-import")])]),t._v(" "),e("p",[t._v("Depending on the size of the project, your Git repository is built in a lapse from a few seconds to a few minutes.")]),t._v(" "),e("h3",{attrs:{id:"case-of-a-project-with-a-main-branch-and-a-working-branch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#case-of-a-project-with-a-main-branch-and-a-working-branch"}},[t._v("#")]),t._v(" Case of a project with a main branch and a working branch")]),t._v(" "),e("p",[t._v("You can also import a Bazaar repository that contains branches.\nLet us suppose that you have two branches: one represents the main branch (myProject.trunk), the other one is the working branch (myProject.work).")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls\nmyProject.trunk myProject.work")])]),t._v(" "),e("p",[t._v("Create the Git repository and "),e("code",{staticClass:"literal"},[t._v("cd")]),t._v(" into it:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git init git-repo\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd git-repo")])]),t._v(" "),e("p",[t._v("Pull the "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" branch into git:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\ngit fast-import --export-marks=../marks.git")])]),t._v(" "),e("p",[t._v("Pull the working branch into Git:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\ngit fast-import --import-marks=../marks.git --export-marks=../marks.git")])]),t._v(" "),e("p",[t._v("Now "),e("code",{staticClass:"literal"},[t._v("git branch")]),t._v(" shows you the "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" branch as well as the "),e("code",{staticClass:"literal"},[t._v("work")]),t._v(" branch.\nCheck the logs to make sure they’re complete and get rid of the "),e("code",{staticClass:"literal"},[t._v("marks.bzr")]),t._v(" and "),e("code",{staticClass:"literal"},[t._v("marks.git")]),t._v(" files.")]),t._v(" "),e("h3",{attrs:{id:"synchronizing-the-staging-area"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronizing-the-staging-area"}},[t._v("#")]),t._v(" Synchronizing the staging area")]),t._v(" "),e("p",[t._v("Whatever the number of branches you had and the import method you used, your staging area is not synchronized with "),e("code",{staticClass:"literal"},[t._v("HEAD")]),t._v(", and with the import of several branches, your working directory is not synchronized either.\nThis situation is easily solved by the following command:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git reset --hard HEAD")])]),t._v(" "),e("h3",{attrs:{id:"ignoring-the-files-that-were-ignored-with-bzrignore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-the-files-that-were-ignored-with-bzrignore"}},[t._v("#")]),t._v(" Ignoring the files that were ignored with .bzrignore")]),t._v(" "),e("p",[t._v("Now let’s have a look at the files to ignore.\nThe first thing to do is to rename "),e("code",{staticClass:"literal"},[t._v(".bzrignore")]),t._v(" into "),e("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(".\nIf the "),e("code",{staticClass:"literal"},[t._v(".bzrignore")]),t._v(' file contains one or several lines starting with "!!" or "RE:", you’ll have to modify it and perhaps create several '),e("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" files in order to ignore exactly the same files that Bazaar was ignoring.")]),t._v(" "),e("p",[t._v("Finally, you will have to create a commit that contains this modification for the migration:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git mv .bzrignore .gitignore\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# modify .gitignore if needed")]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'Migration from Bazaar to Git'")])])]),t._v(" "),e("h3",{attrs:{id:"sending-your-repository-to-the-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sending-your-repository-to-the-server"}},[t._v("#")]),t._v(" Sending your repository to the server")]),t._v(" "),e("p",[t._v("Here we are!\nNow you can push the repository onto its new home server:")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git remote add origin git@my-git-server:mygitrepository.git\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin --all\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin --tags")])]),t._v(" "),e("p",[t._v("Your Git repository is ready to use.")]),t._v(" "),e("h2",{attrs:{id:"perforce"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#perforce"}},[t._v("#")]),t._v(" Perforce")]),t._v(" "),e("p",[t._v("\n下一个将要看到导入的系统是 Perforce。\n就像我们之前讨论过的，有两种方式让 Git 与 Perforce 互相通信：git-p4 与 Perforce Git Fusion。")]),t._v(" "),e("h3",{attrs:{id:"perforce-git-fusion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#perforce-git-fusion"}},[t._v("#")]),t._v(" Perforce Git Fusion")]),t._v(" "),e("p",[t._v("Git Fusion 使这个过程毫无痛苦。\n只需要使用在 "),e("a",{staticClass:"xref",attrs:{id:"xref-_p4_git_fusion",href:"#_p4_git_fusion"}},[t._v("Git Fusion")]),t._v(" 中讨论过的配置文件来配置你的项目设置、用户映射与分支，然后克隆整个仓库。\nGit Fusion 让你处在一个看起来像是原生 Git 仓库的环境中，如果愿意的话你可以随时将它推送到一个原生 Git 托管中。\n如果你喜欢的话甚至可以使用 Perforce 作为你的 Git 托管。")]),t._v(" "),e("h3",{attrs:{id:"git-p4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-p4"}},[t._v("#")]),t._v(" Git-p4")]),t._v(" "),e("p",[t._v("Git-p4 也可以作为一个导入工具。\n作为例子，我们将从 Perforce 公开仓库中导入 Jam 项目。\n为了设置客户端，必须导出 P4PORT 环境变量指向 Perforce 仓库：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" export P4PORT=public.perforce.com:1666")])]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("为了继续后续步骤，需要连接到 Perforce 仓库。\n在我们的例子中将会使用在 public.perforce.com 的公开仓库，但是你可以使用任何你有权限的仓库。")])])]),t._v(" "),e("p",[t._v("\n运行 "),e("code",{staticClass:"literal"},[t._v("git p4 clone")]),t._v(" 命令从 Perforce 服务器导入 Jam 项目，提供仓库、项目路径与你想要存放导入项目的路径：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git-p4 clone //guest/perforce_software/jam@all p4import\nImporting from //guest/perforce_software/jam@all into p4import\nInitialized empty Git repository in /private/tmp/p4import/.git/\nImport destination: refs/remotes/p4/master\nImporting revision 9957 (100%)")])]),t._v(" "),e("p",[t._v("这个特定的项目只有一个分支，但是如果你在分支视图（或者说一些目录）中配置了一些分支，你可以将 "),e("code",{staticClass:"literal"},[t._v("--detect-branches")]),t._v(" 选项传递给 "),e("code",{staticClass:"literal"},[t._v("git p4 clone")]),t._v(" 来导入项目的所有分支。\n查看 "),e("a",{staticClass:"xref",attrs:{id:"xref-_git_p4_branches",href:"#_git_p4_branches"}},[t._v("分支")]),t._v(" 来了解关于这点的更多信息。")]),t._v(" "),e("p",[t._v("此时你几乎已经完成了。\n如果进入 "),e("code",{staticClass:"literal"},[t._v("p4import")]),t._v(" 目录中并运行 "),e("code",{staticClass:"literal"},[t._v("git log")]),t._v("，可以看到你的导入工作：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(' git log -2\ncommit e5da1c909e5db3036475419f6379f2c73710c4e6\nAuthor: giles <giles@giles@perforce.com>\nDate:   Wed Feb 8 03:13:27 2012 -0800\n\n    Correction to line 355; change </UL> to </OL>.\n\n    [git-p4: depot-paths = "//public/jam/src/": change = 8068]\n\ncommit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98\nAuthor: kwirth <kwirth@perforce.com>\nDate:   Tue Jul 7 01:35:51 2009 -0800\n\n    Fix spelling error on Jam doc page (cummulative -> cumulative).\n\n    [git-p4: depot-paths = "//public/jam/src/": change = 7304]')])]),t._v(" "),e("p",[t._v("你可以看到 "),e("code",{staticClass:"literal"},[t._v("git-p4")]),t._v(" 在每一个提交里都留下了一个标识符。\n如果之后想要引用 Perforce 的修改序号的话，标识符保留在那里也是可以的。\n然而，如果想要移除标识符，现在正是这么做的时候——在你开始在新仓库中工作之前。\n")]),e("p",[t._v("可以使用 "),e("code",{staticClass:"literal"},[t._v("git filter-branch")]),t._v(" 将全部标识符移除。")]),e("p"),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git filter-branch --msg-filter "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'sed -e \"/^\\[git-p4:/d\"'")]),t._v("\nRewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)\nRef 'refs/heads/master' was rewritten")])]),t._v(" "),e("p",[t._v("如果运行 "),e("code",{staticClass:"literal"},[t._v("git log")]),t._v("，你会看到所有提交的 SHA-1 校验和都改变了，但是提交信息中不再有 "),e("code",{staticClass:"literal"},[t._v("git-p4")]),t._v(" 字符串了：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log -2\ncommit b17341801ed838d97f7800a54a6f9b95750839b7\nAuthor: giles <giles@giles@perforce.com>\nDate:   Wed Feb 8 03:13:27 2012 -0800\n\n    Correction to line 355; change </UL> to </OL>.\n\ncommit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff\nAuthor: kwirth <kwirth@perforce.com>\nDate:   Tue Jul 7 01:35:51 2009 -0800\n\n    Fix spelling error on Jam doc page (cummulative -> cumulative).")])]),t._v(" "),e("p",[t._v("现在导入已经准备好推送到你的新 Git 服务器上了。")]),t._v(" "),e("h2",{attrs:{id:"tfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tfs"}},[t._v("#")]),t._v(" TFS")]),t._v(" "),e("p",[t._v("\n如果你的团队正在将他们的源代码管理从 TFVC 转换为 Git，你们会想要最高程度的无损转换。\n这意味着，虽然我们在之前的交互章节介绍了 git-tfs 与 git-tf 两种工具，但是我们在本部分只能介绍 git-tfs，因为 git-tfs 支持分支，而使用 git-tf 代价太大。")]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("这是一个单向转换。\n这意味着 Git 仓库无法连接到原始的 TFVC 项目。")])])]),t._v(" "),e("p",[t._v("第一件事是映射用户名。\nTFVC 对待变更集作者字段的内容相当宽容，但是 Git 需要人类可读的名字与邮箱地址。\n可以通过 "),e("code",{staticClass:"literal"},[t._v("tf")]),t._v(" 命令行客户端来获取这个信息，像这样：")]),t._v(" "),e("pre",{staticClass:"source language-powershell"},[e("code",[t._v("PS> tf history $/myproject -recursive > AUTHORS_TMP")])]),t._v(" "),e("p",[t._v("这会将历史中的所有变更集抓取下来并放到 AUTHORS_TMP 文件中，然后我们将会将 "),e("code",{staticClass:"literal"},[t._v("User")]),t._v(" 列（第二个）取出来。\n打开文件找到列开始与结束的字符并替换，在下面的命令行中，"),e("code",{staticClass:"literal"},[t._v("cut")]),t._v(" 命令的参数 "),e("code",{staticClass:"literal"},[t._v("11-20")]),t._v(" 就是我们找到的：")]),t._v(" "),e("pre",{staticClass:"source language-powershell"},[e("code",[t._v("PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS")])]),t._v(" "),e("p",[e("code",{staticClass:"literal"},[t._v("cut")]),t._v(" 命令只会保留每行中第 11 个到第 22 个字符。\n"),e("code",{staticClass:"literal"},[t._v("tail")]),t._v(" 命令会跳过前两行，就是字段表头与 ASCII 风格的下划线。\n所有这些的结果通过管道送到 "),e("code",{staticClass:"literal"},[t._v("sort")]),t._v(" 和 "),e("code",{staticClass:"literal"},[t._v("uniq")]),t._v(" 来去除重复，然后保存到 "),e("code",{staticClass:"literal"},[t._v("AUTOHRS")]),t._v(" 文件中。\n下一步是手动的；为了让 git-tfs 有效地使用这个文件，每一行必须是这种格式：")]),t._v(" "),e("pre",{staticClass:"source language-text"},[e("code",[t._v("DOMAIN\\username = User Name <email@address.com>")])]),t._v(" "),e("p",[t._v("左边的部分是 TFVC 中的 “User” 字段，等号右边的部分是将被用作 Git 提交的用户名。")]),t._v(" "),e("p",[t._v("一旦有了这个文件，下一件事就是生成一个你需要的 TFVC 项目的完整克隆：")]),t._v(" "),e("pre",{staticClass:"source language-powershell"},[e("code",[t._v("PS> git tfs clone --with-branches --authors=AUTHORS https"),e("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v(":")]),t._v("//username.visualstudio.com/DefaultCollection $/project/Trunk project_git")])]),t._v(" "),e("p",[t._v("接下来要从提交信息底部清理 "),e("code",{staticClass:"literal"},[t._v("git-tfs-id")]),t._v(" 区块。\n下面的命令会完成这个任务：")]),t._v(" "),e("pre",{staticClass:"source language-powershell"},[e("code",[t._v("PS> git "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("filter")]),t._v("-branch -f --msg-filter "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'sed \"s/^git-tfs-id:.*$//g\"'")]),t._v(" "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'--'")]),t._v(" --all")])]),t._v(" "),e("p",[t._v("那会使用 Git 终端环境中的 "),e("code",{staticClass:"literal"},[t._v("sed")]),t._v(" 命令来将所有以 “git-tfs-id:” 开头的行替换为 Git 会忽略的空白。")]),t._v(" "),e("p",[t._v("全部完成后，你就已经准备好去增加一个新的远程仓库，推送你所有的分支上去，然后你的团队就可以开始用 Git 工作了。")]),t._v(" "),e("h2",{attrs:{id:"一个自定义的导入器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个自定义的导入器"}},[t._v("#")]),t._v(" 一个自定义的导入器")]),t._v(" "),e("p"),e("p",[t._v("如果你的系统不是上述中的任何一个，你需要在线查找一个导入器——针对许多其他系统有很多高质量的导入器，\n包括 CVS、Clear Case、Visual Source Safe，甚至是一个档案目录。\n如果没有一个工具适合你，需要一个不知名的工具，或者需要更大自由度的自定义导入过程，应当使用 "),e("code",{staticClass:"literal"},[t._v("git fast-import")]),t._v("。\n这个命令从标准输入中读取简单指令来写入特定的 Git 数据。\n通过这种方式创建 Git 对象比运行原始 Git 命令或直接写入原始对象\n（查看 "),e("a",{staticClass:"xref",attrs:{id:"xref--ch10-git-internals",href:"/chapter-10/index.html"}},[t._v("Git 内部原理")]),t._v(" 了解更多内容）更容易些。\n通过这种方式你可以编写导入脚本，从你要导入的系统中读取必要数据，然后直接打印指令到标准输出。\n然后可以运行这个程序并通过 "),e("code",{staticClass:"literal"},[t._v("git fast-import")]),t._v(" 重定向管道输出。")]),t._v(" "),e("p",[t._v("为了快速演示，我们会写一个简单的导入器。\n假设你在 "),e("code",{staticClass:"literal"},[t._v("current")]),t._v(" 工作，有时候会备份你的项目到时间标签 "),e("code",{staticClass:"literal"},[t._v("back_YYYY_MM_DD")]),t._v(" 备份目录中，你想要将这些导入到 Git 中。\n目录结构看起来是这样：")]),e("p"),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls /opt/import_from\nback_2014_01_02\nback_2014_01_04\nback_2014_01_14\nback_2014_02_03\ncurrent")])]),t._v(" "),e("p",[t._v("为了导入一个 Git 目录，需要了解 Git 如何存储它的数据。\n你可能记得，Git 在底层存储指向内容快照的提交对象的链表。\n所有要做的就是告诉 "),e("code",{staticClass:"literal"},[t._v("fast-import")]),t._v(" 哪些内容是快照，哪个提交数据指向它们，以及它们进入的顺序。\n你的策略是一次访问一个快照，然后用每个目录中的内容创建提交，并且将每一个提交与前一个连接起来。")]),t._v(" "),e("p",[t._v("如同我们在 "),e("a",{staticClass:"xref",attrs:{id:"xref--ch08-customizing-git--_an_example_git_enforced_policy",href:"/chapter-8/4.html#使用强制策略的一个例子"}},[t._v("使用强制策略的一个例子")]),t._v(" 里做的，\n我们将会使用 Ruby 写这个，因为它是我们平常工作中使用的并且它很容易读懂。\n可以使用任何你熟悉的东西来非常轻松地写这个例子——它只需要将合适的信息打印到 "),e("code",{staticClass:"literal"},[t._v("标准输出")]),t._v("。\n然而，如果你在 Windows 上，这意味着需要特别注意不要引入回车符到行尾——\n"),e("code",{staticClass:"literal"},[t._v("git fast-import")]),t._v(" 非常特别地只接受换行符（LF）而不是 Windows 使用的回车换行符（CRLF）。")]),t._v(" "),e("p",[t._v("现在开始，需要进入目标目录中并识别每一个子目录，每一个都是你要导入为提交的快照。\n要进入到每个子目录中并为导出它打印必要的命令。\n基本主循环像这个样子：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[t._v("last_mark = "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("nil")]),t._v("\n\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# loop through the directories")]),t._v("\nDir.chdir(ARGV[0]) "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v("\n  Dir.glob("),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"*"')]),t._v(").each "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |dir|\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("next")]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" File.file?(dir)\n\n    "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# move into the target directory")]),t._v("\n    Dir.chdir(dir) "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v("\n      last_mark = print_export(dir, last_mark)\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),e("p",[t._v("在每个目录内运行 "),e("code",{staticClass:"literal"},[t._v("print_export")]),t._v("，将会拿到清单并标记之前的快照，然后返回清单并标记现在的快照；通过这种方式，可以将它们合适地连接在一起。\n“标记”是一个给提交标识符的 "),e("code",{staticClass:"literal"},[t._v("fast-import")]),t._v(" 术语；当你创建提交，为每一个提交赋予一个标记来将它与其他提交连接在一起。\n这样，在你的 "),e("code",{staticClass:"literal"},[t._v("print_export")]),t._v(" 方法中第一件要做的事就是从目录名字生成一个标记：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[t._v("mark = convert_dir_to_mark(dir)")])]),t._v(" "),e("p",[t._v("可以创建一个目录的数组并使用索引做为标记，因为标记必须是一个整数。\n方法类似这样：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[t._v("$marks = []\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" convert_dir_to_mark(dir)\n  "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !$marks.include?(dir)\n    $marks << dir\n  "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n  ($marks.index(dir) + 1).to_s\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),e("p",[t._v("既然有一个整数代表你的提交，那还要给提交元数据一个日期。\n因为目录名字表达了日期，所以你将会从中解析出日期。\n你的 "),e("code",{staticClass:"literal"},[t._v("print_export")]),t._v(" 文件的下一行是：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[t._v("date = convert_dir_to_date(dir)")])]),t._v(" "),e("p",[e("code",{staticClass:"literal"},[t._v("convert_dir_to_date")]),t._v(" 定义为：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" convert_dir_to_date(dir)\n  "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" dir == "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'current'")]),t._v("\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("return")]),t._v(" Time.now().to_i\n  "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("else")]),t._v("\n    dir = dir.gsub("),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'back_'")]),t._v(", "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("''")]),t._v(")\n    (year, month, day) = dir.split("),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'_'")]),t._v(")\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("return")]),t._v(" Time.local(year, month, day).to_i\n  "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),e("p",[t._v("那会返回每一个目录日期的整数。\n最后一项每个提交需要的元数据是提交者信息，它将会被硬编码在全局变量中：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[t._v("$author = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'John Doe <john@example.com>'")])])]),t._v(" "),e("p",[t._v("现在准备开始为你的导入器打印出提交数据。\n初始信息声明定义了一个提交对象与它所在的分支，紧接着一个你生成的标记、提交者信息与提交信息、然后是一个之前的提交，如果它存在的话。\n代码看起来像这样：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[e("span",{staticStyle:{"font-style":"italic"}},[t._v("# print the import information")]),t._v("\nputs "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'commit refs/heads/master'")]),t._v("\nputs "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'mark :'")]),t._v(" + mark\nputs "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"committer ')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$author"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(" ")]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("date"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(' -0700"')]),t._v("\nexport_data("),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'imported from '")]),t._v(" + dir)\nputs "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'from :'")]),t._v(" + last_mark "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" last_mark")])]),t._v(" "),e("p",[t._v("我们将硬编码时区信息（-0700），因为这样很容易。\n如果从其他系统导入，必须指定为一个偏移的时区。\n提交信息必须指定为特殊的格式：")]),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v("data (size)\\n(contents)")])]),t._v(" "),e("p",[t._v("这个格式包括文本数据、将要读取数据的大小、一个换行符、最终的数据。\n因为之后还需要为文件内容指定相同的数据格式，你需要创建一个帮助函数，"),e("code",{staticClass:"literal"},[t._v("export_data")]),t._v("：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" export_data(string)\n  print "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"data ')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("string.size"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}\\n#{")]),t._v("string"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),e("p",[t._v("剩下的工作就是指定每一个快照的文件内容。\n这很轻松，因为每一个目录都是一个快照——可以在目录中的每一个文件内容后打印 "),e("code",{staticClass:"literal"},[t._v("deleteall")]),t._v(" 命令。\nGit 将会适当地记录每一个快照：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[t._v("puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'deleteall'")]),t._v("\nDir.glob("),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"**/*"')]),t._v(").each "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |file|\n  "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("next")]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !File.file?(file)\n  inline_data(file)\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),e("p",[t._v("注意：因为大多数系统认为他们的版本是从一个提交变化到另一个提交，fast-import 也可以为每一个提交执行命令来指定哪些文件是添加的、删除的或修改的与新内容是哪些。\n可以计算快照间的不同并只提供这些数据，但是这样做会很复杂——也可以把所有数据给 Git 然后让它为你指出来。\n如果这更适合你的数据，查阅 "),e("code",{staticClass:"literal"},[t._v("fast-import")]),t._v(" man 帮助页来了解如何以这种方式提供你的数据。")]),t._v(" "),e("p",[t._v("这种列出新文件内容或用新内容指定修改文件的格式如同下面的内容：")]),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v("M 644 inline path/to/file\ndata (size)\n(file contents)")])]),t._v(" "),e("p",[t._v("这里，644 是模式（如果你有可执行文件，反而你需要检测并指定 755），inline 表示将会立即把内容放在本行之后。\n你的 "),e("code",{staticClass:"literal"},[t._v("inline_data")]),t._v(" 方法看起来像这样：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" inline_data(file, code = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'M'")]),t._v(", mode = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'644'")]),t._v(")\n  content = File.read(file)\n  puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("code"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(" ")]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("mode"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(" inline ")]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("file"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n  export_data(content)\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),e("p",[t._v("可以重用之前定义的 "),e("code",{staticClass:"literal"},[t._v("export_data")]),t._v(" 方法，因为它与你定义的提交信息数据的方法一样。")]),t._v(" "),e("p",[t._v("最后一件你需要做的是返回当前的标记以便它可以传给下一个迭代：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("return")]),t._v(" mark")])]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("如果在 Windows 上还需要确保增加一个额外步骤。\n正如之前提到的，Windows 使用 CRLF 作为换行符而 "),e("code",{staticClass:"literal"},[t._v("git fast-import")]),t._v(" 只接受 LF。\n为了修正这个问题使 "),e("code",{staticClass:"literal"},[t._v("git fast-import")]),t._v(" 正常工作，你需要告诉 ruby 使用 LF 代替 CRLF：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[t._v("$stdout.binmode")])])])]),t._v(" "),e("p",[t._v("就是这样。\n这是全部的脚本：")]),t._v(" "),e("pre",{staticClass:"source language-ruby"},[e("code",[e("span",{staticStyle:{"font-style":"italic"}},[t._v("#!/usr/bin/env ruby")]),t._v("\n\n$stdout.binmode\n$author = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"John Doe <john@example.com>"')]),t._v("\n\n$marks = []\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" convert_dir_to_mark(dir)\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !$marks.include?(dir)\n        $marks << dir\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n    ($marks.index(dir)+1).to_s\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" convert_dir_to_date(dir)\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" dir == "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'current'")]),t._v("\n        "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("return")]),t._v(" Time.now().to_i\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("else")]),t._v("\n        dir = dir.gsub("),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'back_'")]),t._v(", "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("''")]),t._v(")\n        (year, month, day) = dir.split("),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'_'")]),t._v(")\n        "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("return")]),t._v(" Time.local(year, month, day).to_i\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" export_data(string)\n    print "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"data ')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("string.size"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}\\n#{")]),t._v("string"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" inline_data(file, code="),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'M'")]),t._v(", mode="),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'644'")]),t._v(")\n    content = File.read(file)\n    puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("code"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(" ")]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("mode"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(" inline ")]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("file"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n    export_data(content)\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("def")]),t._v(" print_export(dir, last_mark)\n    date = convert_dir_to_date(dir)\n    mark = convert_dir_to_mark(dir)\n\n    puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'commit refs/heads/master'")]),t._v("\n    puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"mark :')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("mark"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v("\n    puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"committer ')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("$author"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(" ")]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("date"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v(' -0700"')]),t._v("\n    export_data("),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"imported from ')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("dir"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(")\n    puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"from :')]),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("#{")]),t._v("last_mark"),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("}")]),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"')]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" last_mark\n\n    puts "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("'deleteall'")]),t._v("\n    Dir.glob("),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"**/*"')]),t._v(").each "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |file|\n        "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("next")]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" !File.file?(file)\n        inline_data(file)\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n    mark\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# Loop through the directories")]),t._v("\nlast_mark = "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("nil")]),t._v("\nDir.chdir(ARGV[0]) "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v("\n    Dir.glob("),e("span",{staticStyle:{"font-style":"italic"}},[t._v('"*"')]),t._v(").each "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v(" |dir|\n        "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("next")]),t._v(" "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("if")]),t._v(" File.file?(dir)\n\n        "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("# move into the target directory")]),t._v("\n        Dir.chdir(dir) "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("do")]),t._v("\n            last_mark = print_export(dir, last_mark)\n        "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n    "),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")]),t._v("\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("end")])])]),t._v(" "),e("p",[t._v("如果运行这个脚本，你会得到类似下面的内容：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ruby import.rb /opt/import_from\ncommit refs/heads/master\nmark :1\ncommitter John Doe <john@example.com> 1388649600 -0700\ndata 29\nimported from back_2014_01_02deleteall\nM 644 inline README.md\ndata 28\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" Hello\n\nThis is my readme.\ncommit refs/heads/master\nmark :2\ncommitter John Doe <john@example.com> 1388822400 -0700\ndata 29\nimported from back_2014_01_04from :1\ndeleteall\nM 644 inline main.rb\ndata 34\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v('!/bin/env ruby\n\nputs "Hey there"\nM 644 inline README.md\n(...)')])]),t._v(" "),e("p",[t._v("为了运行导入器，将这些输出用管道重定向到你想要导入的 Git 目录中的 "),e("code",{staticClass:"literal"},[t._v("git fast-import")]),t._v("。\n可以创建一个新的目录并在其中运行 "),e("code",{staticClass:"literal"},[t._v("git init")]),t._v(" 作为开始，然后运行你的脚本：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git init\nInitialized empty Git repository in /opt/import_to/.git/\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ruby import.rb /opt/import_from | git fast-import\ngit-fast-import statistics:\n---------------------------------------------------------------------\nAlloc'd objects:       5000\nTotal objects:           13 (         6 duplicates                  )\n      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)\n      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)\n      commits:            4 (         1 duplicates          0 deltas of          0 attempts)\n      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)\nTotal branches:           1 (         1 loads     )\n      marks:           1024 (         5 unique    )\n      atoms:              2\nMemory total:          2344 KiB\n       pools:          2110 KiB\n     objects:           234 KiB\n---------------------------------------------------------------------\npack_report: getpagesize()            =       4096\npack_report: core.packedGitWindowSize = 1073741824\npack_report: core.packedGitLimit      = 8589934592\npack_report: pack_used_ctr            =         10\npack_report: pack_mmap_calls          =          5\npack_report: pack_open_windows        =          2 /          2\npack_report: pack_mapped              =       1457 /       1457\n---------------------------------------------------------------------")])]),t._v(" "),e("p",[t._v("正如你所看到的，当它成功完成时，它会给你一串关于它完成内容的统计。\n这本例中，一共导入了 13 个对象、4 次提交到 1 个分支。\n现在，可以运行 "),e("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 来看一下你的新历史：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log -2\ncommit 3caa046d4aac682a55867132ccdfbe0d3fdee498\nAuthor: John Doe <john@example.com>\nDate:   Tue Jul 29 19:39:04 2014 -0700\n\n    imported from current\n\ncommit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def\nAuthor: John Doe <john@example.com>\nDate:   Mon Feb 3 01:00:00 2014 -0700\n\n    imported from back_2014_02_03")])]),t._v(" "),e("p",[t._v("做得很好——一个漂亮、干净的 Git 仓库。\n要注意的一点是并没有检出任何东西——一开始你的工作目录内并没有任何文件。\n为了得到他们，你必须将分支重置到 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 所在的地方：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git reset --hard master\nHEAD is now at 3caa046 imported from current\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" ls\nREADME.md main.rb")])]),t._v(" "),e("p",[t._v("可以通过 "),e("code",{staticClass:"literal"},[t._v("fast-import")]),t._v(" 工具做很多事情——处理不同模式、二进制数据、多个分支与合并、标签、进度指示等等。\n一些更复杂情形下的例子可以在 Git 源代码目录中的 "),e("code",{staticClass:"literal"},[t._v("contrib/fast-import")]),t._v(" 目录中找到。")])])}),[],!1,null,null,null);a.default=i.exports}}]);