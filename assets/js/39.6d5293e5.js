(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{432:function(t,e,a){t.exports=a.p+"assets/img/p4merge.0e4c64c5.png"},546:function(t,e,a){"use strict";a.r(e);var s=a(28),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"配置-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-git"}},[t._v("#")]),t._v(" 配置 Git")]),t._v(" "),s("p",[t._v("\n正如你在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch01-getting-started",href:"/chapter-1/index.html"}},[t._v("起步")]),t._v(" 中看到的，可以用 "),s("code",{staticClass:"literal"},[t._v("git config")]),t._v(" 配置 Git。\n首先要做的事情就是设置你的名字和邮件地址：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global user.name "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"John Doe"')]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global user.email johndoe@example.com")])]),t._v(" "),s("p",[t._v("现在，你会了解到许多更有趣的选项，并用类似的方式来定制 Git。")]),t._v(" "),s("p",[t._v("首先，快速回忆下：Git 使用一系列配置文件来保存你自定义的行为。\n它首先会查找系统级的 "),s("code",{staticClass:"literal"},[t._v("/etc/gitconfig")]),t._v(" 文件，该文件含有系统里每位用户及他们所拥有的仓库的配置值。\n如果你传递 "),s("code",{staticClass:"literal"},[t._v("--system")]),t._v(" 选项给 "),s("code",{staticClass:"literal"},[t._v("git config")]),t._v("，它就会读写该文件。")]),t._v(" "),s("p",[t._v("接下来 Git 会查找每个用户的 "),s("code",{staticClass:"literal"},[t._v("~/.gitconfig")]),t._v(" 文件（或者 "),s("code",{staticClass:"literal"},[t._v("~/.config/git/config")]),t._v(" 文件）。\n你可以传递 "),s("code",{staticClass:"literal"},[t._v("--global")]),t._v(" 选项让 Git 读写该文件。")]),t._v(" "),s("p",[t._v("最后 Git 会查找你正在操作的仓库所对应的 Git 目录下的配置文件（"),s("code",{staticClass:"literal"},[t._v(".git/config")]),t._v("）。\n这个文件中的值只对该仓库有效，它对应于向 "),s("code",{staticClass:"literal"},[t._v("git config")]),t._v(" 传递 "),s("code",{staticClass:"literal"},[t._v("--local")]),t._v(" 选项。")]),t._v(" "),s("p",[t._v("以上三个层次中每层的配置（系统、全局、本地）都会覆盖掉上一层次的配置，所以 "),s("code",{staticClass:"literal"},[t._v(".git/config")]),t._v(" 中的值会覆盖掉 "),s("code",{staticClass:"literal"},[t._v("/etc/gitconfig")]),t._v(" 中所对应的值。")]),t._v(" "),s("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("div",{staticClass:"content"},[s("p",[t._v("Git 的配置文件是纯文本的，所以你可以直接手动编辑这些配置文件，输入合乎语法的值。\n但是运行 "),s("code",{staticClass:"literal"},[t._v("git config")]),t._v(" 命令会更简单些。")])])]),t._v(" "),s("h2",{attrs:{id:"客户端基本配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端基本配置"}},[t._v("#")]),t._v(" 客户端基本配置")]),t._v(" "),s("p",[t._v("Git 能够识别的配置项分为两大类：客户端和服务器端。\n其中大部分属于客户端配置 —— 可以依你个人的工作偏好进行配置。\n尽管 Git 支持的选项 "),s("em",[t._v("繁多")]),t._v("，但其中大部分仅仅在某些罕见的情况下有意义。\n我们只讲述最平常和最有用的选项。\n如果想得到你当前版本的 Git 支持的选项列表，请运行")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" man git-config")])]),t._v(" "),s("p",[t._v("这个命令列出了所有可用的选项，以及与之相关的介绍。\n你也可以在 "),s("a",{staticClass:"link",attrs:{href:"http://git-scm.com/docs/git-config"}},[t._v("http://git-scm.com/docs/git-config")]),t._v(" 找到同样的内容。")]),t._v(" "),s("h3",{attrs:{id:"core-editor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-editor"}},[t._v("#")]),t._v(" core.editor")]),t._v(" "),s("p",[t._v("\n默认情况下，Git 会调用你通过环境变量 "),s("code",{staticClass:"literal"},[t._v("$VISUAL")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v("$EDITOR")]),t._v(" 设置的文本编辑器，\n如果没有设置，默认则会调用 "),s("code",{staticClass:"literal"},[t._v("vi")]),t._v(" 来创建和编辑你的提交以及标签信息。\n你可以使用 "),s("code",{staticClass:"literal"},[t._v("core.editor")]),t._v(" 选项来修改默认的编辑器：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.editor emacs")])]),t._v(" "),s("p",[t._v("现在，无论你定义了什么终端编辑器，Git 都会调用 Emacs 编辑信息。")]),t._v(" "),s("h3",{attrs:{id:"commit-template"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-template"}},[t._v("#")]),t._v(" commit.template")]),t._v(" "),s("p",[t._v("\n如果把此项指定为你的系统上某个文件的路径，当你提交的时候，\nGit 会使用该文件的内容作为提交的默认初始化信息。\n创建的自定义提交模版中的值可以用来提示自己或他人适当的提交格式和风格。")]),t._v(" "),s("p",[t._v("例如：考虑以下 "),s("code",{staticClass:"literal"},[t._v("~/.gitmessage.txt")]),t._v(" 模板文件：")]),t._v(" "),s("pre",{staticClass:"source language-text"},[s("code",[t._v("Subject line (try to keep under 50 characters)\n\nMulti-line description of commit,\nfeel free to be detailed.\n\n[Ticket: X]")])]),t._v(" "),s("p",[t._v("注意此提交模版是如何提示提交者保持主题的简短（为了精简 "),s("code",{staticClass:"literal"},[t._v("git log --oneline")]),t._v(" 的输出），\n如何在后面添加进一步的详情，如何引用问题和 bug 跟踪系统的工单号（Ticket），如果有的话。")]),t._v(" "),s("p",[t._v("要想让 Git 把它作为运行 "),s("code",{staticClass:"literal"},[t._v("git commit")]),t._v(" 时显示在你的编辑器中的默认信息，如下设置 "),s("code",{staticClass:"literal"},[t._v("commit.template")]),t._v("：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global commit.template ~/.gitmessage.txt\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit")])]),t._v(" "),s("p",[t._v("当你提交时，编辑器中就会显示如下的提交信息占位符：")]),t._v(" "),s("pre",{staticClass:"source language-text"},[s("code",[t._v('Subject line (try to keep under 50 characters)\n\nMulti-line description of commit,\nfeel free to be detailed.\n\n[Ticket: X]\n# Please enter the commit message for your changes. Lines starting\n# with \'#\' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n#   (use "git reset HEAD <file>..." to unstage)\n#\n# modified:   lib/test.rb\n#\n~\n~\n".git/COMMIT_EDITMSG" 14L, 297C')])]),t._v(" "),s("p",[t._v("如果你的团队对提交信息有格式要求，可以在系统上创建一个文件，并配置 Git 把它作为默认的模板，这样可以更加容易地使提交信息遵循格式。")]),t._v(" "),s("h3",{attrs:{id:"core-pager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-pager"}},[t._v("#")]),t._v(" core.pager")]),t._v(" "),s("p",[t._v("\n该配置项指定 Git 运行诸如 "),s("code",{staticClass:"literal"},[t._v("log")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("diff")]),t._v(" 等命令所使用的分页器。\n你可以把它设置成用 "),s("code",{staticClass:"literal"},[t._v("more")]),t._v(" 或者任何你喜欢的分页器（默认用的是 "),s("code",{staticClass:"literal"},[t._v("less")]),t._v("），当然也可以设置成空字符串，关闭该选项：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.pager "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("''")])])]),t._v(" "),s("p",[t._v("这样不管命令的输出量多少，Git 都会在一页显示所有内容。")]),t._v(" "),s("h3",{attrs:{id:"user-signingkey"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#user-signingkey"}},[t._v("#")]),t._v(" user.signingkey")]),t._v(" "),s("p",[t._v("\n如果你要创建经签署的含附注的标签（正如 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_signing",href:"/chapter-7/4.html#签署工作"}},[t._v("签署工作")]),t._v(" 所述），\n那么把你的 GPG 签署密钥设置为配置项会更好。如下设置你的密钥 ID：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global user.signingkey <gpg-key-id>")])]),t._v(" "),s("p",[t._v("现在，你每次运行 "),s("code",{staticClass:"literal"},[t._v("git tag")]),t._v(" 命令时，即可直接签署标签，而无需定义密钥：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git tag -s <tag-name>")])]),t._v(" "),s("h3",{attrs:{id:"core-excludesfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-excludesfile"}},[t._v("#")]),t._v(" core.excludesfile")]),t._v(" "),s("p",[t._v("\n正如 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch02-git-basics-chapter--_ignoring",href:"/chapter-2/2.html#忽略文件"}},[t._v("忽略文件")]),t._v(" 所述，你可以在你的项目的 "),s("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v("\n文件里面规定无需纳入 Git 管理的文件的模板，这样它们既不会出现在未跟踪列表，\n也不会在你运行 "),s("code",{staticClass:"literal"},[t._v("git add")]),t._v(" 后被暂存。")]),t._v(" "),s("p",[t._v("不过有些时候，你想要在你所有的版本库中忽略掉某一类文件。\n如果你的操作系统是 macOS，很可能就是指 "),s("code",{staticClass:"literal"},[t._v(".DS_Store")]),t._v("。\n如果你把 Emacs 或 Vim 作为首选的编辑器，你肯定知道以 "),s("code",{staticClass:"literal"},[t._v("~")]),t._v(" 结尾的文件名。")]),t._v(" "),s("p",[t._v("这个配置允许你设置类似于全局生效的 "),s("code",{staticClass:"literal"},[t._v(".gitignore")]),t._v(" 文件。\n如果你按照下面的内容创建一个 "),s("code",{staticClass:"literal"},[t._v("~/.gitignore_global")]),t._v(" 文件：")]),t._v(" "),s("pre",{staticClass:"source language-ini"},[s("code",[t._v("*~\n.*.swp\n.DS_Store")])]),t._v(" "),s("p",[t._v("……然后运行 "),s("code",{staticClass:"literal"},[t._v("git config --global core.excludesfile ~/.gitignore_global")]),t._v("，Git 将把那些文件永远地拒之门外。")]),t._v(" "),s("h3",{attrs:{id:"help-autocorrect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#help-autocorrect"}},[t._v("#")]),t._v(" help.autocorrect")]),t._v(" "),s("p",[t._v("\n假如你打错了一条命令，会显示：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git chekcout master\ngit：'chekcout' 不是一个 git 命令。参见 'git --help'。\n\n您指的是这个么？\n  checkout")])]),t._v(" "),s("p",[t._v("Git 会尝试猜测你的意图，但是它不会越俎代庖。\n如果你把 "),s("code",{staticClass:"literal"},[t._v("help.autocorrect")]),t._v(" 设置成 1，那么只要有一个命令被模糊匹配到了，Git 会自动运行该命令。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git chekcout master\n警告：您运行一个不存在的 Git 命令 'chekcout'。继续执行假定您要要运行的\n是 'checkout'\n在 0.1 秒钟后自动运行...")])]),t._v(" "),s("p",[t._v("注意提示信息中的“0.1 秒”。"),s("code",{staticClass:"literal"},[t._v("help.autocorrect")]),t._v(" 接受一个代表十分之一秒的整数。\n所以如果你把它设置为 50, Git 将在自动执行命令前给你 5 秒的时间改变主意。")]),t._v(" "),s("h2",{attrs:{id:"git-中的着色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-中的着色"}},[t._v("#")]),t._v(" Git 中的着色")]),t._v(" "),s("p",[t._v("\nGit 充分支持对终端内容着色，对你凭肉眼简单、快速分析命令输出有很大帮助。\n你可以设置许多的相关选项来满足自己的偏好。")]),t._v(" "),s("h3",{attrs:{id:"color-ui"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#color-ui"}},[t._v("#")]),t._v(" color.ui")]),t._v(" "),s("p",[t._v("Git 会自动着色大部分输出内容，但如果你不喜欢花花绿绿，也可以关掉。\n要想关掉 Git 的终端颜色输出，试一下这个：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global color.ui false")])]),t._v(" "),s("p",[t._v("这个设置的默认值是 "),s("code",{staticClass:"literal"},[t._v("auto")]),t._v("，它会着色直接输出到终端的内容；而当内容被重定向到一个管道或文件时，则忽略着色功能。")]),t._v(" "),s("p",[t._v("你也可以设置成 "),s("code",{staticClass:"literal"},[t._v("always")]),t._v("，来忽略掉管道和终端的不同，即在任何情况下着色输出。\n你很少会这么设置，在大多数场合下，如果你想在被重定向的输出中插入颜色码，可以传递 "),s("code",{staticClass:"literal"},[t._v("--color")]),t._v(" 标志给 Git 命令来强制它这么做。\n默认设置就已经能满足大多数情况下的需求了。")]),t._v(" "),s("h3",{attrs:{id:"color"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#color"}},[t._v("#")]),t._v(" color.*")]),t._v(" "),s("p",[t._v("要想具体到哪些命令输出需要被着色以及怎样着色，你需要用到和具体命令有关的颜色配置选项。\n它们都能被置为 "),s("code",{staticClass:"literal"},[t._v("true")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("false")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v("always")]),t._v("：")]),t._v(" "),s("pre",{staticClass:"screen"},[t._v("color.branch\ncolor.diff\ncolor.interactive\ncolor.status")]),t._v(" "),s("p",[t._v("另外，以上每个配置项都有子选项，它们可以被用来覆盖其父设置，以达到为输出的各个部分着色的目的。\n例如，为了让 "),s("code",{staticClass:"literal"},[t._v("diff")]),t._v(" 的输出信息以蓝色前景、黑色背景和粗体显示，你可以运行")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global color.diff.meta "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('"blue black bold"')])])]),t._v(" "),s("p",[t._v("你能设置的颜色有："),s("code",{staticClass:"literal"},[t._v("normal")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("black")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("red")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("green")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("yellow")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("blue")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("magenta")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("cyan")]),t._v(" 或 "),s("code",{staticClass:"literal"},[t._v("white")]),t._v("。\n正如以上例子设置的粗体属性，想要设置字体属性的话，可以选择包括："),s("code",{staticClass:"literal"},[t._v("bold")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("dim")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("ul")]),t._v("（下划线）、"),s("code",{staticClass:"literal"},[t._v("blink")]),t._v("、"),s("code",{staticClass:"literal"},[t._v("reverse")]),t._v("（交换前景色和背景色）。")]),t._v(" "),s("h2",{attrs:{id:"外部的合并与比较工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外部的合并与比较工具"}},[t._v("#")]),t._v(" 外部的合并与比较工具")]),t._v(" "),s("p",[t._v("\n虽然 Git 自己内置了一个 "),s("code",{staticClass:"literal"},[t._v("diff")]),t._v(" 实现，而且到目前为止我们一直在使用它，但你能够用一个外部的工具替代它。\n除此以外，你还能设置一个图形化的工具来合并和解决冲突，从而不必自己手动解决。\n这里我们以一个不错且免费的工具 —— Perforce 图形化合并工具（P4Merge） —— 来展示如何用一个外部的工具来合并和解决冲突。")]),t._v(" "),s("p",[t._v("P4Merge 可以在所有主流平台上运行，所以安装上应该没有什么困难。\n在这个例子中，我们使用的路径名可以直接应用在 macOS 和 Linux 上；\n在 Windows 上，"),s("code",{staticClass:"literal"},[t._v("/usr/local/bin")]),t._v(" 需要被改为你的环境中可执行文件所在的目录路径。")]),t._v(" "),s("p",[t._v("首先， "),s("a",{staticClass:"link",attrs:{href:"https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools"}},[t._v("从Perforce 下载 P4Merge")]),t._v("。\n接下来，你要编写一个全局包装脚本来运行你的命令。\n我们会使用 Mac 上的路径来指定该脚本的位置，在其他系统上，它将是 "),s("code",{staticClass:"literal"},[t._v("p4merge")]),t._v(" 二进制文件所在的目录。\n创建一个名为 "),s("code",{staticClass:"literal"},[t._v("extMerge")]),t._v(" 的脚本包装 merge 命令，让它把参数转发给 p4merge 二进制文件：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /usr/local/bin/extMerge\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("!/bin/sh\n/Applications/p4merge.app/Contents/MacOS/p4merge $*")])]),t._v(" "),s("p",[t._v("包装 diff 命令的脚本首先确保传递了七个参数过来，随后把其中两个转发给包装了 merge 的脚本。\n默认情况下， Git 传递以下参数给 "),s("code",{staticClass:"literal"},[t._v("diff")]),t._v("：")]),t._v(" "),s("pre",{staticClass:"source language-"},[s("code",[t._v("path old-file old-hex old-mode new-file new-hex new-mode")])]),t._v(" "),s("p",[t._v("由于你仅仅需要 "),s("code",{staticClass:"literal"},[t._v("old-file")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("new-file")]),t._v(" 参数，由包装 diff 的脚本来转发它们吧。")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /usr/local/bin/extDiff\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v('!/bin/sh\n[ $# -eq 7 ] && /usr/local/bin/extMerge "$2" "$5"')])]),t._v(" "),s("p",[t._v("你也需要确保这些脚本具有可执行权限：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo chmod +x /usr/local/bin/extMerge\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" sudo chmod +x /usr/local/bin/extDiff")])]),t._v(" "),s("p",[t._v("现在你可以修改配置文件来使用你自定义的合并和比较工具了。\n这将涉及许多自定义设置："),s("code",{staticClass:"literal"},[t._v("merge.tool")]),t._v(" 通知 Git 该使用哪个合并工具， "),s("code",{staticClass:"literal"},[t._v("mergetool.<tool>.cmd")]),t._v(" 规定命令运行的方式，"),s("code",{staticClass:"literal"},[t._v("mergetool.<tool>.trustExitCode")]),t._v(" 会通知 Git 程序的返回值是否表示合并操作成功，"),s("code",{staticClass:"literal"},[t._v("diff.external")]),t._v(" 通知 Git 该用什么命令做比较。\n因此，你可以运行以下四条配置命令：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global merge.tool extMerge\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global mergetool.extMerge.cmd "),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n  "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('\'extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"\'')]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global mergetool.extMerge.trustExitCode false\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global diff.external extDiff")])]),t._v(" "),s("p",[t._v("或编辑你的 "),s("code",{staticClass:"literal"},[t._v("~/.gitconfig")]),t._v(" 文件，添加以下各行：")]),t._v(" "),s("pre",{staticClass:"source language-ini"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("[merge]")]),t._v("\n  tool = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("extMerge")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v('[mergetool "extMerge"]')]),t._v("\n  cmd = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v('extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"')]),t._v("\n"),s("span",{staticStyle:{"font-style":"italic"}},[t._v("  trustExitCode = false")]),t._v("\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("[diff]")]),t._v("\n  external = "),s("span",{staticStyle:{"font-style":"italic"}},[t._v("extDiff")])])]),t._v(" "),s("p",[t._v("待一切设置妥当后，如果你像这样运行 diff 命令：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git diff 32d1776b1^ 32d1776b1")])]),t._v(" "),s("p",[t._v("Git 将启动 P4Merge，而不是在命令行输出比较的结果，就像这样：")]),t._v(" "),s("figure",{staticClass:"image"},[s("div",{staticClass:"content"},[s("img",{attrs:{src:a(432),alt:"P4Merge."}})]),t._v(" "),s("figcaption",[t._v("Figure 1. P4Merge.")])]),t._v(" "),s("p",[t._v("如果你尝试合并两个分支，随后遇到了合并冲突，运行 "),s("code",{staticClass:"literal"},[t._v("git mergetool")]),t._v("，Git 会调用 P4Merge 让你通过图形界面来解决冲突。")]),t._v(" "),s("p",[t._v("设置包装脚本的好处在于大大降低了改变 diff 和 merge 工具的工作量。\n举个例子，想把 "),s("code",{staticClass:"literal"},[t._v("extDiff")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("extMerge")]),t._v(" 的工具改成 KDiff3，你要做的仅仅是编辑 "),s("code",{staticClass:"literal"},[t._v("extMerge")]),t._v(" 脚本文件：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat /usr/local/bin/extMerge\n"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v("!/bin/sh\n/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*")])]),t._v(" "),s("p",[t._v("现在，Git 将使用 KDiff3 作为查看比较和解决合并冲突的工具。")]),t._v(" "),s("p",[t._v("Git 预设了许多其他的合并和解决冲突的工具，无需特别的设置你就能用上它们。\n要想看到它支持的工具列表，试一下这个：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git mergetool --tool-help\n'git mergetool --tool=<tool>' may be set to one of the following:\n        emerge\n        gvimdiff\n        gvimdiff2\n        opendiff\n        p4merge\n        vimdiff\n        vimdiff2\n\nThe following tools are valid, but not currently available:\n        araxis\n        bc3\n        codecompare\n        deltawalker\n        diffmerge\n        diffuse\n        ecmerge\n        kdiff3\n        meld\n        tkdiff\n        tortoisemerge\n        xxdiff\n\nSome of the tools listed above only work in a windowed\nenvironment. If run in a terminal-only session, they will fail.")])]),t._v(" "),s("p",[t._v("如果你不想用到 KDiff3 的所有功能，只是想用它来合并，那么 kdiff3 正符合你的要求，运行：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global merge.tool kdiff3")])]),t._v(" "),s("p",[t._v("如果运行了以上命令，而没有设置 "),s("code",{staticClass:"literal"},[t._v("extMerge")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("extDiff")]),t._v(" 文件，Git 会用 KDiff3 做合并，让内置的 "),s("code",{staticClass:"literal"},[t._v("diff")]),t._v(" 来做比较。")]),t._v(" "),s("h2",{attrs:{id:"格式化与多余的空白字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#格式化与多余的空白字符"}},[t._v("#")]),t._v(" 格式化与多余的空白字符")]),t._v(" "),s("p",[t._v("\n格式化与多余的空白字符是许多开发人员在协作时，特别是在跨平台情况下，不时会遇到的令人头疼的琐碎的问题。\n由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交的补丁或其它协作成果中。\n不用怕，Git 提供了一些配置项来帮助你解决这些问题。")]),t._v(" "),s("h3",{attrs:{id:"core-autocrlf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-autocrlf"}},[t._v("#")]),t._v(" core.autocrlf")]),t._v(" "),s("p",[t._v("\n假如你正在 Windows 上写程序，而你的同伴用的是其他系统（或相反），你可能会遇到 CRLF 问题。\n这是因为 Windows 使用回车（CR）和换行（LF）两个字符来结束一行，而 macOS 和 Linux 只使用换行（LF）一个字符。\n虽然这是小问题，但它会极大地扰乱跨平台协作。许多 Windows 上的编辑器会悄悄把行尾的换行字符转换成回车和换行，\n或在用户按下 Enter 键时，插入回车和换行两个字符。")]),t._v(" "),s("p",[t._v("Git 可以在你提交时自动地把回车和换行转换成换行，而在检出代码时把换行转换成回车和换行。\n你可以用 "),s("code",{staticClass:"literal"},[t._v("core.autocrlf")]),t._v(" 来打开此项功能。\n如果是在 Windows 系统上，把它设置成 "),s("code",{staticClass:"literal"},[t._v("true")]),t._v("，这样在检出代码时，换行会被转换成回车和换行：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.autocrlf true")])]),t._v(" "),s("p",[t._v("如果使用以换行作为行结束符的 Linux 或 macOS，你不需要 Git 在检出文件时进行自动的转换；\n然而当一个以回车加换行作为行结束符的文件不小心被引入时，你肯定想让 Git 修正。\n你可以把 "),s("code",{staticClass:"literal"},[t._v("core.autocrlf")]),t._v(" 设置成 input 来告诉 Git 在提交时把回车和换行转换成换行，检出时不转换：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.autocrlf input")])]),t._v(" "),s("p",[t._v("这样在 Windows 上的检出文件中会保留回车和换行，而在 macOS 和 Linux 上，以及版本库中会保留换行。")]),t._v(" "),s("p",[t._v("如果你是 Windows 程序员，且正在开发仅运行在 Windows 上的项目，可以设置 "),s("code",{staticClass:"literal"},[t._v("false")]),t._v(" 取消此功能，把回车保留在版本库中：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.autocrlf false")])]),t._v(" "),s("h3",{attrs:{id:"core-whitespace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-whitespace"}},[t._v("#")]),t._v(" core.whitespace")]),t._v(" "),s("p",[t._v("Git 预先设置了一些选项来探测和修正多余空白字符问题。\n它提供了六种处理多余空白字符的主要选项 —— 其中三个默认开启，另外三个默认关闭，不过你可以自由地设置它们。")]),t._v(" "),s("p",[t._v("默认被打开的三个选项是："),s("code",{staticClass:"literal"},[t._v("blank-at-eol")]),t._v("，查找行尾的空格；"),s("code",{staticClass:"literal"},[t._v("blank-at-eof")]),t._v("，盯住文件底部的空行；\n"),s("code",{staticClass:"literal"},[t._v("space-before-tab")]),t._v("，警惕行头 tab 前面的空格。")]),t._v(" "),s("p",[t._v("默认被关闭的三个选项是："),s("code",{staticClass:"literal"},[t._v("indent-with-non-tab")]),t._v("，揪出以空格而非 tab 开头的行（你可以用 "),s("code",{staticClass:"literal"},[t._v("tabwidth")]),t._v(" 选项控制它）；"),s("code",{staticClass:"literal"},[t._v("tab-in-indent")]),t._v("，监视在行头表示缩进的 tab；"),s("code",{staticClass:"literal"},[t._v("cr-at-eol")]),t._v("，告诉 Git 忽略行尾的回车。")]),t._v(" "),s("p",[t._v("通过设置 "),s("code",{staticClass:"literal"},[t._v("core.whitespace")]),t._v("，你可以让 Git 按照你的意图来打开或关闭以逗号分割的选项。\n要想关闭某个选项，你可以在输入设置选项时不指定它或在它前面加个 "),s("code",{staticClass:"literal"},[t._v("-")]),t._v("。\n例如，如果你想要打开除`space-before-tab` 之外的所有选项，那么可以这样\n（ "),s("code",{staticClass:"literal"},[t._v("trailing-space")]),t._v(" 涵盖了 "),s("code",{staticClass:"literal"},[t._v("blank-at-eol")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("blank-at-eof")]),t._v(" ）：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.whitespace "),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n    trailing-space,-space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol")])]),t._v(" "),s("p",[t._v("你也可以只指定自定义的部分：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.whitespace "),s("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n    -space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol")])]),t._v(" "),s("p",[t._v("当你运行 "),s("code",{staticClass:"literal"},[t._v("git diff")]),t._v(" 命令并尝试给输出着色时，Git 将探测到这些问题，因此你在提交前就能修复它们。\n用 "),s("code",{staticClass:"literal"},[t._v("git apply")]),t._v(" 打补丁时你也会从中受益。\n如果正准备应用的补丁存有特定的空白问题，你可以让 Git 在应用补丁时发出警告：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git apply --whitespace=warn <patch>")])]),t._v(" "),s("p",[t._v("或者让 Git 在打上补丁前自动修正此问题：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git apply --whitespace=fix <patch>")])]),t._v(" "),s("p",[t._v("这些选项也能运用于 "),s("code",{staticClass:"literal"},[t._v("git rebase")]),t._v("。\n如果提交了有空白问题的文件，但还没推送到上游，你可以运行 "),s("code",{staticClass:"literal"},[t._v("git rebase --whitespace=fix")]),t._v(" 来让 Git 在重写补丁时自动修正它们。")]),t._v(" "),s("h2",{attrs:{id:"服务器端配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器端配置"}},[t._v("#")]),t._v(" 服务器端配置")]),t._v(" "),s("p",[t._v("Git 服务器端的配置项相对来说并不多，但仍有一些饶有生趣的选项值得你一看。")]),t._v(" "),s("h3",{attrs:{id:"receive-fsckobjects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#receive-fsckobjects"}},[t._v("#")]),t._v(" receive.fsckObjects")]),t._v(" "),s("p",[t._v("Git 能够确认每个对象的有效性以及 SHA-1 检验和是否保持一致。\n但 Git 不会在每次推送时都这么做。这个操作很耗时间，很有可能会拖慢提交的过程，特别是当库或推送的文件很大的情况下。\n如果想在每次推送时都要求 Git 检查一致性，设置 "),s("code",{staticClass:"literal"},[t._v("receive.fsckObjects")]),t._v(" 为 true 来强迫它这么做：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --system receive.fsckObjects true")])]),t._v(" "),s("p",[t._v("现在 Git 会在每次推送生效前检查库的完整性，确保没有被有问题的客户端引入破坏性数据。")]),t._v(" "),s("h3",{attrs:{id:"receive-denynonfastforwards"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#receive-denynonfastforwards"}},[t._v("#")]),t._v(" receive.denyNonFastForwards")]),t._v(" "),s("p",[t._v("如果你变基已经被推送的提交，继而再推送，又或者推送一个提交到远程分支，而这个远程分支当前指向的提交不在该提交的历史中，这样的推送会被拒绝。\n这通常是个很好的策略，但有时在变基的过程中，你确信自己需要更新远程分支，可以在 push 命令后加 "),s("code",{staticClass:"literal"},[t._v("-f")]),t._v(" 标志来强制更新（force-update）。")]),t._v(" "),s("p",[t._v("要禁用这样的强制更新推送（force-pushes），可以设置 "),s("code",{staticClass:"literal"},[t._v("receive.denyNonFastForwards")]),t._v("：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --system receive.denyNonFastForwards true")])]),t._v(" "),s("p",[t._v("稍后我们会提到，用服务器端的接收钩子也能达到同样的目的。\n那种方法可以做到更细致的控制，例如禁止某一类用户做非快进（non-fast-forwards）推送。")]),t._v(" "),s("h3",{attrs:{id:"receive-denydeletes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#receive-denydeletes"}},[t._v("#")]),t._v(" receive.denyDeletes")]),t._v(" "),s("p",[t._v("有一些方法可以绕过 "),s("code",{staticClass:"literal"},[t._v("denyNonFastForwards")]),t._v(" 策略。其中一种是先删除某个分支，再连同新的引用一起推送回该分支。\n把 "),s("code",{staticClass:"literal"},[t._v("receive.denyDeletes")]),t._v(" 设置为 true 可以把这个漏洞补上：")]),t._v(" "),s("pre",{staticClass:"language-bash"},[s("code",[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --system receive.denyDeletes true")])]),t._v(" "),s("p",[t._v("这样会禁止通过推送删除分支和标签 — 没有用户可以这么做。\n要删除远程分支，必须从服务器手动删除引用文件。\n通过用户访问控制列表（ACL）也能够在用户级的粒度上实现同样的功能，\n你将在 "),s("a",{staticClass:"xref",attrs:{id:"xref-_an_example_git_enforced_policy",href:"#_an_example_git_enforced_policy"}},[t._v("使用强制策略的一个例子")]),t._v(" 一节学到具体的做法。")])])}),[],!1,null,null,null);e.default=i.exports}}]);