(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{533:function(t,e,a){"use strict";a.r(e);var s=a(28),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包"}},[t._v("#")]),t._v(" 打包")]),t._v(" "),a("p",[t._v("虽然我们已经了解了网络传输 Git 数据的常用方法（如 HTTP，SSH 等），但还有另外一种不太常见却又十分有用的方式。")]),t._v(" "),a("p",[t._v("Git 可以将它的数据“打包”到一个文件中。\n这在许多场景中都很有用。\n有可能你的网络中断了，但你又希望将你的提交传给你的合作者们。\n可能你不在办公网中并且出于安全考虑没有给你接入内网的权限。\n可能你的无线、有线网卡坏掉了。\n可能你现在没有共享服务器的权限，你又希望通过邮件将更新发送给别人，\n却不希望通过 "),a("code",{staticClass:"literal"},[t._v("format-patch")]),t._v(" 的方式传输 40 个提交。")]),t._v(" "),a("p",[t._v("这些情况下 "),a("code",{staticClass:"literal"},[t._v("git bundle")]),t._v(" 就会很有用。\n"),a("code",{staticClass:"literal"},[t._v("bundle")]),t._v(" 命令会将 "),a("code",{staticClass:"literal"},[t._v("git push")]),t._v(" 命令所传输的所有内容打包成一个二进制文件，\n你可以将这个文件通过邮件或者闪存传给其他人，然后解包到其他的仓库中。")]),t._v(" "),a("p",[t._v("来看看一个简单的例子。\n假设你有一个包含两个提交的仓库：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log\ncommit 9a466c572fe88b195efd356c3f2bbeccdb504102\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Wed Mar 10 07:34:10 2010 -0800\n\n    second commit\n\ncommit b1ec3248f39900d2a406049d762aa68e9641be25\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Wed Mar 10 07:34:01 2010 -0800\n\n    first commit")])]),t._v(" "),a("p",[t._v("如果你想把这个仓库发送给其他人但你没有其他仓库的权限，或者就是懒得新建一个仓库，\n你就可以用 "),a("code",{staticClass:"literal"},[t._v("git bundle create")]),t._v(" 命令来打包。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git bundle create repo.bundle HEAD master\nCounting objects: 6, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (6/6), 441 bytes, done.\nTotal 6 (delta 0), reused 0 (delta 0)")])]),t._v(" "),a("p",[t._v("然后你就会有一个名为 "),a("code",{staticClass:"literal"},[t._v("repo.bundle")]),t._v(" 的文件，该文件包含了所有重建该仓库 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支所需的数据。\n在使用 "),a("code",{staticClass:"literal"},[t._v("bundle")]),t._v(" 命令时，你需要列出所有你希望打包的引用或者提交的区间。\n如果你希望这个仓库可以在别处被克隆，你应该像例子中那样增加一个 HEAD 引用。")]),t._v(" "),a("p",[t._v("你可以将这个 "),a("code",{staticClass:"literal"},[t._v("repo.bundle")]),t._v(" 文件通过邮件或者U盘传给别人。")]),t._v(" "),a("p",[t._v("另一方面，假设别人传给你一个 "),a("code",{staticClass:"literal"},[t._v("repo.bundle")]),t._v(" 文件并希望你在这个项目上工作。\n你可以从这个二进制文件中克隆出一个目录，就像从一个 URL 克隆一样。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone repo.bundle repo\nCloning into 'repo'...\n...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd repo\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --oneline\n9a466c5 second commit\nb1ec324 first commit")])]),t._v(" "),a("p",[t._v("如果你在打包时没有包含 HEAD 引用，你还需要在命令后指定一个 "),a("code",{staticClass:"literal"},[t._v("-b master")]),t._v(" 或者其他被引入的分支，\n否则 Git 不知道应该检出哪一个分支。")]),t._v(" "),a("p",[t._v("现在假设你提交了 3 个修订，并且要用邮件或者U盘将新的提交放在一个包里传回去。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --oneline\n71b84da last commit - second repo\nc99cf5b fourth commit - second repo\n7011d3d third commit - second repo\n9a466c5 second commit\nb1ec324 first commit")])]),t._v(" "),a("p",[t._v("首先我们需要确认我们希望被打包的提交区间。\n和网络协议不太一样，网络协议会自动计算出所需传输的最小数据集，而我们需要手动计算。\n当然你可以像上面那样将整个仓库打包，但最好仅仅打包变更的部分 —— 就是我们刚刚在本地做的 3 个提交。")]),t._v(" "),a("p",[t._v("为了实现这个目标，你需要计算出差别。\n就像我们在 "),a("a",{staticClass:"xref",attrs:{id:"xref-_commit_ranges",href:"#_commit_ranges"}},[t._v("提交区间")]),t._v(" 介绍的，你有很多种方式去指明一个提交区间。\n我们可以使用 "),a("code",{staticClass:"literal"},[t._v("origin/master..master")]),t._v(" 或者 "),a("code",{staticClass:"literal"},[t._v("master ^origin/master")]),t._v(" 之类的方法\n来获取那 3 个在我们的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支而不在原始仓库中的提交。\n你可以用 "),a("code",{staticClass:"literal"},[t._v("log")]),t._v(" 命令来测试。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --oneline master ^origin/master\n71b84da last commit - second repo\nc99cf5b fourth commit - second repo\n7011d3d third commit - second repo")])]),t._v(" "),a("p",[t._v("这样就获取到我们希望被打包的提交列表，让我们将这些提交打包。\n我们可以用 "),a("code",{staticClass:"literal"},[t._v("git bundle create")]),t._v(" 命令，加上我们想用的文件名，以及要打包的提交区间。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git bundle create commits.bundle master ^9a466c5\nCounting objects: 11, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (9/9), 775 bytes, done.\nTotal 9 (delta 0), reused 0 (delta 0)")])]),t._v(" "),a("p",[t._v("现在在我们的目录下会有一个 "),a("code",{staticClass:"literal"},[t._v("commits.bundle")]),t._v(" 文件。\n如果我们把这个文件发送给我们的合作者，她可以将这个文件导入到原始的仓库中，\n即使在这期间已经有其他的工作提交到这个仓库中。")]),t._v(" "),a("p",[t._v("当她拿到这个包时，她可以在导入到仓库之前查看这个包里包含了什么内容。\n"),a("code",{staticClass:"literal"},[t._v("bundle verify")]),t._v(" 命令可以检查这个文件是否是一个合法的 Git 包，是否拥有共同的祖先来导入。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git bundle verify ../commits.bundle\nThe bundle contains 1 ref\n71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master\nThe bundle requires these 1 ref\n9a466c572fe88b195efd356c3f2bbeccdb504102 second commit\n../commits.bundle is okay")])]),t._v(" "),a("p",[t._v("如果打包工具仅仅把最后两个提交打包，而不是三个，原始的仓库是无法导入这个包的，\n因为这个包缺失了必要的提交记录。这时候 "),a("code",{staticClass:"literal"},[t._v("verify")]),t._v(" 的输出类似：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git bundle verify ../commits-bad.bundle\nerror: Repository lacks these prerequisite commits:\nerror: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 third commit - second repo")])]),t._v(" "),a("p",[t._v("而我们的第一个包是合法的，所以我们可以从这个包里提取出提交。\n如果你想查看这边包里可以导入哪些分支，同样有一个命令可以列出这些顶端：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git bundle list-heads ../commits.bundle\n71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master")])]),t._v(" "),a("p",[a("code",{staticClass:"literal"},[t._v("verify")]),t._v(" 子命令同样可以告诉你有哪些顶端。\n该功能的目的是查看哪些是可以被拉入的，所以你可以使用 "),a("code",{staticClass:"literal"},[t._v("fetch")]),t._v(" 或者 "),a("code",{staticClass:"literal"},[t._v("pull")]),t._v(" 命令从包中导入提交。\n这里我们要从包中取出 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支到我们仓库中的 "),a("em",[t._v("other-master")]),t._v(" 分支：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch ../commits.bundle master:other-master\nFrom ../commits.bundle\n * [new branch]      master     -> other-master")])]),t._v(" "),a("p",[t._v("可以看到我们已经将提交导入到 "),a("code",{staticClass:"literal"},[t._v("other-master")]),t._v(" 分支，以及在这期间我们自己在 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支上的提交。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --oneline --decorate --graph --all\n* 8255d41 (HEAD, master) third commit - first repo\n| * 71b84da (other-master) last commit - second repo\n| * c99cf5b fourth commit - second repo\n| * 7011d3d third commit - second repo\n|/\n* 9a466c5 second commit\n* b1ec324 first commit")])]),t._v(" "),a("p",[t._v("因此，当你在没有合适的网络或者可共享仓库的情况下，"),a("code",{staticClass:"literal"},[t._v("git bundle")]),t._v(" 很适合用于共享或者网络类型的操作。")])])}),[],!1,null,null,null);e.default=n.exports}}]);