(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{476:function(t,i,a){"use strict";a.r(i);var s=a(28),e=Object(s.a)({},(function(){var t=this,i=t.$createElement,a=t._self._c||i;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"初次运行-git-前的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初次运行-git-前的配置"}},[t._v("#")]),t._v(" 初次运行 Git 前的配置")]),t._v(" "),a("p",[t._v("既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。\n每台计算机上只需要配置一次，程序升级时会保留配置信息。\n你可以在任何时候再次通过运行命令来修改它们。")]),t._v(" "),a("p",[t._v("Git 自带一个 "),a("code",{staticClass:"literal"},[t._v("git config")]),t._v(" 的工具来帮助设置控制 Git 外观和行为的配置变量。\n这些变量存储在三个不同的位置：")]),t._v(" "),a("div",{staticClass:"ordered-list arabic"},[a("ol",{staticClass:"arabic"},[a("li",[a("span",{staticClass:"principal"},[a("code",{staticClass:"literal"},[t._v("/etc/gitconfig")]),t._v(" 文件: 包含系统上每一个用户及他们仓库的通用配置。\n如果在执行 "),a("code",{staticClass:"literal"},[t._v("git config")]),t._v(" 时带上 "),a("code",{staticClass:"literal"},[t._v("--system")]),t._v(" 选项，那么它就会读写该文件中的配置变量。\n（由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）")])]),t._v(" "),a("li",[a("span",{staticClass:"principal"},[a("code",{staticClass:"literal"},[t._v("~/.gitconfig")]),t._v(" 或 "),a("code",{staticClass:"literal"},[t._v("~/.config/git/config")]),t._v(" 文件：只针对当前用户。\n你可以传递 "),a("code",{staticClass:"literal"},[t._v("--global")]),t._v(" 选项让 Git 读写此文件，这会对你系统上 "),a("strong",[t._v("所有")]),t._v(" 的仓库生效。")])]),t._v(" "),a("li",[a("span",{staticClass:"principal"},[t._v("当前使用仓库的 Git 目录中的 "),a("code",{staticClass:"literal"},[t._v("config")]),t._v(" 文件（即 "),a("code",{staticClass:"literal"},[t._v(".git/config")]),t._v("）：针对该仓库。\n你可以传递 "),a("code",{staticClass:"literal"},[t._v("--local")]),t._v(" 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。。\n（当然，你需要进入某个 Git 仓库中才能让该选项生效。）")])])])]),t._v(" "),a("p",[t._v("每一个级别会覆盖上一级别的配置，所以 "),a("code",{staticClass:"literal"},[t._v(".git/config")]),t._v(" 的配置变量会覆盖 "),a("code",{staticClass:"literal"},[t._v("/etc/gitconfig")]),t._v(" 中的配置变量。")]),t._v(" "),a("p",[t._v("在 Windows 系统中，Git 会查找 "),a("code",{staticClass:"literal"},[t._v("$HOME")]),t._v(" 目录下（一般情况下是 "),a("code",{staticClass:"literal"},[t._v("C:\\Users\\$USER")]),t._v(" ）的 "),a("code",{staticClass:"literal"},[t._v(".gitconfig")]),t._v(" 文件。\nGit 同样也会寻找 "),a("code",{staticClass:"literal"},[t._v("/etc/gitconfig")]),t._v(" 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。\n如果你在 Windows 上使用 Git 2.x 以后的版本，那么还有一个系统级的配置文件，Windows XP 上在\n"),a("code",{staticClass:"literal"},[t._v("C:\\Documents and Settings\\All Users\\Application Data\\Git\\config")]),t._v(" ，Windows Vista 及更新的版本在\n"),a("code",{staticClass:"literal"},[t._v("C:\\ProgramData\\Git\\config")]),t._v(" 。此文件只能以管理员权限通过 "),a("code",{staticClass:"literal"},[t._v("git config -f <file>")]),t._v(" 来修改。")]),t._v(" "),a("p",[t._v("你可以通过以下命令查看所有的配置以及它们所在的文件：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --list --show-origin")])]),t._v(" "),a("h2",{attrs:{id:"用户信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户信息"}},[t._v("#")]),t._v(" 用户信息")]),t._v(" "),a("p",[t._v("安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。\n这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global user.name "),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"John Doe"')]),t._v("\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global user.email johndoe@example.com")])]),t._v(" "),a("p",[t._v("再次强调，如果使用了 "),a("code",{staticClass:"literal"},[t._v("--global")]),t._v(" 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。\n当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 "),a("code",{staticClass:"literal"},[t._v("--global")]),t._v(" 选项的命令来配置。")]),t._v(" "),a("p",[t._v("很多 GUI 工具都会在第一次运行时帮助你配置这些信息。")]),t._v(" "),a("h2",{attrs:{id:"文本编辑器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本编辑器"}},[t._v("#")]),t._v(" 文本编辑器")]),t._v(" "),a("p",[t._v("既然用户信息已经设置完毕，你可以配置默认文本编辑器了，当 Git 需要你输入信息时会调用它。\n如果未配置，Git 会使用操作系统默认的文本编辑器。")]),t._v(" "),a("p",[t._v("如果你想使用不同的文本编辑器，例如 Emacs，可以这样做：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.editor emacs")])]),t._v(" "),a("p",[t._v("在 Windows 系统上，如果你想要使用别的文本编辑器，那么必须指定可执行文件的完整路径。\n它可能随你的编辑器的打包方式而不同。")]),t._v(" "),a("p",[t._v("对于 Notepad++，一个流行的代码编辑器来说，你可能想要使用 32 位的版本，\n因为在本书编写时 64 位的版本尚不支持所有的插件。\n如果你在使用 32 位的 Windows 系统，或在 64 位系统上使用 64 位的编辑器，那么你需要输入如下命令：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --global core.editor "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("\"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"")])])]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("Vim、Emacs 和 Notepad++ 都是流行的文本编辑器，通常程序员们会在 Linux 和 macOS\n这类基于 Unix 的系统或 Windows 系统上使用它们。\n如果你在使用其他的或 32 版本的编辑器，请在 "),a("a",{staticClass:"xref",attrs:{id:"xref--C-git-commands--_core_editor",href:"/appendix-C/1.html#git-config-core.editor-命令"}},[t._v("git config core.editor 命令")]),t._v("\n中查看设置为该编辑器的具体步骤。")])])]),t._v(" "),a("aside",{staticClass:"admonition warning custom-block",attrs:{title:"Warning","epub:type":"warning"}},[a("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("如果你不这样设置编辑器，那么当 Git 试图启动它时你可能会被弄糊涂、不知所措。\n例如，在 Windows 上 Git 在开始编辑时可能会过早地结束。")])])]),t._v(" "),a("h2",{attrs:{id:"检查配置信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查配置信息"}},[t._v("#")]),t._v(" 检查配置信息")]),t._v(" "),a("p",[t._v("如果想要检查你的配置，可以使用 "),a("code",{staticClass:"literal"},[t._v("git config --list")]),t._v(" 命令来列出所有 Git 当时能找到的配置。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --list\nuser.name=John Doe\nuser.email=johndoe@example.com\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=auto\ncolor.diff=auto\n...")])]),t._v(" "),a("p",[t._v("你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如："),a("code",{staticClass:"literal"},[t._v("/etc/gitconfig")]),t._v(" 与 "),a("code",{staticClass:"literal"},[t._v("~/.gitconfig")]),t._v("）。\n这种情况下，Git 会使用它找到的每一个变量的最后一个配置。")]),t._v(" "),a("p",[t._v("你可以通过输入 "),a("code",{staticClass:"literal"},[t._v("git config <key>")]),t._v("： 来检查 Git 的某一项配置")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config user.name\nJohn Doe")])]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("由于 Git 会从多个文件中读取同一配置变量的不同值，因此你可能会在其中看到意料之外的值而不知道为什么。\n此时，你可以查询 Git 中该变量的 "),a("strong",[t._v("原始")]),t._v(" 值，它会告诉你哪一个配置文件最后设置了该值：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git config --show-origin rerere.autoUpdate\nfile:/home/johndoe/.gitconfig\tfalse")])])])])])}),[],!1,null,null,null);i.default=e.exports}}]);