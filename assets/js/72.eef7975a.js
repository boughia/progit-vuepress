(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{484:function(t,s,e){"use strict";e.r(s);var a=e(28),i=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"引用规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用规范"}},[t._v("#")]),t._v(" 引用规范")]),t._v(" "),e("p",[t._v("纵观全书，我们已经使用过一些诸如远程分支到本地引用的简单映射方式，但这种映射可以更复杂。\n假设你已经跟着前几节在本地创建了一个小的 Git 仓库，现在想要添加一个远程仓库：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git remote add origin https://github.com/schacon/simplegit-progit")])]),t._v(" "),e("p",[t._v("运行上述命令会在你仓库中的 "),e("code",{staticClass:"literal"},[t._v(".git/config")]),t._v(" 文件中添加一个小节，\n并在其中指定远程版本库的名称（"),e("code",{staticClass:"literal"},[t._v("origin")]),t._v("）、URL 和一个用于获取操作的 "),e("strong",[t._v("引用规范（refspec）")]),t._v("：")]),t._v(" "),e("pre",{staticClass:"source language-ini"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v('[remote "origin"]')]),t._v("\n\turl = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("https://github.com/schacon/simplegit-progit")]),t._v("\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("\tfetch = +refs/heads/*:refs/remotes/origin/*")])])]),t._v(" "),e("p",[t._v("引用规范的格式由一个可选的 "),e("code",{staticClass:"literal"},[t._v("+")]),t._v(" 号和紧随其后的 "),e("code",{staticClass:"literal"},[t._v("<src>:<dst>")]),t._v(" 组成，\n其中 "),e("code",{staticClass:"literal"},[t._v("<src>")]),t._v(" 是一个模式（pattern），代表远程版本库中的引用；\n"),e("code",{staticClass:"literal"},[t._v("<dst>")]),t._v(" 是本地跟踪的远程引用的位置。\n"),e("code",{staticClass:"literal"},[t._v("+")]),t._v(" 号告诉 Git 即使在不能快进的情况下也要（强制）更新引用。")]),t._v(" "),e("p",[t._v("默认情况下，引用规范由 "),e("code",{staticClass:"literal"},[t._v("git remote add origin")]),t._v(" 命令自动生成，\nGit 获取服务器中 "),e("code",{staticClass:"literal"},[t._v("refs/heads/")]),t._v(" 下面的所有引用，并将它写入到本地的 "),e("code",{staticClass:"literal"},[t._v("refs/remotes/origin/")]),t._v(" 中。\n所以，如果服务器上有一个 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支，你可以在本地通过下面任意一种方式来访问该分支上的提交记录：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log origin/master\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log remotes/origin/master\n"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log refs/remotes/origin/master")])]),t._v(" "),e("p",[t._v("上面的三个命令作用相同，因为 Git 会把它们都扩展成 "),e("code",{staticClass:"literal"},[t._v("refs/remotes/origin/master")]),t._v("。")]),t._v(" "),e("p",[t._v("如果想让 Git 每次只拉取远程的 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支，而不是所有分支，\n可以把（引用规范的）获取那一行修改为只引用该分支：")]),t._v(" "),e("pre",{staticClass:"source language-"},[e("code",[t._v("fetch = +refs/heads/master:refs/remotes/origin/master")])]),t._v(" "),e("p",[t._v("这仅是针对该远程版本库的 "),e("code",{staticClass:"literal"},[t._v("git fetch")]),t._v(" 操作的默认引用规范。\n如果有某些只希望被执行一次的操作，我们也可以在命令行指定引用规范。\n若要将远程的 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支拉到本地的 "),e("code",{staticClass:"literal"},[t._v("origin/mymaster")]),t._v(" 分支，可以运行：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin master:refs/remotes/origin/mymaster")])]),t._v(" "),e("p",[t._v("你也可以指定多个引用规范。\n在命令行中，你可以按照如下的方式拉取多个分支：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin master:refs/remotes/origin/mymaster "),e("span",{staticStyle:{"font-weight":"bold","font-style":"italic"}},[t._v("\\")]),t._v("\n\t topic:refs/remotes/origin/topic\nFrom git@github.com:schacon/simplegit\n ! [rejected]        master     -> origin/mymaster  (non fast forward)\n * [new branch]      topic      -> origin/topic")])]),t._v(" "),e("p",[t._v("在这个例子中，对 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支的拉取操作被拒绝，因为它不是一个可以快进的引用。\n我们可以通过在引用规范之前指定 "),e("code",{staticClass:"literal"},[t._v("+")]),t._v(" 号来覆盖该规则。")]),t._v(" "),e("p",[t._v("你也可以在配置文件中指定多个用于获取操作的引用规范。\n如果想在每次从 "),e("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 远程仓库获取时都包括 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 和 "),e("code",{staticClass:"literal"},[t._v("experiment")]),t._v(" 分支，添加如下两行：")]),t._v(" "),e("pre",{staticClass:"source language-ini"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v('[remote "origin"]')]),t._v("\n\turl = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("https://github.com/schacon/simplegit-progit")]),t._v("\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("\tfetch = +refs/heads/master:refs/remotes/origin/master")]),t._v("\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("\tfetch = +refs/heads/experiment:refs/remotes/origin/experiment")])])]),t._v(" "),e("p",[t._v("我们不能在模式中使用部分通配符，所以像下面这样的引用规范是不合法的：")]),t._v(" "),e("pre",{staticClass:"source language-ini"},[e("code",[t._v("fetch = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("+refs/heads/qa*:refs/remotes/origin/qa*")])])]),t._v(" "),e("p",[t._v("但我们可以使用命名空间（或目录）来达到类似目的。\n假设你有一个 QA 团队，他们推送了一系列分支，同时你只想要获取 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 和\nQA 团队的所有分支而不关心其他任何分支，那么可以使用如下配置：")]),t._v(" "),e("pre",{staticClass:"source language-ini"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v('[remote "origin"]')]),t._v("\n\turl = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("https://github.com/schacon/simplegit-progit")]),t._v("\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("\tfetch = +refs/heads/master:refs/remotes/origin/master")]),t._v("\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("\tfetch = +refs/heads/qa/*:refs/remotes/origin/qa/*")])])]),t._v(" "),e("p",[t._v("如果项目的工作流很复杂，有 QA 团队推送分支、开发人员推送分支、集成团队推送并且在远程分支上展开协作，你就可以像这样（在本地）为这些分支创建各自的命名空间，非常方便。")]),t._v(" "),e("h2",{attrs:{id:"引用规范推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用规范推送"}},[t._v("#")]),t._v(" 引用规范推送")]),t._v(" "),e("p",[t._v("像上面这样从远程版本库获取已在命名空间中的引用当然很棒，但 QA 团队最初应该如何将他们的分支放入远程的 "),e("code",{staticClass:"literal"},[t._v("qa/")]),t._v(" 命名空间呢？\n我们可以通过引用规范推送来完成这个任务。")]),t._v(" "),e("p",[t._v("如果 QA 团队想把他们的 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支推送到远程服务器的 "),e("code",{staticClass:"literal"},[t._v("qa/master")]),t._v(" 分支上，可以运行：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master:refs/heads/qa/master")])]),t._v(" "),e("p",[t._v("如果他们希望 Git 每次运行 "),e("code",{staticClass:"literal"},[t._v("git push origin")]),t._v(" 时都像上面这样推送，可以在他们的配置文件中添加一条 "),e("code",{staticClass:"literal"},[t._v("push")]),t._v(" 值：")]),t._v(" "),e("pre",{staticClass:"source language-ini"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v('[remote "origin"]')]),t._v("\n\turl = "),e("span",{staticStyle:{"font-style":"italic"}},[t._v("https://github.com/schacon/simplegit-progit")]),t._v("\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("\tfetch = +refs/heads/*:refs/remotes/origin/*")]),t._v("\n"),e("span",{staticStyle:{"font-style":"italic"}},[t._v("\tpush = refs/heads/master:refs/heads/qa/master")])])]),t._v(" "),e("p",[t._v("正如刚才所指出的，这会让 "),e("code",{staticClass:"literal"},[t._v("git push origin")]),t._v(" 默认把本地 "),e("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支推送到远程 "),e("code",{staticClass:"literal"},[t._v("qa/master")]),t._v(" 分支。")]),t._v(" "),e("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("div",{staticClass:"content"},[e("p",[t._v("你无法通过引用规范从一个仓库获取并推送到另一个仓库。\n这样做的示例见 "),e("a",{staticClass:"xref",attrs:{id:"xref--ch06-github--_fetch_and_push_on_different_repositories",href:"/chapter-6/2.html#让你的-github-公共仓库保持更新"}},[t._v("让你的 GitHub 公共仓库保持更新")]),t._v("。")])])]),t._v(" "),e("h2",{attrs:{id:"删除引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除引用"}},[t._v("#")]),t._v(" 删除引用")]),t._v(" "),e("p",[t._v("你还可以借助类似下面的命令通过引用规范从远程服务器上删除引用：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin :topic")])]),t._v(" "),e("p",[t._v("因为引用规范（的格式）是 "),e("code",{staticClass:"literal"},[t._v("<src>:<dst>")]),t._v("，所以上述命令把 "),e("code",{staticClass:"literal"},[t._v("<src>")]),t._v(" 留空，意味着把远程版本库的 "),e("code",{staticClass:"literal"},[t._v("topic")]),t._v(" 分支定义为空值，也就是删除它。")]),t._v(" "),e("p",[t._v("或者你可以使用更新的语法（自 Git v1.7.0 以后可用）：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",[e("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin --delete topic")])])])}),[],!1,null,null,null);s.default=i.exports}}]);