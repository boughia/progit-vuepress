(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{452:function(t,n,e){"use strict";e.r(n);var s=e(28),i=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"命令行-git-方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令行-git-方式"}},[t._v("#")]),t._v(" 命令行 Git 方式")]),t._v(" "),e("p",[t._v("一种方式就是启动一个 shell 进程并在里面使用 Git 的命令行工具来完成任务。\n这种方式看起来很循规蹈矩，但是它的优点也因此而来，就是支持所有的 Git 的特性。\n它也碰巧相当简单，因为几乎所有运行时环境都有一个相对简单的方式来调用一个带有命令行参数的进程。\n然而，这种方式也有一些固有的缺点。")]),t._v(" "),e("p",[t._v("首先就是所有的输出都是纯文本格式。\n这意味着你将被迫解析 Git 的有时会改变的输出格式，以随时了解它工作的进度和结果。更糟糕的是，这可能是毫无效率并且容易出错的。")]),t._v(" "),e("p",[t._v("另外一个就是令人捉急的错误修复能力。\n如果一个版本库被莫名其妙地损毁，或者用户使用了一个奇奇怪怪的配置， Git 只会简单地拒绝进行一些操作。")]),t._v(" "),e("p",[t._v("还有一个就是进程的管理。\nGit 会要求你在一个独立的进程中维护一个 shell 环境，这可能会无谓地增加复杂性。\n试图协调许许多多的类似的进程（尤其是在某些情况下，当不同的进程在访问相同的版本库时）是对你的能力的极大挑战。")])])}),[],!1,null,null,null);n.default=i.exports}}]);