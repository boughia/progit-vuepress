(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{320:function(t,e,s){t.exports=s.p+"assets/img/git-diff-check.c69eff7e.png"},321:function(t,e,s){t.exports=s.p+"assets/img/small-team-1.09ada785.png"},322:function(t,e,s){t.exports=s.p+"assets/img/small-team-2.6779b03f.png"},323:function(t,e,s){t.exports=s.p+"assets/img/small-team-3.9928e1b1.png"},324:function(t,e,s){t.exports=s.p+"assets/img/small-team-4.8fc06eda.png"},325:function(t,e,s){t.exports=s.p+"assets/img/small-team-5.4dbe0374.png"},326:function(t,e,s){t.exports=s.p+"assets/img/small-team-6.8c3cb756.png"},327:function(t,e,s){t.exports=s.p+"assets/img/small-team-7.b7f076ab.png"},328:function(t,e,s){t.exports=s.p+"assets/img/small-team-flow.489f1dae.png"},329:function(t,e,s){t.exports=s.p+"assets/img/managed-team-1.85db660f.png"},330:function(t,e,s){t.exports=s.p+"assets/img/managed-team-2.0332df17.png"},331:function(t,e,s){t.exports=s.p+"assets/img/managed-team-3.75c09490.png"},332:function(t,e,s){t.exports=s.p+"assets/img/managed-team-flow.f8372e6f.png"},333:function(t,e,s){t.exports=s.p+"assets/img/public-small-1.d8903b67.png"},334:function(t,e,s){t.exports=s.p+"assets/img/public-small-2.0bc39f1e.png"},335:function(t,e,s){t.exports=s.p+"assets/img/public-small-3.6d12cab1.png"},519:function(t,e,s){"use strict";s.r(e);var a=s(28),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"向一个项目贡献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向一个项目贡献"}},[t._v("#")]),t._v(" 向一个项目贡献")]),t._v(" "),a("p",[t._v("\n描述如何向一个项目贡献的主要困难在于完成贡献有很多不同的方式。\n因为 Git 非常灵活，人们可以通过不同的方式来一起工作，所以描述应该如何贡献并不是非常准确——每一个项目都有一点儿不同。\n影响因素包括活跃贡献者的数量、选择的工作流程、提交权限与可能包含的外部贡献方法。")]),t._v(" "),a("p",[t._v("第一个影响因素是活跃贡献者的数量——积极地向这个项目贡献代码的用户数量以及他们的贡献频率。\n在许多情况下，你可能会有两三个开发者一天提交几次，对于不活跃的项目可能更少。\n对于大一些的公司或项目，开发者的数量可能会是上千，每天都有成百上千次提交。\n这很重要，因为随着开发者越来越多，在确保你的代码能干净地应用或轻松地合并时会遇到更多问题。\n提交的改动可能表现为过时的，也可能在你正在做改动或者等待改动被批准应用时被合并入的工作严重损坏。\n如何保证代码始终是最新的，并且提交始终是有效的？")]),t._v(" "),a("p",[t._v("下一个影响因素是项目使用的工作流程。\n它是中心化的吗，即每一个开发者都对主线代码有相同的写入权限？\n项目是否有一个检查所有补丁的维护者或整合者？\n是否所有的补丁是同行评审后批准的？\n你是否参与了那个过程？\n是否存在副官系统，你必须先将你的工作提交到上面？")]),t._v(" "),a("p",[t._v("下一个影响因素是提交权限。\n是否有项目的写权限会使向项目贡献所需的流程有极大的不同。\n如果没有写权限，项目会选择何种方式接受贡献的工作？\n是否甚至有一个如何贡献的规范？\n你一次贡献多少工作？\n你多久贡献一次？")]),t._v(" "),a("p",[t._v("所有这些问题都会影响实际如何向一个项目贡献，以及对你来说哪些工作流程更适合或者可用。\n我们将会由浅入深，通过一系列用例来讲述其中的每一个方面；从这些例子应该能够建立实际中你需要的特定工作流程。")]),t._v(" "),a("h2",{attrs:{id:"提交准则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交准则"}},[t._v("#")]),t._v(" 提交准则")]),t._v(" "),a("p",[t._v("在我们开始查看特定的用例前，这里有一个关于提交信息的快速说明。\n有一个好的创建提交的准则并且坚持使用会让与 Git 工作和与其他人协作更容易。\nGit 项目提供了一个文档，其中列举了关于创建提交到提交补丁的若干好的提示——可以在 Git 源代码中的 "),a("code",{staticClass:"literal"},[t._v("Documentation/SubmittingPatches")]),t._v(" 文件中阅读它。")]),t._v(" "),a("p",[t._v("\n首先，你的提交不应该包含任何空白错误。\nGit 提供了一个简单的方式来检查这点——在提交前，运行 "),a("code",{staticClass:"literal"},[t._v("git diff --check")]),t._v("，它将会找到可能的空白错误并将它们为你列出来。")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(320),alt:"`git diff --check` 的输出。"}})]),t._v(" "),a("figcaption",[t._v("Figure 4. "),a("code",{staticClass:"literal"},[t._v("git diff --check")]),t._v(" 的输出")])]),t._v(" "),a("p",[t._v("如果在提交前运行那个命令，可以知道提交中是否包含可能会使其他开发者恼怒的空白问题。")]),t._v(" "),a("p",[t._v("接下来，尝试让每一个提交成为一个逻辑上的独立变更集。\n如果可以，尝试让改动可以理解——不要在整个周末编码解决五个问题，然后在周一时将它们提交为一个巨大的提交。\n即使在周末期间你无法提交，在周一时使用暂存区域将你的工作最少拆分为每个问题一个提交，并且为每一个提交附带一个有用的信息。\n如果其中一些改动修改了同一个文件，尝试使用 "),a("code",{staticClass:"literal"},[t._v("git add --patch")]),t._v(" 来部分暂存文件（在 "),a("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_interactive_staging",href:"/chapter-7/2.html#交互式暂存"}},[t._v("交互式暂存")]),t._v(" 中有详细介绍）。\n不管你做一个或五个提交，只要所有的改动是在同一时刻添加的，项目分支末端的快照就是独立的，使同事开发者必须审查你的改动时尽量让事情容易些。")]),t._v(" "),a("p",[t._v("当你之后需要时这个方法也会使拉出或还原一个变更集更容易些。\n"),a("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_rewriting_history",href:"/chapter-7/6.html#重写历史"}},[t._v("重写历史")]),t._v(" 描述了重写历史与交互式暂存文件的若干有用的 Git 技巧——在将工作发送给其他人前使用这些工具来帮助生成一个干净又易懂的历史。")]),t._v(" "),a("p",[t._v("最后一件要牢记的事是提交信息。\n有一个创建优质提交信息的习惯会使 Git 的使用与协作容易的多。\n一般情况下，信息应当以少于 50 个字符（25个汉字）的单行开始且简要地描述变更，接着是一个空白行，再接着是一个更详细的解释。\nGit 项目要求一个更详细的解释，包括做改动的动机和它的实现与之前行为的对比——这是一个值得遵循的好规则。\n使用指令式的语气来编写提交信息，比如使用“Fix bug”而非“Fixed bug”或“Fixes bug”。\n这里是一份 "),a("a",{staticClass:"link",attrs:{href:"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html"}},[t._v("最初由 Tim Pope 写的模板")]),t._v("：")]),t._v(" "),a("pre",{staticClass:"source language-text"},[a("code",[t._v("首字母大写的摘要（不多于 50 个字符）\n\n如果必要的话，加入更详细的解释文字。在大概 72 个字符的时候换行。\n在某些情形下，第一行被当作一封电子邮件的标题，剩下的文本作为正文。\n分隔摘要与正文的空行是必须的（除非你完全省略正文），\n如果你将两者混在一起，那么类似变基等工具无法正常工作。\n\n使用指令式的语气来编写提交信息：使用“Fix bug”而非“Fixed bug”或“Fixes bug”。\n此约定与 git merge 和 git revert 命令生成提交说明相同。\n\n空行接着更进一步的段落。\n\n- 标号也是可以的。\n\n- 项目符号可以使用典型的连字符或星号，后跟一个空格，行之间用空行隔开，\n  但是可以依据不同的惯例有所不同。\n\n- 使用悬挂式缩进")])]),t._v(" "),a("p",[t._v("如果你所有的提交信息都遵循此模版，那么对你和与你协作的其他开发者来说事情会变得非常容易。\nGit 项目有一个良好格式化的提交信息——尝试在那儿运行 "),a("code",{staticClass:"literal"},[t._v("git log --no-merges")]),t._v("\n来看看漂亮的格式化的项目提交历史像什么样。")]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: 按我们说的去做，不要照着我们做的去做。","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("h2",[t._v("按我们说的去做，不要照着我们做的去做。")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("为简单起见，本书中很多例子的提交说明并没有遵循这样良好的格式，\n我们只是对 "),a("code",{staticClass:"literal"},[t._v("git commit")]),t._v(" 使用了 "),a("code",{staticClass:"literal"},[t._v("-m")]),t._v(" 选项。")]),t._v(" "),a("p",[t._v("简而言之，按我们说的去做，不要照着我们做的去做。")])])]),t._v(" "),a("h2",{attrs:{id:"私有小型团队"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#私有小型团队"}},[t._v("#")]),t._v(" 私有小型团队")]),t._v(" "),a("p",[t._v("\n你可能会遇到的最简单的配置是有一两个其他开发者的私有项目。\n“私有” 在这个上下文中，意味着闭源——不可以从外面的世界中访问到。\n你和其他的开发者都有仓库的推送权限。")]),t._v(" "),a("p",[t._v("在这个环境下，可以采用一个类似使用 Subversion 或其他集中式的系统时会使用的工作流程。\n依然可以得到像离线提交、非常容易地新建分支与合并分支等高级功能，但是工作流程可以是很简单的；主要的区别是合并发生在客户端这边而不是在提交时发生在服务器那边。\n让我们看看当两个开发者在一个共享仓库中一起工作时会是什么样子。\n第一个开发者，John，克隆了仓库，做了改动，然后本地提交。\n（为了缩短这些例子长度，协议信息已被替换为 "),a("code",{staticClass:"literal"},[t._v("...")]),t._v("。）")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" John"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("s Machine\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone john@githost:simplegit.git\nCloning into 'simplegit'...\n...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd simplegit/\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim lib/simplegit.rb\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'remove invalid default value'")]),t._v("\n[master 738ee87] remove invalid default value\n 1 files changed, 1 insertions(+), 1 deletions(-)")])]),t._v(" "),a("p",[t._v("第二个开发者，Jessica，做了同样的事情——克隆仓库并提交了一个改动：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" Jessica"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("s Machine\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone jessica@githost:simplegit.git\nCloning into 'simplegit'...\n...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd simplegit/\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim TODO\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'add reset task'")]),t._v("\n[master fbff5bc] add reset task\n 1 files changed, 1 insertions(+), 0 deletions(-)")])]),t._v(" "),a("p",[t._v("现在，Jessica 把她的工作推送到服务器上，一切正常：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" Jessica"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("s Machine\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master\n...\nTo jessica@githost:simplegit.git\n   1edee6b..fbff5bc  master -> master")])]),t._v(" "),a("p",[t._v("The last line of the output above shows a useful return message from the push operation.\nThe basic format is "),a("code",{staticClass:"literal"},[t._v("<oldref>..<newref> fromref -> toref")]),t._v(", where "),a("code",{staticClass:"literal"},[t._v("oldref")]),t._v(" means the old reference, "),a("code",{staticClass:"literal"},[t._v("newref")]),t._v(" means the new reference, "),a("code",{staticClass:"literal"},[t._v("fromref")]),t._v(" is the name of the local reference being pushed, and "),a("code",{staticClass:"literal"},[t._v("toref")]),t._v(" is the name of the remote reference being updated.\nYou’ll see similar output like this below in the discussions, so having a basic idea of the meaning will help in understanding the various states of the repositories.\nMore details are available in the documentation for "),a("a",{staticClass:"link",attrs:{href:"https://git-scm.com/docs/git-push"}},[t._v("git-push")]),t._v(".")]),t._v(" "),a("p",[t._v("John 稍候也做了些改动，将它们提交到了本地仓库中，然后试着将它们推送到同一个服务器：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" John"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("s Machine\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master\nTo john@githost:simplegit.git\n ! [rejected]        master -> master (non-fast forward)\nerror: failed to push some refs to 'john@githost:simplegit.git'")])]),t._v(" "),a("p",[t._v("这时 John 会推送失败，因为之前 Jessica 已经推送了她的更改。\n如果之前习惯于用 Subversion 那么理解这点特别重要，因为你会注意到两个开发者并没有编辑同一个文件。\n尽管 Subversion 会对编辑的不同文件在服务器上自动进行一次合并，但 Git 要求你先在本地合并提交。\n换言之，John 必须先抓取 Jessica 的上游改动并将它们合并到自己的本地仓库中，才能被允许推送。")]),t._v(" "),a("p",[t._v("第一步，John 抓取 Jessica 的工作（这只会 "),a("strong",[t._v("抓取")]),t._v(" Jessica 的上游工作，并不会将它合并到 John 的工作中）：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin\n...\nFrom john@githost:simplegit\n + 049d078...fbff5bc master     -> origin/master")])]),t._v(" "),a("p",[t._v("在这个时候，John 的本地仓库看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(321),alt:"John 的分叉历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 5. John 的分叉历史")])]),t._v(" "),a("p",[t._v("现在 John 可以将抓取下来的 Jessica 的工作合并到他自己的本地工作中了：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge origin/master\nMerge made by the 'recursive' strategy.\n TODO |    1 +\n 1 files changed, 1 insertions(+), 0 deletions(-)")])]),t._v(" "),a("p",[t._v("合并进行得很顺利——John 更新后的历史现在看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(322),alt:"合并了 `origin/master` 之后 John 的仓库。"}})]),t._v(" "),a("figcaption",[t._v("Figure 6. 合并了 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 之后 John 的仓库")])]),t._v(" "),a("p",[t._v("此时，John 可能想要测试新的代码，以确保 Jessica 的工作没有影响他自己的工作，\n当一切正常后，他就能将新合并的工作推送到服务器了：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master\n...\nTo john@githost:simplegit.git\n   fbff5bc..72bbc59  master -> master")])]),t._v(" "),a("p",[t._v("最终，John 的提交历史看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(323),alt:"推送到 `origin` 服务器后 John 的历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 7. 推送到 "),a("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 服务器后 John 的历史")])]),t._v(" "),a("p",[t._v("在此期间，Jessica 新建了一个名为 "),a("code",{staticClass:"literal"},[t._v("issue54")]),t._v(" 的主题分支，然后在该分支上提交了三次。\n她还没有抓取 John 的改动，所以她的提交历史看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(324),alt:"Jessica 的主题分支。"}})]),t._v(" "),a("figcaption",[t._v("Figure 8. Jessica 的主题分支")])]),t._v(" "),a("p",[t._v("忽然，Jessica 发现 John 向服务器推送了一些新的工作，她想要看一下，\n于是就抓取了所有服务器上的新内容：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" Jessica"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("s Machine\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin\n...\nFrom jessica@githost:simplegit\n   fbff5bc..72bbc59  master     -> origin/master")])]),t._v(" "),a("p",[t._v("那会同时拉取 John 推送的工作。\nJessica 的历史现在看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(325),alt:"抓取 John 的改动后 Jessica 的历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 9. 抓取 John 的改动后 Jessica 的历史")])]),t._v(" "),a("p",[t._v("Jessica 认为她的主题分支已经准备好了，但她像知道需要将 John 工作的哪些合并到自己的工作中才能推送。\n她运行 "),a("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 找了出来：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log --no-merges issue54..origin/master\ncommit 738ee872852dfaa9d6634e0dea7a324040193016\nAuthor: John Smith <jsmith@example.com>\nDate:   Fri May 29 16:01:27 2009 -0700\n\n   remove invalid default value")])]),t._v(" "),a("p",[a("code",{staticClass:"literal"},[t._v("issue54..origin/master")]),t._v(" 语法是一个日志过滤器，要求 Git 只显示所有在后面分支\n（在本例中是 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v("）但不在前面分支（在本例中是 "),a("code",{staticClass:"literal"},[t._v("issue54")]),t._v("）的提交的列表。\n我们将会在 "),a("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_commit_ranges",href:"/chapter-7/1.html#提交区间"}},[t._v("提交区间")]),t._v(" 中详细介绍这个语法。")]),t._v(" "),a("p",[t._v("目前，我们可以从输出中看到有一个 John 生成的但是 Jessica 还没有合并的提交。\n如果她合并 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v("，也就是说将会修改她的本地工作的那个单个提交。")]),t._v(" "),a("p",[t._v("现在，Jessica 可以合并她的特性工作到她的 master 分支，\n合并 John 的工作（"),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v("）进入她的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支，然后再次推送回服务器。")]),t._v(" "),a("p",[t._v("首先（在已经提交了所有 "),a("code",{staticClass:"literal"},[t._v("issue54")]),t._v(" 主题分支上的工作后），为了整合所有这些工作，\n她切换回她的 master 分支。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout master\nSwitched to branch 'master'\nYour branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.")])]),t._v(" "),a("p",[t._v("Jessica 既可以先合并 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 也可以先合并 "),a("code",{staticClass:"literal"},[t._v("issue54")]),t._v(" ——它们都是上游，所以顺序并没有关系。\n不论她选择的顺序是什么最终的结果快照是完全一样的；只是历史会稍微有些不同。\n她选择先合并 "),a("code",{staticClass:"literal"},[t._v("issue54")]),t._v("：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge issue54\nUpdating fbff5bc..4af4298\nFast forward\n README           |    1 +\n lib/simplegit.rb |    6 +++++-\n 2 files changed, 6 insertions(+), 1 deletions(-)")])]),t._v(" "),a("p",[t._v("没有发生问题，如你所见它是一次简单的快进合并。\n现在 Jessica 在本地合并了 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 分支上 John 之前抓取的工作：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge origin/master\nAuto-merging lib/simplegit.rb\nMerge made by the 'recursive' strategy.\n lib/simplegit.rb |    2 +-\n 1 files changed, 1 insertions(+), 1 deletions(-)")])]),t._v(" "),a("p",[t._v("每一个文件都干净地合并了，Jessica 的历史现在看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(326),alt:"合并了 John 的改动后 Jessica 的历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 10. 合并了 John 的改动后 Jessica 的历史")])]),t._v(" "),a("p",[t._v("现在 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 是可以从 Jessica 的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支到达的，\n所以她应该可以成功地推送（假设同一时间 John 并没有更多推送）：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin master\n...\nTo jessica@githost:simplegit.git\n   72bbc59..8059c15  master -> master")])]),t._v(" "),a("p",[t._v("每一个开发者都提交了几次并成功地合并了其他人的工作。")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(327),alt:"推送所有的改动回服务器后 Jessica 的历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 11. 推送所有的改动回服务器后 Jessica 的历史")])]),t._v(" "),a("p",[t._v("这是一个最简单的工作流程。\n你通常会在一个主题分支上工作一会儿，当它准备好整合时就合并到你的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。\n当想要共享工作时，如果有改动的话就抓取它然后合并到你自己的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支，\n之后推送到服务器上的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。通常顺序像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(328),alt:"一个简单的多人 Git 工作流程的通常事件顺序。"}})]),t._v(" "),a("figcaption",[t._v("Figure 12. 一个简单的多人 Git 工作流程的通常事件顺序")])]),t._v(" "),a("h2",{attrs:{id:"私有管理团队"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#私有管理团队"}},[t._v("#")]),t._v(" 私有管理团队")]),t._v(" "),a("p",[t._v("\n在接下来的场景中，你会看到大型私有团队中贡献者的角色。\n你将学到如何在这种工作环境中工作，其中小组基于特性进行协作，而这些团队的贡献将会由其他人整合。")]),t._v(" "),a("p",[t._v("让我们假设 John 与 Jessica 在一个特性（"),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v("）上工作，\n同时 Jessica 与第三个开发者 Josie 在第二个特性（"),a("code",{staticClass:"literal"},[t._v("featureB")]),t._v("）上工作。\n在本例中，公司使用了一种整合-管理者工作流程，独立小组的工作只能被特定的工程师整合，\n主仓库的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支只能被那些工程师更新。\n在这种情况下，所有的工作都是在基于团队的分支上完成的并且稍后会被整合者拉到一起。")]),t._v(" "),a("p",[t._v("因为 Jessica 在两个特性上工作，并且平行地与两个不同的开发者协作，让我们跟随她的工作流程。\n假设她已经克隆了仓库，首先决定在 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 上工作。\n她为那个特性创建了一个新分支然后在那做了一些工作：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" Jessica"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("s Machine\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b featureA\nSwitched to a new branch 'featureA'\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim lib/simplegit.rb\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'add limit to log function'")]),t._v("\n[featureA 3300904] add limit to log function\n 1 files changed, 1 insertions(+), 1 deletions(-)")])]),t._v(" "),a("p",[t._v("在这个时候，她需要将工作共享给 John，所以她推送了 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 分支的提交到服务器上。\nJessica 没有 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支的推送权限——只有整合者有——所以为了与 John 协作必须推送另一个分支。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push -u origin featureA\n...\nTo jessica@githost:simplegit.git\n * [new branch]      featureA -> featureA")])]),t._v(" "),a("p",[t._v("Jessica 向 John 发邮件告诉他已经推送了一些工作到 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 分支现在可以看一看。\n当她等待 John 的反馈时，Jessica 决定与 Josie 开始在 "),a("code",{staticClass:"literal"},[t._v("featureB")]),t._v(" 上工作。\n为了开始工作，她基于服务器的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支开始了一个新分支。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("#")]),t._v(" Jessica"),a("span",{staticStyle:{border:"1px solid #FF0000"}},[t._v("'")]),t._v("s Machine\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b featureB origin/master\nSwitched to a new branch 'featureB'")])]),t._v(" "),a("p",[t._v("现在，Jessica 在 "),a("code",{staticClass:"literal"},[t._v("featureB")]),t._v(" 分支上创建了几次提交：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim lib/simplegit.rb\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'made the ls-tree function recursive'")]),t._v("\n[featureB e5b0fdc] made the ls-tree function recursive\n 1 files changed, 1 insertions(+), 1 deletions(-)\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" vim lib/simplegit.rb\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'add ls-files'")]),t._v("\n[featureB 8512791] add ls-files\n 1 files changed, 5 insertions(+), 0 deletions(-)")])]),t._v(" "),a("p",[t._v("现在 Jessica 的仓库看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(329),alt:"Jessica 的初始提交历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 13. Jessica 的初始提交历史")])]),t._v(" "),a("p",[t._v("她准备好推送工作了，但是一封来自 Josie 的邮件告知一些初始的“featureB”\n工作已经被推送到服务器的 "),a("code",{staticClass:"literal"},[t._v("featureBee")]),t._v(" 上了。\nJessica 在能够将她的工作推送到服务器前，需要将那些改动与她自己的合并。\n她首先通过 "),a("code",{staticClass:"literal"},[t._v("git fetch")]),t._v(" 抓取了 Josie 的改动：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin\n...\nFrom jessica@githost:simplegit\n * [new branch]      featureBee -> origin/featureBee")])]),t._v(" "),a("p",[t._v("假设 Jessica 还在她检出的 "),a("code",{staticClass:"literal"},[t._v("featureB")]),t._v(" 分支上，现在可以通过 "),a("code",{staticClass:"literal"},[t._v("git merge")]),t._v(" 将其合并到她做的工作中了：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge origin/featureBee\nAuto-merging lib/simplegit.rb\nMerge made by the 'recursive' strategy.\n lib/simplegit.rb |    4 ++++\n 1 files changed, 4 insertions(+), 0 deletions(-)")])]),t._v(" "),a("p",[t._v("此时，Jessica 想要将所有合并后的“featureB”推送会服务器，，但她并不想直接推送她自己的 "),a("code",{staticClass:"literal"},[t._v("featureB")]),t._v(" 分支。\n由于 Josie 已经开启了一个上游的 "),a("code",{staticClass:"literal"},[t._v("featureBee")]),t._v(" 分支，因此 Jessica 想要推送到 "),a("strong",[t._v("这个")]),t._v(" 分支上，于是她这样做：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push -u origin featureB:featureBee\n...\nTo jessica@githost:simplegit.git\n   fba9af8..cd685d1  featureB -> featureBee")])]),t._v(" "),a("p",[t._v("这称作一个 "),a("em",[t._v("引用规范")]),t._v("。\n查看 "),a("a",{staticClass:"xref",attrs:{id:"xref--ch10-git-internals--_refspec",href:"/chapter-10/5.html#引用规范"}},[t._v("引用规范")]),t._v(" 了解关于 Git 引用规范与通过它们可以做的不同的事情的详细讨论。\n也要注意 "),a("code",{staticClass:"literal"},[t._v("-u")]),t._v(" 标记；这是 "),a("code",{staticClass:"literal"},[t._v("--set-upstream")]),t._v(" 的简写，该标记会为之后轻松地推送与拉取配置分支。")]),t._v(" "),a("p",[t._v("紧接着，John 发邮件给 Jessica 说他已经推送了一些改动到 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 分支并要求她去验证它们。\n她运行一个 "),a("code",{staticClass:"literal"},[t._v("git fetch")]),t._v(" 来拉取下那些改动：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin\n...\nFrom jessica@githost:simplegit\n   3300904..aad881d  featureA   -> origin/featureA")])]),t._v(" "),a("p",[t._v("Jessica 通过比较新抓取的 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 分支和她同一分支的本地副本，看到了 John 的新工作日志。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git log featureA..origin/featureA\ncommit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6\nAuthor: John Smith <jsmith@example.com>\nDate:   Fri May 29 19:57:33 2009 -0700\n\n    changed log output to 30 from 25")])]),t._v(" "),a("p",[t._v("如果 Jessica 觉得可以，她就能将 John 的新工作合并到她本地的 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 分支上：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout featureA\nSwitched to branch 'featureA'\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge origin/featureA\nUpdating 3300904..aad881d\nFast forward\n lib/simplegit.rb |   10 +++++++++-\n1 files changed, 9 insertions(+), 1 deletions(-)")])]),t._v(" "),a("p",[t._v("最后，Jessica 可能想要对整个合并后的内容做一些小修改，\n于是她将这些修改提交到了本地的 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 分支，接着将最终的结果推送回了服务器。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit -am "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("'small tweak'")]),t._v("\n[featureA 774b3ed] small tweak\n 1 files changed, 1 insertions(+), 1 deletions(-)\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push\n...\nTo jessica@githost:simplegit.git\n   3300904..774b3ed  featureA -> featureA")])]),t._v(" "),a("p",[t._v("Jessica 的提交历史现在看起来像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(330),alt:"在一个主题分支提交后 Jessica 的历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 14. 在一个主题分支提交后 Jessica 的历史")])]),t._v(" "),a("p",[t._v("这时，Jessica、Josie 与 John 通知整合者服务器上的 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 与 "),a("code",{staticClass:"literal"},[t._v("featureBee")]),t._v(" 分支准备好整合到主线中了。\n在整合者将这些分支合并到主线后，就能一次将这个新的合并提交抓取下来，历史看起来就会像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(331),alt:"合并了 Jessica 的两个主题分支后她的历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 15. 合并了 Jessica 的两个主题分支后她的历史")])]),t._v(" "),a("p",[t._v("许多团队切换到 Git 就是看中了这种能让多个团队并行工作、并在之后合并不同工作的能力。\n团队中更小一些的子小组可以通过远程分支协作而不必影响或妨碍整个团队的能力是 Git 的一个巨大优势。\n在这儿看到的工作流程顺序类似这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(332),alt:"这种管理团队工作流程的基本顺序。"}})]),t._v(" "),a("figcaption",[t._v("Figure 16. 这种管理团队工作流程的基本顺序")])]),t._v(" "),a("h2",{attrs:{id:"派生的公开项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#派生的公开项目"}},[t._v("#")]),t._v(" 派生的公开项目")]),t._v(" "),a("p",[t._v("\n向公开项目做贡献有一点儿不同。\n因为没有权限直接更新项目的分支，你必须用其他办法将工作给维护者。\n第一个例子描述在支持简单派生的 Git 托管上使用派生来做贡献。\n许多托管站点支持这个功能（包括 GitHub、BitBucket、repo.or.cz 等等），许多项目维护者期望这种风格的贡献。\n下一节会讨论偏好通过邮件接受贡献补丁的项目。")]),t._v(" "),a("p",[t._v("首先，你可能想要克隆主仓库，为计划贡献的补丁或补丁序列创建一个主题分支，然后在那儿做工作。\n顺序看起来基本像这样：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git clone <url>\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cd project\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b featureA\n  ... work ...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit\n  ... work ...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit")])]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("你可以用 "),a("code",{staticClass:"literal"},[t._v("rebase -i")]),t._v(" 将工作压缩成一个单独的提交，或者重排提交中的工作使补丁更容易被维护者审核——\n查看 "),a("a",{staticClass:"xref",attrs:{href:"/chapter-7/6.html#重写历史"}},[t._v("重写历史")]),t._v(" 了解关于交互式变基的更多信息。")])])]),t._v(" "),a("p",[t._v("当你的分支工作完成后准备将其贡献回维护者，去原始项目中然后点击“Fork”按钮，创建一份自己的可写的项目派生仓库。\n然后需要在本地仓库中将该仓库添加为一个新的远程仓库，在本例中称作 "),a("code",{staticClass:"literal"},[t._v("myfork")]),t._v("：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git remote add myfork <url>")])]),t._v(" "),a("p",[t._v("然后需要推送工作到上面。\n相对于合并到主分支再推送上去，推送你正在工作的主题分支到仓库上更简单。\n原因是工作如果不被接受或者是被拣选的，就不必回退你的 master 分支\n（拣选操作 "),a("code",{staticClass:"literal"},[t._v("cherry-pick")]),t._v(" 详见 "),a("a",{staticClass:"xref",attrs:{id:"xref-_rebase_cherry_pick",href:"#_rebase_cherry_pick"}},[t._v("变基与拣选工作流")]),t._v("）。\n如果维护者合并、变基或拣选你的工作，不管怎样你最终会通过拉取他们的仓库找回来你的工作。")]),t._v(" "),a("p",[t._v("In any event, you can push your work with:")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push -u myfork featureA")])]),t._v(" "),a("p",[t._v("\n当工作已经被推送到你的派生仓库后，你需要通知原项目的维护者你有想要他们合并的工作。\n这通常被称作一个 "),a("strong",[t._v("拉取请求（Pull Request）")]),t._v("，你通常可以通过网站生成它——\nGitHub 有它自己的 Pull Request 机制，我们将会在 "),a("a",{staticClass:"xref",attrs:{id:"xref--ch06-github",href:"/chapter-6/index.html"}},[t._v("GitHub")]),t._v("\n介绍——也可以运行 "),a("code",{staticClass:"literal"},[t._v("git request-pull")]),t._v(" 命令然后手动地将输出发送电子邮件给项目的维护者。")]),t._v(" "),a("p",[a("code",{staticClass:"literal"},[t._v("git request-pull")]),t._v(" 命令接受一个要拉取主题分支的基础分支，以及它们要拉取的 Git 仓库的 URL，\n产生一个请求拉取的所有修改的摘要。\n例如，Jessica 想要发送给 John 一个拉取请求，她已经在刚刚推送的分支上做了两次提交。她可以运行这个：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git request-pull origin/master myfork\nThe following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:\nJessica Smith (1):\n        added a new function\n\nare available in the git repository at:\n\n  git://githost/simplegit.git featureA\n\nJessica Smith (2):\n      add limit to log function\n      change log output to 30 from 25\n\n lib/simplegit.rb |   10 +++++++++-\n 1 files changed, 9 insertions(+), 1 deletions(-)")])]),t._v(" "),a("p",[t._v("此输出可被发送给维护者——它告诉他们工作是从哪个分支开始的、提交的摘要、以及从哪里拉取这些工作。")]),t._v(" "),a("p",[t._v("在一个你不是维护者的项目上，通常有一个总是跟踪 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支会很方便，在主题分支上做工作是因为如果它们被拒绝时你可以轻松地丢弃。\n如果同一时间主仓库移动了然后你的提交不再能干净地应用，那么使工作主题独立于主题分支也会使你变基（rebase）工作时更容易。\n例如，你想要提供第二个特性工作到项目，不要继续在刚刚推送的主题分支上工作——从主仓库的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支重新开始：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b featureB origin/master\n  ... work ...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push myfork featureB\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git request-pull origin/master myfork\n  ... email generated request pull to maintainer ...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin")])]),t._v(" "),a("p",[t._v("现在，每一个特性都保存在一个贮藏库中——类似于补丁队列——可以重写、变基与修改而不会让特性互相干涉或互相依赖，像这样：")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(333),alt:"`featureB` 的初始提交历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 17. "),a("code",{staticClass:"literal"},[t._v("featureB")]),t._v(" 的初始提交历史")])]),t._v(" "),a("p",[t._v("假设项目维护者已经拉取了一串其他补丁，然后尝试拉取你的第一个分支，但是没有干净地合并。\n在这种情况下，可以尝试变基那个分支到 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 的顶部，为维护者解决冲突，然后重新提交你的改动：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout featureA\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git rebase origin/master\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push -f myfork featureA")])]),t._v(" "),a("p",[t._v("这样会重写你的历史，现在看起来像是 "),a("a",{staticClass:"xref",attrs:{id:"xref-psp_b",href:"#psp_b"}},[a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 工作之后的提交历史")])]),t._v(" "),a("figure",{staticClass:"image",attrs:{id:"psp_b"}},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(334),alt:"`featureA` 工作之后的提交历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 18. "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 工作之后的提交历史")])]),t._v(" "),a("p",[t._v("因为你将分支变基了，所以必须为推送命令指定 "),a("code",{staticClass:"literal"},[t._v("-f")]),t._v(" 选项，这样才能将服务器上有一个不是它的后代的提交的 "),a("code",{staticClass:"literal"},[t._v("featureA")]),t._v(" 分支替换掉。\n一个替代的选项是推送这个新工作到服务器上的一个不同分支（可能称作 "),a("code",{staticClass:"literal"},[t._v("featureAv2")]),t._v("）。")]),t._v(" "),a("p",[t._v("让我们看一个更有可能的情况：维护者看到了你的第二个分支上的工作并且很喜欢其中的概念，但是想要你修改一下实现的细节。\n你也可以利用这次机会将工作基于项目现在的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。\n你从现在的 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 分支开始一个新分支，在那儿压缩 "),a("code",{staticClass:"literal"},[t._v("featureB")]),t._v(" 的改动，解决任何冲突，改变实现，然后推送它为一个新分支。")]),t._v(" "),a("p"),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b featureBv2 origin/master\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git merge --squash featureB\n  ... change implementation ...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push myfork featureBv2")])]),t._v(" "),a("p",[a("code",{staticClass:"literal"},[t._v("--squash")]),t._v(" 选项接受被合并的分支上的所有工作，并将其压缩至一个变更集，\n使仓库变成一个真正的合并发生的状态，而不会真的生成一个合并提交。\n这意味着你的未来的提交将会只有一个父提交，并允许你引入另一个分支的所有改动，\n然后在记录一个新提交前做更多的改动。同样 "),a("code",{staticClass:"literal"},[t._v("--no-commit")]),t._v(" 选项在默认合并过程中可以用来延迟生成合并提交。")]),t._v(" "),a("p",[t._v("现在你可以给维护者发送一条消息，表示你已经做了要求的修改然后他们可以在你的 "),a("code",{staticClass:"literal"},[t._v("featureBv2")]),t._v(" 分支上找到那些改动。")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:s(335),alt:"`featureBv2` 工作之后的提交历史。"}})]),t._v(" "),a("figcaption",[t._v("Figure 19. "),a("code",{staticClass:"literal"},[t._v("featureBv2")]),t._v(" 工作之后的提交历史")])]),t._v(" "),a("h2",{attrs:{id:"通过邮件的公开项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过邮件的公开项目"}},[t._v("#")]),t._v(" 通过邮件的公开项目")]),t._v(" "),a("p",[t._v("\n许多项目建立了接受补丁的流程——需要检查每一个项目的特定规则，因为它们之间有区别。\n因为有几个历史悠久的、大型的项目会通过一个开发者的邮件列表接受补丁，现在我们将会通过一个例子来演示。")]),t._v(" "),a("p",[t._v("工作流程与之前的用例是类似的——你为工作的每一个补丁序列创建主题分支。\n区别是如何提交它们到项目中。\n生成每一个提交序列的电子邮件版本然后邮寄它们到开发者邮件列表，而不是派生项目然后推送到你自己的可写版本。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b topicA\n  ... work ...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit\n  ... work ...\n"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git commit")])]),t._v(" "),a("p",[t._v("\n现在有两个提交要发送到邮件列表。\n使用 "),a("code",{staticClass:"literal"},[t._v("git format-patch")]),t._v(" 来生成可以邮寄到列表的 mbox 格式的文件——它将每一个提交转换为一封电子邮件，提交信息的第一行作为主题，剩余信息与提交引入的补丁作为正文。\n它有一个好处是使用 "),a("code",{staticClass:"literal"},[t._v("format-patch")]),t._v(" 生成的一封电子邮件应用的提交正确地保留了所有的提交信息。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git format-patch -M origin/master\n0001-add-limit-to-log-function.patch\n0002-changed-log-output-to-30-from-25.patch")])]),t._v(" "),a("p",[a("code",{staticClass:"literal"},[t._v("format-patch")]),t._v(" 命令打印出它创建的补丁文件名字。\n"),a("code",{staticClass:"literal"},[t._v("-M")]),t._v(" 开关告诉 Git 查找重命名。\n文件最后看起来像这样：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat 0001-add-limit-to-log-function.patch\nFrom 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001\nFrom: Jessica Smith <jessica@example.com>\nDate: Sun, 6 Apr 2008 10:17:23 -0700\nSubject: [PATCH 1/2] add limit to log function\n\nLimit log functionality to the first 20\n\n---\n lib/simplegit.rb |    2 +-\n 1 files changed, 1 insertions(+), 1 deletions(-)\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex 76f47bc..f9815f1 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -14,7 +14,7 @@ class SimpleGit\n   end\n\n   def log(treeish = 'master')\n-    command(\"git log #{treeish}\")\n+    command(\"git log -n 20 #{treeish}\")\n   end\n\n   def ls_tree(treeish = 'master')\n--\n2.1.0")])]),t._v(" "),a("p",[t._v("也可以编辑这些补丁文件为邮件列表添加更多不想要在提交信息中显示出来的信息。\n如果在 "),a("code",{staticClass:"literal"},[t._v("---")]),t._v(" 行与补丁开头（"),a("code",{staticClass:"literal"},[t._v("diff --git")]),t._v(" 行）之间添加文本，那么开发者就可以阅读它，但是应用补丁时会忽略它。")]),t._v(" "),a("p",[t._v("为了将其邮寄到邮件列表，你既可以将文件粘贴进电子邮件客户端，也可以通过命令行程序发送它。\n粘贴文本经常会发生格式化问题，特别是那些不会合适地保留换行符与其他空白的 “更聪明的” 客户端。\n幸运的是，Git 提供了一个工具帮助你通过 IMAP 发送正确格式化的补丁，这可能对你更容易些。\n我们将会演示如何通过 Gmail 发送一个补丁，它正好是我们所知最好的邮件代理；可以在之前提到的 Git 源代码中的 "),a("code",{staticClass:"literal"},[t._v("Documentation/SubmittingPatches")]),t._v(" 文件的最下面了解一系列邮件程序的详细指令。")]),t._v(" "),a("p",[t._v("\n首先，需要在 "),a("code",{staticClass:"literal"},[t._v("~/.gitconfig")]),t._v(" 文件中设置 imap 区块。\n可以通过一系列的 "),a("code",{staticClass:"literal"},[t._v("git config")]),t._v(" 命令来分别设置每一个值，或者手动添加它们，不管怎样最后配置文件应该看起来像这样：")]),t._v(" "),a("pre",{staticClass:"source language-ini"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("[imap]")]),t._v("\n  folder = "),a("span",{staticStyle:{"font-style":"italic"}},[t._v('"[Gmail]/Drafts"')]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  host = imaps://imap.gmail.com")]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  user = user@gmail.com")]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  pass = YX]8g76G_2^sFbd")]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  port = 993")]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  sslverify = false")])])]),t._v(" "),a("p",[t._v("如果 IMAP 服务器不使用 SSL，最后两行可能没有必要，host 的值会是 "),a("code",{staticClass:"literal"},[t._v("imap://")]),t._v(" 而不是 "),a("code",{staticClass:"literal"},[t._v("imaps://")]),t._v("。\n当那些设置完成后，可以使用 "),a("code",{staticClass:"literal"},[t._v("git imap-send")]),t._v(" 将补丁序列放在特定 IMAP 服务器的 Drafts 文件夹中：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" cat *.patch |git imap-send\nResolving imap.gmail.com... ok\nConnecting to [74.125.142.109]:993... ok\nLogging in...\nsending 2 messages\n100% (2/2) done")])]),t._v(" "),a("p",[t._v("此时，你可以到 Drafts 文件夹中，修改收件人字段为想要发送补丁的邮件列表，\n可能需要抄送给维护者或负责那个部分的人，然后发送。")]),t._v(" "),a("p",[t._v("你也可以通过一个 SMTP 服务器发送补丁。\n同之前一样，你可以通过一系列的 "),a("code",{staticClass:"literal"},[t._v("git config")]),t._v(" 命令来分别设置选项，\n或者你可以手动地将它们添加到你的 "),a("code",{staticClass:"literal"},[t._v("~/.gitconfig")]),t._v(" 文件的 sendmail 区块：")]),t._v(" "),a("pre",{staticClass:"source language-ini"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("[sendemail]")]),t._v("\n  smtpencryption = "),a("span",{staticStyle:{"font-style":"italic"}},[t._v("tls")]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  smtpserver = smtp.gmail.com")]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  smtpuser = user@gmail.com")]),t._v("\n"),a("span",{staticStyle:{"font-style":"italic"}},[t._v("  smtpserverport = 587")])])]),t._v(" "),a("p",[t._v("当这完成后，你可以使用 "),a("code",{staticClass:"literal"},[t._v("git send-email")]),t._v(" 发送你的补丁：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git send-email *.patch\n0001-added-limit-to-log-function.patch\n0002-changed-log-output-to-30-from-25.patch\nWho should the emails appear to be from? [Jessica Smith <jessica@example.com>]\nEmails will be sent from: Jessica Smith <jessica@example.com>\nWho should the emails be sent to? jessica@example.com\nMessage-ID to be used as In-Reply-To for the first email? y")])]),t._v(" "),a("p",[t._v("然后，对于正在发送的每一个补丁，Git 会吐出这样的一串日志信息：")]),t._v(" "),a("pre",{staticClass:"source language-text"},[a("code",[t._v("(mbox) Adding cc: Jessica Smith <jessica@example.com> from\n  \\line 'From: Jessica Smith <jessica@example.com>'\nOK. Log says:\nSendmail: /usr/sbin/sendmail -i jessica@example.com\nFrom: Jessica Smith <jessica@example.com>\nTo: jessica@example.com\nSubject: [PATCH 1/2] added limit to log function\nDate: Sat, 30 May 2009 13:29:15 -0700\nMessage-Id: <1243715356-61726-1-git-send-email-jessica@example.com>\nX-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty\nIn-Reply-To: <y>\nReferences: <y>\n\nResult: OK")])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("这个部分介绍了处理可能会遇到的几个迥然不同类型的 Git 项目的一些常见的工作流程，\n介绍了帮助管理这个过程的一些新工具。\n接下来，你会了解到如何在贡献的另一面工作：维护一个 Git 项目。\n你将会学习如何成为一个仁慈的独裁者或整合管理者。")])])}),[],!1,null,null,null);e.default=i.exports}}]);