(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{464:function(t,a,s){"use strict";s.r(a);var e=s(28),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"分支与合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支与合并"}},[t._v("#")]),t._v(" 分支与合并")]),t._v(" "),s("p",[t._v("Git 有几个实现大部的分支及合并功能的实用命令。")]),t._v(" "),s("h2",{attrs:{id:"git-branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("git branch")]),t._v(" 命令实际上是某种程度上的分支管理工具。\n它可以列出你所有的分支、创建新分支、删除分支及重命名分支。")]),t._v(" "),s("p",[s("a",{staticClass:"xref",attrs:{id:"xref--ch03-git-branching",href:"/chapter-3/index.html"}},[t._v("Git 分支")]),t._v(" 一节主要是为 "),s("code",{staticClass:"literal"},[t._v("branch")]),t._v(" 命令来设计的，它贯穿了整个章节。\n首先，我们在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch03-git-branching--_create_new_branch",href:"/chapter-3/1.html#分支创建"}},[t._v("分支创建")]),t._v(" 一节中介绍了它，然后我们在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch03-git-branching--_branch_management",href:"/chapter-3/3.html#分支管理"}},[t._v("分支管理")]),t._v(" 一节中介绍了它的其它大部分特性（列举及删除）。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch03-git-branching--_tracking_branches",href:"/chapter-3/5.html#跟踪分支"}},[t._v("跟踪分支")]),t._v(" 一节中，我们使用 "),s("code",{staticClass:"literal"},[t._v("git branch -u")]),t._v(" 选项来设置一个跟踪分支。")]),t._v(" "),s("p",[t._v("最后，我们在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch10-git-internals--_git_refs",href:"/chapter-10/3.html#git-引用"}},[t._v("Git 引用")]),t._v(" 一节中讲到了它在背后做一什么。")]),t._v(" "),s("h2",{attrs:{id:"git-checkout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("git checkout")]),t._v(" 命令用来切换分支，或者检出内容到工作目录。")]),t._v(" "),s("p",[t._v("我们是在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch03-git-branching--_switching_branches",href:"/chapter-3/1.html#分支切换"}},[t._v("分支切换")]),t._v(" 一节中第一次认识了命令及 "),s("code",{staticClass:"literal"},[t._v("git branch")]),t._v(" 命令。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-3/5.html#跟踪分支"}},[t._v("跟踪分支")]),t._v(" 一节中我们了解了如何使用 "),s("code",{staticClass:"literal"},[t._v("--track")]),t._v(" 标志来开始跟踪分支。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_checking_out_conflicts",href:"/chapter-7/8.html#检出冲突"}},[t._v("检出冲突")]),t._v(" 一节中，我们用此命令和 "),s("code",{staticClass:"literal"},[t._v("--conflict=diff3")]),t._v(" 来重新介绍文件冲突。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-7/7.html#重置揭密"}},[t._v("重置揭密")]),t._v(" 一节中，我们进一步了解了其细节及与 "),s("code",{staticClass:"literal"},[t._v("git reset")]),t._v(" 的关系。")]),t._v(" "),s("p",[t._v("最后，我们在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch10-git-internals--ref_the_ref",href:"/chapter-10/3.html#head-引用"}},[t._v("HEAD 引用")]),t._v(" 一节中介绍了此命令的一些实现细节。")]),t._v(" "),s("h2",{attrs:{id:"git-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("git merge")]),t._v(" 工具用来合并一个或者多个分支到你已经检出的分支中。\n然后它将当前分支指针移动到合并结果上。")]),t._v(" "),s("p",[t._v("我们首先在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch03-git-branching--_basic_branching",href:"/chapter-3/2.html#新建分支"}},[t._v("新建分支")]),t._v(" 一节中介绍了 "),s("code",{staticClass:"literal"},[t._v("git merge")]),t._v(" 命令。\n虽然它在本书的各种地方都有用到，但是 "),s("code",{staticClass:"literal"},[t._v("merge")]),t._v(" 命令只有几个变种，一般只是 "),s("code",{staticClass:"literal"},[t._v("git merge <branch>")]),t._v(" 带上一个你想合并进来的一个分支名称。")]),t._v(" "),s("p",[t._v("我们在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch05-distributed-git--_public_project",href:"/chapter-5/2.html#派生的公开项目"}},[t._v("派生的公开项目")]),t._v(" 的后面介绍了如何做一个 "),s("code",{staticClass:"literal"},[t._v("squashed merge")]),t._v(" （指 Git 合并时将其当作一个新的提交而不是记录你合并时的分支的历史记录。）")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-7/8.html#高级合并"}},[t._v("高级合并")]),t._v(" 一节中，我们介绍了合并的过程及命令，包含 "),s("code",{staticClass:"literal"},[t._v("-Xignore-space-change")]),t._v(" 命令及 "),s("code",{staticClass:"literal"},[t._v("--abort")]),t._v(" 选项来中止一个有问题的提交。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-7/4.html#签署工作_commits"}},[t._v("签署提交")]),t._v(" 一节中我们学习了如何在合并前验证签名，如果你项目正在使用 GPG 签名的话。")]),t._v(" "),s("p",[t._v("最后，我们在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_subtree_merge",href:"/chapter-7/8.html#子树合并"}},[t._v("子树合并")]),t._v(" 一节中学习了子树合并。")]),t._v(" "),s("h2",{attrs:{id:"git-mergetool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-mergetool"}},[t._v("#")]),t._v(" git mergetool")]),t._v(" "),s("p",[t._v("当你在 Git 的合并中遇到问题时，可以使用 "),s("code",{staticClass:"literal"},[t._v("git mergetool")]),t._v(" 来启动一个外部的合并帮助工具。")]),t._v(" "),s("p",[t._v("我们在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-3/2.html#遇到冲突时的分支合并"}},[t._v("遇到冲突时的分支合并")]),t._v(" 中快速介绍了一下它，然后在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch08-customizing-git--_external_merge_tools",href:"/chapter-8/1.html#外部的合并与比较工具"}},[t._v("外部的合并与比较工具")]),t._v(" 一节中介绍了如何实现你自己的外部合并工具的细节。")]),t._v(" "),s("h2",{attrs:{id:"git-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 命令用来展示一个项目的可达历史记录，从最近的提交快照起。\n默认情况下，它只显示你当前所在分支的历史记录，但是可以显示不同的甚至多个头记录或分支以供遍历。\n此命令通常也用来在提交记录级别显示两个或多个分支之间的差异。")]),t._v(" "),s("p",[t._v("在本书的每一章几乎都有用到此命令来描述一个项目的历史。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch02-git-basics-chapter--_viewing_history",href:"/chapter-2/3.html#查看提交历史"}},[t._v("查看提交历史")]),t._v(" 一节中我们介绍了此命令，并深入做了研究。\n研究了包括 "),s("code",{staticClass:"literal"},[t._v("-p")]),t._v(" 和 "),s("code",{staticClass:"literal"},[t._v("--stat")]),t._v(" 选项来了解每一个提交引入的变更，及使用`--pretty` 和 "),s("code",{staticClass:"literal"},[t._v("--online")]),t._v(" 选项来查看简洁的历史记录。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-3/1.html#分支创建"}},[t._v("分支创建")]),t._v(" 一节中我们使用它加 "),s("code",{staticClass:"literal"},[t._v("--decorate")]),t._v(" 选项来简单的可视化我们分支的指针所在，同时我们使用 "),s("code",{staticClass:"literal"},[t._v("--graph")]),t._v(" 选项来查看分叉的历史记录是怎么样的。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch05-distributed-git--_private_team",href:"/chapter-5/2.html#私有小型团队"}},[t._v("私有小型团队")]),t._v(" 和 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_commit_ranges",href:"/chapter-7/1.html#提交区间"}},[t._v("提交区间")]),t._v(" 章节中，我们介绍了在使用 "),s("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 命令时用 "),s("code",{staticClass:"literal"},[t._v("branchA..branchB")]),t._v(" 的语法来查看一个分支相对于另一个分支, 哪一些提交是唯一的。\n在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-7/1.html#提交区间"}},[t._v("提交区间")]),t._v(" 一节中我们作了更多介绍。")]),t._v(" "),s("p",[t._v("在 <_merge_log>> 和 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_triple_dot",href:"/chapter-7/1.html#三点"}},[t._v("三点")]),t._v(" 章节中，我们介绍了 "),s("code",{staticClass:"literal"},[t._v("branchA...branchB")]),t._v(" 格式和 "),s("code",{staticClass:"literal"},[t._v("--left-right")]),t._v(" 语法来查看哪些仅其中一个分支。\n在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_merge_log",href:"/chapter-7/8.html#合并日志"}},[t._v("合并日志")]),t._v(" 一节中我们还研究了如何使用 "),s("code",{staticClass:"literal"},[t._v("--merge")]),t._v(" 选项来帮助合并冲突调试，同样也使用 "),s("code",{staticClass:"literal"},[t._v("--cc")]),t._v(" 选项来查看在你历史记录中的合并提交的冲突。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_git_reflog",href:"/chapter-7/1.html#引用日志"}},[t._v("引用日志")]),t._v(" 一节中我们使用此工具和 "),s("code",{staticClass:"literal"},[t._v("-g")]),t._v(" 选项 而不是遍历分支来查看 Git 的 "),s("code",{staticClass:"literal"},[t._v("reflog")]),t._v("。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_searching",href:"/chapter-7/5.html#搜索"}},[t._v("搜索")]),t._v(" 一节中我们研究了`-S` 及 "),s("code",{staticClass:"literal"},[t._v("-L")]),t._v(" 选项来进行来在代码的历史变更中进行相当优雅地搜索，如一个函数的历史。")]),t._v(" "),s("p",[t._v("在 "),s("a",{staticClass:"xref",attrs:{href:"/chapter-7/4.html#签署工作_commits"}},[t._v("签署提交")]),t._v(" 一节中，我们了解了如何使用 "),s("code",{staticClass:"literal"},[t._v("--show-signature")]),t._v(" 来为每一个提交的 "),s("code",{staticClass:"literal"},[t._v("git log")]),t._v(" 输出中，添加一个判断是否已经合法的签名的一个验证。")]),t._v(" "),s("h2",{attrs:{id:"git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("git stash")]),t._v(" 命令用来临时地保存一些还没有提交的工作，以便在分支上不需要提交未完成工作就可以清理工作目录。")]),t._v(" "),s("p",[s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_git_stashing",href:"/chapter-7/3.html#贮藏与清理"}},[t._v("贮藏与清理")]),t._v(" 一整个章节基本就是在讲这个命令。")]),t._v(" "),s("h2",{attrs:{id:"git-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" git tag")]),t._v(" "),s("p",[s("code",{staticClass:"literal"},[t._v("git tag")]),t._v(" 命令用来为代码历史记录中的某一个点指定一个永久的书签。\n一般来说它用于发布相关事项。")]),t._v(" "),s("p",[t._v("我们在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch02-git-basics-chapter--_git_tagging",href:"/chapter-2/6.html#打标签"}},[t._v("打标签")]),t._v(" 一节中介绍了此命令及相关细节，并在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch05-distributed-git--_tagging_releases",href:"/chapter-5/3.html#为发布打标签"}},[t._v("为发布打标签")]),t._v(" 一节实践了此命令。")]),t._v(" "),s("p",[t._v("我也在 "),s("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_signing",href:"/chapter-7/4.html#签署工作"}},[t._v("签署工作")]),t._v(" 一节中介绍了如何使用 "),s("code",{staticClass:"literal"},[t._v("-s")]),t._v(" 标志创建一个 GPG 签名的标签，然后使用 "),s("code",{staticClass:"literal"},[t._v("-v")]),t._v(" 选项来验证。")])])}),[],!1,null,null,null);a.default=r.exports}}]);