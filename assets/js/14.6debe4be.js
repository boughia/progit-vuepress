(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{293:function(t,s,e){t.exports=e.p+"assets/img/remote-branches-1.39126cf1.png"},294:function(t,s,e){t.exports=e.p+"assets/img/remote-branches-2.22fa5520.png"},295:function(t,s,e){t.exports=e.p+"assets/img/remote-branches-3.070aa72d.png"},296:function(t,s,e){t.exports=e.p+"assets/img/remote-branches-4.3d3f6f12.png"},297:function(t,s,e){t.exports=e.p+"assets/img/remote-branches-5.d4727783.png"},503:function(t,s,e){"use strict";e.r(s);var a=e(28),i=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程分支"}},[t._v("#")]),t._v(" 远程分支")]),t._v(" "),a("p",[t._v("\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n你可以通过 "),a("code",{staticClass:"literal"},[t._v("git ls-remote <remote>")]),t._v(" 来显式地获得远程引用的完整列表，\n或者通过 "),a("code",{staticClass:"literal"},[t._v("git remote show <remote>")]),t._v(" 获得远程分支的更多信息。\n然而，一个更常见的做法是利用远程跟踪分支。")]),t._v(" "),a("p",[t._v("远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信，\nGit 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签，\n这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。")]),t._v(" "),a("p",[t._v("它们以 "),a("code",{staticClass:"literal"},[t._v("<remote>/<branch>")]),t._v(" 的形式命名。\n例如，如果你想要看你最后一次与远程仓库 "),a("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 通信时 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支的状态，你可以查看 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 分支。\n你与同事合作解决一个问题并且他们推送了一个 "),a("code",{staticClass:"literal"},[t._v("iss53")]),t._v(" 分支，你可能有自己的本地 "),a("code",{staticClass:"literal"},[t._v("iss53")]),t._v(" 分支，\n然而在服务器上的分支会以 "),a("code",{staticClass:"literal"},[t._v("origin/iss53")]),t._v(" 来表示。")]),t._v(" "),a("p",[t._v("这可能有一点儿难以理解，让我们来看一个例子。\n假设你的网络里有一个在 "),a("code",{staticClass:"literal"},[t._v("git.ourcompany.com")]),t._v(" 的 Git 服务器。\n如果你从这里克隆，Git 的 "),a("code",{staticClass:"literal"},[t._v("clone")]),t._v(" 命令会为你自动将其命名为 "),a("code",{staticClass:"literal"},[t._v("origin")]),t._v("，拉取它的所有数据，\n创建一个指向它的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支的指针，并且在本地将其命名为 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v("。\nGit 也会给你一个与 origin 的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支在指向同一个地方的本地 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支，这样你就有工作的基础。")]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: “origin” 并无特殊含义","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("h2",[t._v("“origin” 并无特殊含义")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。\n同时 “master” 是当你运行 "),a("code",{staticClass:"literal"},[t._v("git init")]),t._v(" 时默认的起始分支名字，原因仅仅是它的广泛使用，\n“origin” 是当你运行 "),a("code",{staticClass:"literal"},[t._v("git clone")]),t._v(" 时默认的远程仓库名字。\n如果你运行 "),a("code",{staticClass:"literal"},[t._v("git clone -o booyah")]),t._v("，那么你默认的远程分支名字将会是 "),a("code",{staticClass:"literal"},[t._v("booyah/master")]),t._v("。")])])]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:e(293),alt:"克隆之后的服务器与本地仓库。"}})]),t._v(" "),a("figcaption",[t._v("Figure 22. 克隆之后的服务器与本地仓库")])]),t._v(" "),a("p",[t._v("如果你在本地的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支做了一些工作，在同一段时间内有其他人推送提交到\n"),a("code",{staticClass:"literal"},[t._v("git.ourcompany.com")]),t._v(" 并且更新了它的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支，这就是说你们的提交历史已走向不同的方向。\n即便这样，只要你保持不与 "),a("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 服务器连接（并拉取数据），你的 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 指针就不会移动。")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:e(294),alt:"本地与远程的工作可以分叉。"}})]),t._v(" "),a("figcaption",[t._v("Figure 23. 本地与远程的工作可以分叉")])]),t._v(" "),a("p",[t._v("如果要与给定的远程仓库同步数据，运行 "),a("code",{staticClass:"literal"},[t._v("git fetch <remote>")]),t._v(" 命令（在本例中为 "),a("code",{staticClass:"literal"},[t._v("git fetch origin")]),t._v("）。\n这个命令查找 “origin” 是哪一个服务器（在本例中，它是 "),a("code",{staticClass:"literal"},[t._v("git.ourcompany.com")]),t._v("），\n从中抓取本地没有的数据，并且更新本地数据库，移动 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 指针到更新之后的位置。")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:e(295),alt:"`git fetch` 更新你的远程仓库引用。"}})]),t._v(" "),a("figcaption",[t._v("Figure 24. "),a("code",{staticClass:"literal"},[t._v("git fetch")]),t._v(" 更新你的远程跟踪分支")])]),t._v(" "),a("p",[t._v("为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。\n这个服务器位于 "),a("code",{staticClass:"literal"},[t._v("git.team1.ourcompany.com")]),t._v("。\n你可以运行 "),a("code",{staticClass:"literal"},[t._v("git remote add")]),t._v(" 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在\n"),a("a",{staticClass:"xref",attrs:{id:"xref--ch02-git-basics-chapter",href:"/chapter-2/index.html"}},[t._v("Git 基础")]),t._v(" 中详细说明。\n将这个远程仓库命名为 "),a("code",{staticClass:"literal"},[t._v("teamone")]),t._v("，将其作为完整 URL 的缩写。")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:e(296),alt:"添加另一个远程仓库。"}})]),t._v(" "),a("figcaption",[t._v("Figure 25. 添加另一个远程仓库")])]),t._v(" "),a("p",[t._v("现在，可以运行 "),a("code",{staticClass:"literal"},[t._v("git fetch teamone")]),t._v(" 来抓取远程仓库 "),a("code",{staticClass:"literal"},[t._v("teamone")]),t._v(" 有而本地没有的数据。\n因为那台服务器上现有的数据是 "),a("code",{staticClass:"literal"},[t._v("origin")]),t._v(" 服务器上的一个子集，\n所以 Git 并不会抓取数据而是会设置远程跟踪分支 "),a("code",{staticClass:"literal"},[t._v("teamone/master")]),t._v(" 指向 "),a("code",{staticClass:"literal"},[t._v("teamone")]),t._v(" 的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。")]),t._v(" "),a("figure",{staticClass:"image"},[a("div",{staticClass:"content"},[a("img",{attrs:{src:e(297),alt:"远程跟踪分支 `teamone/master`。"}})]),t._v(" "),a("figcaption",[t._v("Figure 26. 远程跟踪分支 "),a("code",{staticClass:"literal"},[t._v("teamone/master")])])]),t._v(" "),a("h2",{attrs:{id:"推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推送"}},[t._v("#")]),t._v(" 推送")]),t._v(" "),a("p",[t._v("\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。\n本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。\n这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。")]),t._v(" "),a("p",[t._v("如果希望和别人一起在名为 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 的分支上工作，你可以像推送第一个分支那样推送它。\n运行 "),a("code",{staticClass:"literal"},[t._v("git push <remote> <branch>")]),t._v(":")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix")])]),t._v(" "),a("p",[t._v("这里有些工作被简化了。\nGit 自动将 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支名字展开为 "),a("code",{staticClass:"literal"},[t._v("refs/heads/serverfix:refs/heads/serverfix")]),t._v("，\n那意味着，“推送本地的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支来更新远程仓库上的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支。”\n我们将会详细学习 "),a("a",{staticClass:"xref",attrs:{id:"xref--ch10-git-internals",href:"/chapter-10/index.html"}},[t._v("Git 内部原理")]),t._v(" 的 "),a("code",{staticClass:"literal"},[t._v("refs/heads/")]),t._v(" 部分，\n但是现在可以先把它放在儿。你也可以运行 "),a("code",{staticClass:"literal"},[t._v("git push origin serverfix:serverfix")]),t._v("，\n它会做同样的事——也就是说“推送本地的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支，将其作为远程仓库的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支”\n可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n如果并不想让远程仓库上的分支叫做 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v("，可以运行 "),a("code",{staticClass:"literal"},[t._v("git push origin serverfix:awesomebranch")]),t._v("\n来将本地的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支推送到远程仓库上的 "),a("code",{staticClass:"literal"},[t._v("awesomebranch")]),t._v(" 分支。")]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: 如何避免每次输入密码","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("h2",[t._v("如何避免每次输入密码")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。\n默认情况下它会在终端中提示服务器是否允许你进行推送。")]),t._v(" "),a("p",[t._v("如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。\n最简单的方式就是将其保存在内存中几分钟，可以简单地运行 "),a("code",{staticClass:"literal"},[t._v("git config --global credential.helper cache")]),t._v(" 来设置它。")]),t._v(" "),a("p",[t._v("想要了解更多关于不同验证缓存的可用选项，查看 "),a("a",{staticClass:"xref",attrs:{id:"xref--ch07-git-tools--_credential_caching",href:"/chapter-7/14.html#凭证存储"}},[t._v("凭证存储")]),t._v("。")])])]),t._v(" "),a("p",[t._v("下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 "),a("code",{staticClass:"literal"},[t._v("origin/serverfix")]),t._v("，指向服务器的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支的引用：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix")])]),t._v(" "),a("p",[t._v("要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。\n换一句话说，这种情况下，不会有一个新的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支——只有一个不可以修改的 "),a("code",{staticClass:"literal"},[t._v("origin/serverfix")]),t._v(" 指针。")]),t._v(" "),a("p",[t._v("可以运行 "),a("code",{staticClass:"literal"},[t._v("git merge origin/serverfix")]),t._v(" 将这些工作合并到当前所在的分支。\n如果想要在自己的 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支上工作，可以将其建立在远程跟踪分支之上：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'")])]),t._v(" "),a("p",[t._v("这会给你一个用于工作的本地分支，并且起点位于 "),a("code",{staticClass:"literal"},[t._v("origin/serverfix")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"跟踪分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跟踪分支"}},[t._v("#")]),t._v(" 跟踪分支")]),t._v(" "),a("p",[t._v("\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。\n跟踪分支是与远程分支有直接关系的本地分支。\n如果在一个跟踪分支上输入 "),a("code",{staticClass:"literal"},[t._v("git pull")]),t._v("，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。")]),t._v(" "),a("p",[t._v("当克隆一个仓库时，它通常会自动地创建一个跟踪 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。\n然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支。\n最简单的实例就是像之前看到的那样，运行 "),a("code",{staticClass:"literal"},[t._v("git checkout -b <branch> <remote>/<branch>")]),t._v("。\n这是一个十分常用的操作所以 Git 提供了 "),a("code",{staticClass:"literal"},[t._v("--track")]),t._v(" 快捷方式：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'")])]),t._v(" "),a("p",[t._v("由于这个操作太常用了，该捷径本身还有一个捷径。\n如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'")])]),t._v(" "),a("p",[t._v("如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'")])]),t._v(" "),a("p",[t._v("现在，本地分支 "),a("code",{staticClass:"literal"},[t._v("sf")]),t._v(" 会自动从 "),a("code",{staticClass:"literal"},[t._v("origin/serverfix")]),t._v(" 拉取。")]),t._v(" "),a("p",[t._v("设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，\n你可以在任意时间使用 "),a("code",{staticClass:"literal"},[t._v("-u")]),t._v(" 或 "),a("code",{staticClass:"literal"},[t._v("--set-upstream-to")]),t._v(" 选项运行 "),a("code",{staticClass:"literal"},[t._v("git branch")]),t._v(" 来显式地设置。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.")])]),t._v(" "),a("aside",{staticClass:"admonition note custom-block tip",attrs:{title:"Note: 上游快捷方式","epub:type":"note"}},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("h2",[t._v("上游快捷方式")]),t._v(" "),a("div",{staticClass:"content"},[a("p",[t._v("当设置好跟踪分支后，可以通过简写 "),a("code",{staticClass:"literal"},[t._v("@{upstream}")]),t._v(" 或 "),a("code",{staticClass:"literal"},[t._v("@{u}")]),t._v(" 来引用它的上游分支。\n所以在 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支时并且它正在跟踪 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 时，如果愿意的话可以使用 "),a("code",{staticClass:"literal"},[t._v("git merge @{u}")]),t._v(" 来取代 "),a("code",{staticClass:"literal"},[t._v("git merge origin/master")]),t._v("。")])])]),t._v(" "),a("p",[t._v("如果想要查看设置的所有跟踪分支，可以使用 "),a("code",{staticClass:"literal"},[t._v("git branch")]),t._v(" 的 "),a("code",{staticClass:"literal"},[t._v("-vv")]),t._v(" 选项。\n这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new")])]),t._v(" "),a("p",[t._v("这里可以看到 "),a("code",{staticClass:"literal"},[t._v("iss53")]),t._v(" 分支正在跟踪 "),a("code",{staticClass:"literal"},[t._v("origin/iss53")]),t._v(" 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。\n也能看到 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支正在跟踪 "),a("code",{staticClass:"literal"},[t._v("origin/master")]),t._v(" 分支并且是最新的。\n接下来可以看到 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支正在跟踪 "),a("code",{staticClass:"literal"},[t._v("teamone")]),t._v(" 服务器上的 "),a("code",{staticClass:"literal"},[t._v("server-fix-good")]),t._v(" 分支并且领先 3 落后 1，\n意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。\n最后看到 "),a("code",{staticClass:"literal"},[t._v("testing")]),t._v(" 分支并没有跟踪任何远程分支。")]),t._v(" "),a("p",[t._v("需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。\n这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。\n如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。\n可以像这样做：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git fetch --all; git branch -vv")])]),t._v(" "),a("h2",{attrs:{id:"拉取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取"}},[t._v("#")]),t._v(" 拉取")]),t._v(" "),a("p",[t._v("\n当 "),a("code",{staticClass:"literal"},[t._v("git fetch")]),t._v(" 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。\n它只会获取数据然后让你自己合并。\n然而，有一个命令叫作 "),a("code",{staticClass:"literal"},[t._v("git pull")]),t._v(" 在大多数情况下它的含义是一个 "),a("code",{staticClass:"literal"},[t._v("git fetch")]),t._v(" 紧接着一个 "),a("code",{staticClass:"literal"},[t._v("git merge")]),t._v(" 命令。\n如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过\n"),a("code",{staticClass:"literal"},[t._v("clone")]),t._v(" 或 "),a("code",{staticClass:"literal"},[t._v("checkout")]),t._v(" 命令为你创建的，"),a("code",{staticClass:"literal"},[t._v("git pull")]),t._v(" 都会查找当前分支所跟踪的服务器与分支，\n从服务器上抓取数据然后尝试合并入那个远程分支。")]),t._v(" "),a("p",[t._v("由于 "),a("code",{staticClass:"literal"},[t._v("git pull")]),t._v(" 的魔法经常令人困惑所以通常单独显式地使用 "),a("code",{staticClass:"literal"},[t._v("fetch")]),t._v(" 与 "),a("code",{staticClass:"literal"},[t._v("merge")]),t._v(" 命令会更好一些。")]),t._v(" "),a("h2",{attrs:{id:"删除远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支"}},[t._v("#")]),t._v(" 删除远程分支")]),t._v(" "),a("p",[t._v("\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性，\n并且将其合并到了远程仓库的 "),a("code",{staticClass:"literal"},[t._v("master")]),t._v(" 分支（或任何其他稳定代码分支）。\n可以运行带有 "),a("code",{staticClass:"literal"},[t._v("--delete")]),t._v(" 选项的 "),a("code",{staticClass:"literal"},[t._v("git push")]),t._v(" 命令来删除一个远程分支。\n如果想要从服务器上删除 "),a("code",{staticClass:"literal"},[t._v("serverfix")]),t._v(" 分支，运行下面的命令：")]),t._v(" "),a("pre",{staticClass:"language-bash"},[a("code",[a("span",{staticStyle:{"font-weight":"bold"}},[t._v("$")]),t._v(" git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix")])]),t._v(" "),a("p",[t._v("基本上这个命令做的只是从服务器上移除这个指针。\nGit 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。")])])}),[],!1,null,null,null);s.default=i.exports}}]);